nome_movimento = str_replace(nome_movimento, pattern = "[Cc]omplesso", replacement = "complex"),
nome_movimento = str_replace(nome_movimento, pattern = "Aree soggette a crolli/ribaltamenti diffusi", replacement = "area of rockfall/topple"),
nome_movimento = str_replace(nome_movimento, pattern = "crollo", replacement = "rockfall"),
nome_movimento = str_replace(nome_movimento, pattern = "scivolamento traslativo", replacement = "translational"),
nome_movimento = str_replace(nome_movimento, pattern = "scivolamento rotazionale", replacement = "rotational"),
nome_movimento = str_replace(nome_movimento, pattern = "Aree soggette a sprofondamenti diffusi", replacement = "areas prone to sinking"),
nome_movimento = str_replace(nome_movimento, pattern = 'col.*lento"', replacement = "slow flow"),
nome_movimento = str_replace_all(nome_movimento, pattern = 'col.*rapido"', replacement = "fast flow"),
nome_movimento = str_replace(nome_movimento, pattern = "ribalmento", replacement = "overturn"),
nome_movimento = str_replace(nome_movimento, pattern = "DGPV", replacement = "deep seated landslide"),
nome_movimento = str_replace(nome_movimento, pattern = "Sprofondamento", replacement = "subsidence"),
nome_movimento = str_replace(nome_movimento, pattern = "Aree soggette a frane superficiali diffuse", replacement = "area of diffuse surface slides"),
nome_movimento = str_replace(nome_movimento, pattern = "espansione", replacement = "expansion"),
) %>%
# rename the values in tipologia
mutate(
tipologia = str_replace(tipologia, pattern="Complesso", replacement="complex"),
tipologia = str_replace(tipologia, pattern="Aree soggette a crolli/ribaltamenti diffusi", replacement="area of rockfall/topple"),
tipologia = str_replace(tipologia, pattern="Crollo/Ribaltamento", replacement="rockfall"),
tipologia = str_replace(tipologia, pattern="Scivolamento rotazionale/traslativo", replacement="translational/rotational slide"),
tipologia = str_replace(tipologia, pattern = "Espansione", replacement = "expansion"),
tipologia = str_replace(tipologia, pattern = "Aree soggette a frane superficiali diffuse", replacement = "area of diffuse surface slides"),
tipologia = str_replace(tipologia, pattern = "Aree soggette a frane superficiali diffuse", replacement = "area of diffuse surface slides"),
tipologia = str_replace(tipologia, pattern = "Colamento lento", replacement = "flow (slow)"),
tipologia = str_replace(tipologia, pattern = "Colamento rapido", replacement = "flow (fast)"),
tipologia = str_replace(tipologia, pattern = "DGPV", replacement = "deep seated landslide"),
tipologia = str_replace(tipologia, pattern = "Sprofondamento", replacement = "subsidence"),
tipologia = str_replace(tipologia, pattern = "Aree soggette a sprofondamenti diffusi", replacement = "area of diffuse subsidence")
)
return(df)
}
df = translate(res)
unique(df$nome_movimento)
unique(res$tipologia)
unique(df$tipologia)
devtools::document()
file.edit("NAMESPACE")
devtools::document()
file.edit("R/translate.R")
#' function to translate some of the column to english
#'
#' @export
#'
translate_iffi = function(df) {
df = df %>%
# rename the values in nome_movimento
mutate(
nome_movimento = str_replace(nome_movimento, pattern = "[Cc]omplesso", replacement = "complex"),
nome_movimento = str_replace(nome_movimento, pattern = "Aree soggette a crolli/ribaltamenti diffusi", replacement = "area of rockfall/topple"),
nome_movimento = str_replace(nome_movimento, pattern = "crollo", replacement = "rockfall"),
nome_movimento = str_replace(nome_movimento, pattern = "scivolamento traslativo", replacement = "translational"),
nome_movimento = str_replace(nome_movimento, pattern = "scivolamento rotazionale", replacement = "rotational"),
nome_movimento = str_replace(nome_movimento, pattern = "Aree soggette a sprofondamenti diffusi", replacement = "areas prone to sinking"),
nome_movimento = str_replace(nome_movimento, pattern = 'col.*lento"', replacement = "slow flow"),
nome_movimento = str_replace_all(nome_movimento, pattern = 'col.*rapido"', replacement = "fast flow"),
nome_movimento = str_replace(nome_movimento, pattern = "ribalmento", replacement = "overturn"),
nome_movimento = str_replace(nome_movimento, pattern = "DGPV", replacement = "deep seated landslide"),
nome_movimento = str_replace(nome_movimento, pattern = "Sprofondamento", replacement = "subsidence"),
nome_movimento = str_replace(nome_movimento, pattern = "Aree soggette a frane superficiali diffuse", replacement = "area of diffuse surface slides"),
nome_movimento = str_replace(nome_movimento, pattern = "espansione", replacement = "expansion"),
) %>%
# rename the values in tipologia
mutate(
tipologia = str_replace(tipologia, pattern="Complesso", replacement="complex"),
tipologia = str_replace(tipologia, pattern="Aree soggette a crolli/ribaltamenti diffusi", replacement="area of rockfall/topple"),
tipologia = str_replace(tipologia, pattern="Crollo/Ribaltamento", replacement="rockfall"),
tipologia = str_replace(tipologia, pattern="Scivolamento rotazionale/traslativo", replacement="translational/rotational slide"),
tipologia = str_replace(tipologia, pattern = "Espansione", replacement = "expansion"),
tipologia = str_replace(tipologia, pattern = "Aree soggette a frane superficiali diffuse", replacement = "area of diffuse surface slides"),
tipologia = str_replace(tipologia, pattern = "Aree soggette a frane superficiali diffuse", replacement = "area of diffuse surface slides"),
tipologia = str_replace(tipologia, pattern = "Colamento lento", replacement = "flow (slow)"),
tipologia = str_replace(tipologia, pattern = "Colamento rapido", replacement = "flow (fast)"),
tipologia = str_replace(tipologia, pattern = "DGPV", replacement = "deep seated landslide"),
tipologia = str_replace(tipologia, pattern = "Sprofondamento", replacement = "subsidence"),
tipologia = str_replace(tipologia, pattern = "Aree soggette a sprofondamenti diffusi", replacement = "area of diffuse subsidence")
) %>%
# rename the actual variables
mutate(
first_level = tipologia,
second_level = nome_movimento
)
return(df)
}
df = translate(res)
names(df)
#' function to translate some of the column to english
#'
#' @export
#'
translate_iffi = function(df) {
df = df %>%
# rename the values in nome_movimento
mutate(
nome_movimento = str_replace(nome_movimento, pattern = "[Cc]omplesso", replacement = "complex"),
nome_movimento = str_replace(nome_movimento, pattern = "Aree soggette a crolli/ribaltamenti diffusi", replacement = "area of rockfall/topple"),
nome_movimento = str_replace(nome_movimento, pattern = "crollo", replacement = "rockfall"),
nome_movimento = str_replace(nome_movimento, pattern = "scivolamento traslativo", replacement = "translational"),
nome_movimento = str_replace(nome_movimento, pattern = "scivolamento rotazionale", replacement = "rotational"),
nome_movimento = str_replace(nome_movimento, pattern = "Aree soggette a sprofondamenti diffusi", replacement = "areas prone to sinking"),
nome_movimento = str_replace(nome_movimento, pattern = 'col.*lento"', replacement = "slow flow"),
nome_movimento = str_replace_all(nome_movimento, pattern = 'col.*rapido"', replacement = "fast flow"),
nome_movimento = str_replace(nome_movimento, pattern = "ribalmento", replacement = "overturn"),
nome_movimento = str_replace(nome_movimento, pattern = "DGPV", replacement = "deep seated landslide"),
nome_movimento = str_replace(nome_movimento, pattern = "Sprofondamento", replacement = "subsidence"),
nome_movimento = str_replace(nome_movimento, pattern = "Aree soggette a frane superficiali diffuse", replacement = "area of diffuse surface slides"),
nome_movimento = str_replace(nome_movimento, pattern = "espansione", replacement = "expansion"),
) %>%
# rename the values in tipologia
mutate(
tipologia = str_replace(tipologia, pattern="Complesso", replacement="complex"),
tipologia = str_replace(tipologia, pattern="Aree soggette a crolli/ribaltamenti diffusi", replacement="area of rockfall/topple"),
tipologia = str_replace(tipologia, pattern="Crollo/Ribaltamento", replacement="rockfall"),
tipologia = str_replace(tipologia, pattern="Scivolamento rotazionale/traslativo", replacement="translational/rotational slide"),
tipologia = str_replace(tipologia, pattern = "Espansione", replacement = "expansion"),
tipologia = str_replace(tipologia, pattern = "Aree soggette a frane superficiali diffuse", replacement = "area of diffuse surface slides"),
tipologia = str_replace(tipologia, pattern = "Aree soggette a frane superficiali diffuse", replacement = "area of diffuse surface slides"),
tipologia = str_replace(tipologia, pattern = "Colamento lento", replacement = "flow (slow)"),
tipologia = str_replace(tipologia, pattern = "Colamento rapido", replacement = "flow (fast)"),
tipologia = str_replace(tipologia, pattern = "DGPV", replacement = "deep seated landslide"),
tipologia = str_replace(tipologia, pattern = "Sprofondamento", replacement = "subsidence"),
tipologia = str_replace(tipologia, pattern = "Aree soggette a sprofondamenti diffusi", replacement = "area of diffuse subsidence")
) %>%
# rename the actual variables
mutate(
first_level = tipologia,
second_level = nome_movimento
)
return(df)
}
df = translate_iffi(res)
names(df)
df %>% count(first_level, sort=T)
devtools::document()
file.edit("data_raw/sample_data.R")
library(iffitoR)
library(sf)
library(RODBC)
library(dplyr)
library(stringr)
# define some paths
database_dir = "../euracR/data/database/"
shape_path = "../euracR/data/Shapefiles/IFFI10_1.shp"
# query the data
landsld = make_shapefile(
database_dir = database_dir,
# normally null only setting it here for me
attribute_database_name = "tbl_frane",
# the name without extension
dictionary_database_name = "diz_frane",
shapefile = shape_path,
# the colums we want to retrieve directly
attri = c("anno_min",
"mese_min",
"giorno_min",
"area"),
# tables to join the description
joins = list(
"tbl_frane.Generalita.Cod_tipo" = c(
"diz_frane.diz_tipo_movi.cod_tipo",
"diz_frane.diz_tipo_movi.tipologia"
),
"tbl_frane.clas_ii_liv.movimento" = c(
"diz_frane.diz_movimenti.movimento",
"diz_frane.diz_movimenti.nome_movimento"
),
"tbl_frane.Geologia.litologia" = c(
"diz_frane.diz_litologie.litologia",
"diz_frane.diz_litologie.nome_litologia"
)
)
)
# rename the dataframe
landsld = iffitoR::translate_iffi(landsld)
usethis::use_data(landsld, compress = "xz", overwrite = T)
file.edit("R/example_data.R")
devtools
devtools::document()
res
get_date_information = function(res){
res = res %>%
mutate(
year_present = ifelse("anno_min", T, F),
month_present = ifelse("mese_min", T, F),
day_present = ifelse("giorno_min", T, F)
)
res = res %>%
mutate(
date_info = ifelse(day_present, "day",
ifelse(month_present, "month",
ifelse("year_present", "year", "no date")))
)
}
res
res2 = get_date_information(res)
librar
library(iffitoR)
res2 = get_date_information(res)
library(magrittr)
res2 = get_date_information(res)
library(dplyr)
res2 = get_date_information(res)
names(res2)
View(res2)
get_date_information = function(res){
res = res %>%
mutate(
year_present = ifelse("anno_min", T, F),
month_present = ifelse("mese_min", T, F),
day_present = ifelse("giorno_min", T, F)
)
res = res %>%
mutate(
date_info = if_else(day_present, "day",
if_else(month_present, "month",
if_else("year_present", "year", "no date")))
)
}
res2 = get_date_information(res)
res = res %>%
mutate(
year_present = ifelse("anno_min", T, F),
month_present = ifelse("mese_min", T, F),
day_present = ifelse("giorno_min", T, F)
)
View(res)
library(iffitoR)
library(dplyr)
%>%
res
res1 = res %>%
mutate(
year_present = ifelse("anno_min", TRUE, FALSE),
month_present = ifelse("mese_min", T, F),
day_present = ifelse("giorno_min", T, F)
)
View(res2)
View(res1)
res1 = res %>%
mutate(
year_present = ifelse(anno_min, TRUE, FALSE),
month_present = ifelse(mese_min, T, F),
day_present = ifelse(giorno_min, T, F)
)
View(res1)
res2 = res1 %>%
mutate(
date_info = if_else(day_present, "day",
if_else(month_present, "month",
if_else("year_present", "year", "no date")))
)
res2 = res1 %>%
mutate(
date_info = ifelse(day_present, "day",
ifelse(month_present, "month",
ifelse("year_present", "year", "no date")))
)
View(res2)
res1 = res %>%
mutate(
year_present = ifelse(anno_min, TRUE, FALSE),
month_present = ifelse(mese_min, T, F),
day_present = ifelse(giorno_min, T, F)
)
res2 = res1 %>%
mutate(
date_info = ifelse(day_present, "day",
ifelse(month_present, "month",
ifelse("year_present", "year", "no date")))
)
View(res2)
res2 = res1 %>%
mutate(
date_info = if_else(day_present, "day",
if_else(month_present, "month",
if_else("year_present", "year", "no date")))
)
res1 = res %>%
mutate(
year_present = ifelse(anno_min, TRUE, FALSE),
month_present = ifelse(mese_min, TRUE, FALSE),
day_present = ifelse(giorno_min, TRUE, FALSE)
)
res2 = res1 %>%
mutate(
date_info = if_else(day_present, "day",
if_else(month_present, "month",
if_else("year_present", "year", "no date")))
)
View(res2)
View(res1)
res2 = res1 %>%
mutate(
date_info = ifelse(day_present, "day",
ifelse(month_present, "month",
ifelse(year_present, "year", "no date")))
)
View(res1)
View(res2)
res1 = res %>%
mutate(
year_present = ifelse(anno_min, TRUE, FALSE),
month_present = ifelse(mese_min, TRUE, FALSE),
day_present = ifelse(giorno_min, TRUE, FALSE)
)
View(res1)
res2 = res1 %>%
mutate(
date_info = ifelse(day_present, "day",
ifelse(month_present, "month",
ifelse(year_present, "year", "no date")))
)
View(res2)
res1 = res %>%
mutate(
year_present = ifelse(anno_min, TRUE, FALSE),
month_present = ifelse(mese_min, TRUE, FALSE),
day_present = ifelse(giorno_min, TRUE, FALSE)
)
res2 = res1 %>%
mutate(date_info = if_else(
day_present,
true = "day",
false = if_else(
month_present,
true = "month",
false = if_else(year_present, true = "year", false =
"no date")
)
))
View(res2)
res
library(iffitoR)
rm(list=ls())
library(iffitoR)
library(tidyverse)
res
res1 = res %>%
mutate(
year_present = ifelse(anno_min, TRUE, FALSE),
month_present = ifelse(mese_min, TRUE, FALSE),
day_present = ifelse(giorno_min, TRUE, FALSE)
)
View(res1)
res2 = res1 %>%
mutate(date_info = if_else(
day_present,
true = "day",
false = if_else(
month_present,
true = "month",
false = if_else(year_present, true = "year", false =
"no date")
)
))
View(res2)
res
get_date_information = function(res) {
res = res %>%
mutate(
year_present = if_else(!is.na(anno_min), true = TRUE, false = FALSE),
month_present = if_else(!is.na(mese_min), true = TRUE, false = FALSE),
day_present = if_else(!is.na(giorno_min), true = TRUE, false = FALSE)
)
res = res %>%
mutate(date_info = if_else(
day_present,
true = "day",
false = if_else(
month_present,
true = "month",
false = if_else(year_present, true = "year", false =
"no date")
)))
return(res)
}
df = get_date_information(res)
View(df)
get_date_information = function(res) {
res = res %>%
mutate(
year_present = if_else(!is.na(anno_min), true = TRUE, false = FALSE),
month_present = if_else(!is.na(mese_min), true = TRUE, false = FALSE),
day_present = if_else(!is.na(giorno_min), true = TRUE, false = FALSE)
)
res = res %>%
mutate(date_info = if_else(
day_present,
true = "day",
false = if_else(
month_present,
true = "month",
false = if_else(year_present, true = "year", false =
"no date")
)))
res = res %>% mutate(date = paste(anno_min, mese_min, giorno_min, sep = "/")) %>%
mutate(date = as.Date(date),
year.int = anno_min, # year as int
year.posix = as.Date(paste0(anno_min, "-01-01")))
return(res)
}
View(df)
df = get_date_information(res)
devtools::load_all()
?get_date_information
devtools::document()
?get_date_information
devtools::document()
?get_date_information
devtools::document()
?get_date_information
devtools::document()
?get_date_information
devtools::document()
devtools::load_all()
res
r = get_date_information(res)
View(r)
res
res %>% select(-c(anno_min))
devtools::load_all()
get_date_information
detach("iffitoR")
detach(name="iffitoR")
?detach
detach(package:iffitoR)
devtools::load_all()
get_date_information
devtools::load_all()
rm(list=c("get_date_information"))
devtools::load_all()
get_date_information()
get_date_information(
get_date_information
r = get_date_information(res) %>% View()
file.edit("local_tests/iffi_data_shiny/app.R")
library(shiny)
shiny::runApp()
shiny::runApp(appdir="local_tests/iffi_data_shiny/")
shiny::runApp(appdir="local_tests/iffi_data_shiny/")
shiny::runApp(appDir="local_tests/iffi_data_shiny/")
shiny::runApp(appDir="local_tests/iffi_data_shiny/")
shiny::runApp(appDir="local_tests/iffi_data_shiny/")
shiny::runApp(appDir="local_tests/iffi_data_shiny/")
file.edit("NAMESPACE")
res
devtools::load_all()
get_date_information(res)
a = get_date_information(res)
cat("Added the columns: date_info (year, month, day, no date)\n")
cat("Added the columns: date_info (year, month, day, no date)\n sd")
cat("Added the columns: date_info (year, month, day, no date)\nsd")
as.Date("2020-01-01")
a = as.Date("2020-01-01")
class(a)
cat("Added the columns:\n date_info (character-string indicting if - year, month, day, no date - is present)\n date (")
cat("Added the columns:\n date_info - chr - (character-string indicting if) year, month, day, no date - is present)\n date (")
a
res
df = get_date_information(res)
df
r = df$year.int[[1]]
r
class(r)
cat("Added the columns:\n date_info - chr - (eiher 'year', 'month', 'day' or 'no date')\n year.int - integer ")
cat("Added the columns:\n date_info (chr) - (eiher 'year', 'month', 'day' or 'no date')\n year.int - integer ")
cat("Added the columns:\n date_info (chr) - (eiher 'year', 'month', 'day' or 'no date')\n year.int (integer)
month.int")
cat("Added the columns:\n date_info (chr) - (eiher 'year', 'month', 'day' or 'no date')\n year.int (integer)
month.int")
cat("Added the columns:\n date_info (chr) - (eiher 'year', 'month', 'day' or 'no date')\n year.int (integer)
month.int")
cat("Added the columns:\n date_info (chr) - (eiher 'year', 'month', 'day' or 'no date')\n year.int (integer)
month.int")
cat("Added the columns:\n\n date_info (chr) - (eiher 'year', 'month', 'day' or 'no date')\n year.int (integer)
month.int")
cat("Added the columns:\n\n date_info (chr) - (eiher 'year', 'month', 'day' or 'no date')\n year.int (integer)
month.int (integer)
day.int (integer)
year.posix (date) (object of class date, referenced to the 1st of January of the year")
print("Added the columns:\n\n date_info (chr) - (eiher 'year', 'month', 'day' or 'no date')\n year.int (integer)
month.int (integer)
day.int (integer)
year.posix (date) (object of class date, referenced to the 1st of January of the year)")
message("Added the columns:\n\n date_info (chr) - (eiher 'year', 'month', 'day' or 'no date')\n year.int (integer)
month.int (integer)
day.int (integer)
year.posix (date) (object of class date, referenced to the 1st of January of the year)")
devtools::load_all()
a = get_date_information(res)
devtools::load_all()
a = get_date_information(res)
devtools::load_all()
a = get_date_information(res)
devtools::load_all()
a = get_date_information(res)
.libPaths()
library(iffitoR)
devtools::load_all()
get_date_information
library(shiny)
library(tidyverse)
library(sf)
library(GADMTools)
library(plotly)
library(leaflet)
library(leaflet.extras)
shiny::runApp("local_tests/iffi_data_shiny/")
shiny::runApp("local_tests/iffi_data_shiny/")
shiny::runApp("local_tests/iffi_data_shiny/")
librar
library(shiny)
shiny::runApp("local_tests/iffi_data_shiny/")
