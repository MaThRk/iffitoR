"diz_frane.diz_tipo_movi.cod_tipo",
"diz_frane.diz_tipo_movi.tipologia"
),
"tbl_frane.clas_ii_liv.movimento" = c(
"diz_frane.diz_movimenti.movimento",
"diz_frane.diz_movimenti.nome_movimento"
),
"tbl_frane.ass_gen_cause.causa" = c(
"diz_frane.diz_cause.causa",
"diz_frane.diz_cause.nome_causa"
)
)
)
a = res %>% filter(anno_min == 2012)
dim(a)
mapview(a)
mapview(res)
mapview(res, zcol="nome_movimento")
mapview(res, zcol="nome_movimento", burst=T)
res = make_shapefile(
database_dir = "../euracR/data/database/",
# normally null only setting it here for me
attribute_database_name = "tbl_frane",
# the name without extension
dictionary_database_name = "diz_frane",
shapefile = "../euracR/data/Shapefiles/IFFI10_1.shp",
# normally null only setting it here for me
# the colums we want to retrieve directly
attri = c("anno_min",
"mese_min",
"giorno_min",
"area"),
# tables to join the description
joins = list(
"tbl_frane.Generalita.Cod_tipo" = c(
"diz_frane.diz_tipo_movi.cod_tipo",
"diz_frane.diz_tipo_movi.tipologia"
),
"tbl_frane.clas_ii_liv.movimento" = c(
"diz_frane.diz_movimenti.movimento",
"diz_frane.diz_movimenti.nome_movimento"
),
"tbl_frane.ass_gen_cause.causa" = c(
"diz_frane.diz_cause.causa",
"diz_frane.diz_cause.nome_causa"
)
)
)
res = res %>% filter(anno_min==2014, )
res = res %>% filter(anno_min==2014, str_detect(nome_movimento, "trasl"))
dim(res)
library(sf)
library(iffitoR)
library(tmap)
library(tidyverse)
library(glue)
library(GADMTools)
library(mapview)
res = make_shapefile(
database_dir = "../euracR/data/database/",
# normally null only setting it here for me
attribute_database_name = "tbl_frane",
# the name without extension
dictionary_database_name = "diz_frane",
shapefile = "../euracR/data/Shapefiles/IFFI10_1.shp",
# normally null only setting it here for me
# the colums we want to retrieve directly
attri = c("anno_min",
"mese_min",
"giorno_min",
"area"),
# tables to join the description
joins = list(
"tbl_frane.Generalita.Cod_tipo" = c(
"diz_frane.diz_tipo_movi.cod_tipo",
"diz_frane.diz_tipo_movi.tipologia"
),
"tbl_frane.clas_ii_liv.movimento" = c(
"diz_frane.diz_movimenti.movimento",
"diz_frane.diz_movimenti.nome_movimento"
),
"tbl_frane.ass_gen_cause.causa" = c(
"diz_frane.diz_cause.causa",
"diz_frane.diz_cause.nome_causa"
)
)
)
database_dir = "../euracR/data/database/"
attribute_database_name = "tbl_frane"
dictionary_database_name = "diz_frane"
shapefile = "../euracR/data/Shapefiles/IFFI10_1.shp"
attri = c("anno_min",
"mese_min",
"giorno_min",
"area")
joins = list(
"tbl_frane.Generalita.Cod_tipo" = c(
"diz_frane.diz_tipo_movi.cod_tipo",
"diz_frane.diz_tipo_movi.tipologia"
),
"tbl_frane.clas_ii_liv.movimento" = c(
"diz_frane.diz_movimenti.movimento",
"diz_frane.diz_movimenti.nome_movimento"
),
"tbl_frane.ass_gen_cause.causa" = c(
"diz_frane.diz_cause.causa",
"diz_frane.diz_cause.nome_causa"
)
)
# establish connections
conns = set_connection(database_dir)
# set the right ones
# there are some issues with indexing the list, for some reason we need to index conns with [[]]
# to maintain a valid and open connection
index_attr = which(grepl(attribute_database_name, names(conns)))
if (!is.null(dictionary_database_name)) {
index_dict = which(grepl(dictionary_database_name, names(conns)))
}
attr_database_conn = conns[[index_attr]]
if (!is.null(dictionary_database_name)) {
dict_database_conn = conns[[index_dict]]
}
# the table names are the attributes we can query
# Especially the one in the attributes table are interesting
table_names_attr = make_vector_table_names(attr_database_conn)
if (!is.null(dictionary_database_name)) {
table_names_dict = make_vector_table_names(dict_database_conn)
}
# make a list of dataframes(tables) for the attributes database
dfs_attr = make_list_dataframes(attr_database_conn)
dfs_attr
class(dfs_attr)
length(dfs_attr)
lapply(dfs_attr, dim)
lapply(dfs_attr, dim[[1]])
lapply(dfs_attr, function(x) dim(x)[1])
unlist(lapply(dfs_attr, function(x) dim(x)[1]))
as.data.frame(unlist(lapply(dfs_attr, function(x) dim(x)[1])))
df = as.data.frame(unlist(lapply(dfs_attr, function(x) dim(x)[1])))
df %>% kableExtra::kable()
df %>% kableExtra::kable(style="text")
df %>% stargazer::stargazer(., type="text")
head(df)
str(df)
as.data.frame(unlist(lapply(dfs_attr, function(x) dim(x)[1])))
unlist(lapply(dfs_attr, function(x) dim(x)[1]))
nv = unlist(lapply(dfs_attr, function(x) dim(x)[1]))
data.frame(nv)
data.frame(nv, stringsAsFactors = F)
data.frame(table = names(nv), nv)
data.frame(table = names(nv), nv, row.names = F)
data.frame(table = names(nv), nv, row.names = NULL)
df = data.frame(table = names(nv), nv, row.names = NULL)
stargazer::start
stargazer::stargazer(df, type="text")
dim(df)
df
names(df) = c("tablename", "number_rows")
df
head(dfs_attr[[2]])
dfs_attr[[2]]
dim(dfs_attr[[2]])
dim(dfs_attr[[4]])
head(dfs_attr[[4]])
names(dfs_attr)[[4]]
grep(names(dfs_attr), "gener")
str_match(names(dfs_attr), "gener")
str_detect(names(dfs_attr), "gener")
names(dfs_attr)
str_detect(names(dfs_attr), "Gener")
str_match_all(names(dfs_attr), "Gener")
str_match(names(dfs_attr), "Gener")
names(dfs_attr)
str_locate_all(names(dfs_attr), "Gener")
str_extract_all(names(dfs_attr), "Gener")
str_extract(names(dfs_attr), "Gener")
regex("Gener", names(dfs_attr))
str_detect(names(dfs_attr, "Gener"))
str_detect(names(dfs_attr) "Gener")
str_detect(names(dfs_attr), "Gener")
which(str_detect(names(dfs_attr), "Gener"))
which(str_detect(names(dfs_attr), "Gener"))[[1]]
head(dfs_attr[[25]])
dfs_attr[[25]]
head(dfs_attr[[25]][1:4, ])
head(dfs_attr[[25]][1:2, ])
head(dfs_attr[[25]][4:5, ])
head(dfs_attr[[25]][, 1:3])
b = head(dfs_attr[[25]][, 1:3])
b
b(iffi_kodex = "h")
b["iffi_kodex" = "B"]
b[["iffi"]]] = "b"
b[["iffi"]] = "b"
b
b
b$iffi = NULL
b
b$iffi_index = "1000o * ID + subid * 100 + 00"
b
b$iffi_index = "10000 * ID + subid * 100 + 00"
b
b[[`10000 * ID + subid * 100 + 00`]] = "d"
b
b
b$ifif
b$iffi_index = NULL
b
head(dfs_attr[[25]][1:4, ])
head(dfs_attr[[25]][, 1:4])
head(dfs_attr[[25]][, 1:6])
b %>% mutate()
b %>% mutate(iffi_index = paste0(10000 * id + subid * 100 + 00))
tenone = st_read("../iffi_raw/exportperEurac2020/Shapefiles/IFFI10_1.shp")
fiveone = st_read("../iffi_raw/exportperEurac2020/Shapefiles/IFFI10_5.shp")
fiveone = st_read("../iffi_raw/exportperEurac2020/Shapefiles/LPM_Akten.shp")
res = make_shapefile(
database_dir = "../euracR/data/database/",
# normally null only setting it here for me
attribute_database_name = "tbl_frane",
# the name without extension
dictionary_database_name = "diz_frane",
shapefile = "../euracR/data/Shapefiles/IFFI10_1.shp",
# normally null only setting it here for me
# the colums we want to retrieve directly
attri = c("anno_min",
"mese_min",
"giorno_min",
"area"),
# tables to join the description
joins = list(
"tbl_frane.Generalita.Cod_tipo" = c(
"diz_frane.diz_tipo_movi.cod_tipo",
"diz_frane.diz_tipo_movi.tipologia"
),
"tbl_frane.clas_ii_liv.movimento" = c(
"diz_frane.diz_movimenti.movimento",
"diz_frane.diz_movimenti.nome_movimento"
),
"tbl_frane.ass_gen_cause.causa" = c(
"diz_frane.diz_cause.causa",
"diz_frane.diz_cause.nome_causa"
)
)
)
## set ggplot theme to theme_light
theme_set(theme_light())
## get the shape for south tyrol
italy = gadm_sf_loadCountries("ITA", level=3)$sf %>% st_transform(st_crs(res))
south_tyrol = italy %>% filter(grepl("Bolzano", NAME_2))
res %>% count(nome_movimento, sort=T) %>%
st_drop_geometry() %>%
mutate(nome_movimento = glue("{nome_movimento} ({n})"),
nome_movimento = fct_reorder(nome_movimento, n)) %>%
mutate(fill.var = ifelse(grepl("trasla|rotaz", nome_movimento), "A", "B")) %>%
ggplot(aes(n, nome_movimento, fill=fill.var)) +
scale_fill_manual(name="", values=c("blue", "grey")) +
geom_col() +
labs(y="Segundo Livello",
title="What points do we have in the database?") +
theme(legend.position = "none")
file.edit("DESCRIPTION")
data(lndsld)
a = data(lndsld)
devtools::document()
file.edit("NAMESPACE")
devtools::document()
devtools::document()
library(iffitoR)
library(sf)
library(iffitoR)
library(sf)
# define some paths
database_dir = "../../euracR/data/database"
shape_path = "../../euracR/data/Shapefiles/IFFI10_1.shp"
# query the data
res_raw = make_shapefile(
database_dir = database_dir,
# normally null only setting it here for me
attribute_database_name = "tbl_frane",
# the name without extension
dictionary_database_name = "diz_frane",
shapefile = shape_path,
# the colums we want to retrieve directly
attri = c("anno_min",
"mese_min",
"giorno_min",
"area"),
# tables to join the description
joins = list(
"tbl_frane.Generalita.Cod_tipo" = c(
"diz_frane.diz_tipo_movi.cod_tipo",
"diz_frane.diz_tipo_movi.tipologia"
),
"tbl_frane.clas_ii_liv.movimento" = c(
"diz_frane.diz_movimenti.movimento",
"diz_frane.diz_movimenti.nome_movimento"
),
"tbl_frane.Geologia.litologia" = c(
"diz_frane.diz_litologie.litologia",
"diz_frane.diz_litologie.nome_litologia"
)
)
)
# define some paths
database_dir = "../euracR/data/database/"
shape_path = "../euracR/data/Shapefiles/IFFI10_1.shp"
# query the data
res_raw = make_shapefile(
database_dir = database_dir,
# normally null only setting it here for me
attribute_database_name = "tbl_frane",
# the name without extension
dictionary_database_name = "diz_frane",
shapefile = shape_path,
# the colums we want to retrieve directly
attri = c("anno_min",
"mese_min",
"giorno_min",
"area"),
# tables to join the description
joins = list(
"tbl_frane.Generalita.Cod_tipo" = c(
"diz_frane.diz_tipo_movi.cod_tipo",
"diz_frane.diz_tipo_movi.tipologia"
),
"tbl_frane.clas_ii_liv.movimento" = c(
"diz_frane.diz_movimenti.movimento",
"diz_frane.diz_movimenti.nome_movimento"
),
"tbl_frane.Geologia.litologia" = c(
"diz_frane.diz_litologie.litologia",
"diz_frane.diz_litologie.nome_litologia"
)
)
)
library(RODBC)
# define some paths
database_dir = "../euracR/data/database/"
shape_path = "../euracR/data/Shapefiles/IFFI10_1.shp"
# query the data
res_raw = make_shapefile(
database_dir = database_dir,
# normally null only setting it here for me
attribute_database_name = "tbl_frane",
# the name without extension
dictionary_database_name = "diz_frane",
shapefile = shape_path,
# the colums we want to retrieve directly
attri = c("anno_min",
"mese_min",
"giorno_min",
"area"),
# tables to join the description
joins = list(
"tbl_frane.Generalita.Cod_tipo" = c(
"diz_frane.diz_tipo_movi.cod_tipo",
"diz_frane.diz_tipo_movi.tipologia"
),
"tbl_frane.clas_ii_liv.movimento" = c(
"diz_frane.diz_movimenti.movimento",
"diz_frane.diz_movimenti.nome_movimento"
),
"tbl_frane.Geologia.litologia" = c(
"diz_frane.diz_litologie.litologia",
"diz_frane.diz_litologie.nome_litologia"
)
)
)
library(iffitoR)
library(sf)
library(RODBC)
# define some paths
database_dir = "../euracR/data/database/"
shape_path = "../euracR/data/Shapefiles/IFFI10_1.shp"
# query the data
res_raw = make_shapefile(
database_dir = database_dir,
# normally null only setting it here for me
attribute_database_name = "tbl_frane",
# the name without extension
dictionary_database_name = "diz_frane",
shapefile = shape_path,
# the colums we want to retrieve directly
attri = c("anno_min",
"mese_min",
"giorno_min",
"area"),
# tables to join the description
joins = list(
"tbl_frane.Generalita.Cod_tipo" = c(
"diz_frane.diz_tipo_movi.cod_tipo",
"diz_frane.diz_tipo_movi.tipologia"
),
"tbl_frane.clas_ii_liv.movimento" = c(
"diz_frane.diz_movimenti.movimento",
"diz_frane.diz_movimenti.nome_movimento"
),
"tbl_frane.Geologia.litologia" = c(
"diz_frane.diz_litologie.litologia",
"diz_frane.diz_litologie.nome_litologia"
)
)
)
library(dplyr)
# define some paths
database_dir = "../euracR/data/database/"
shape_path = "../euracR/data/Shapefiles/IFFI10_1.shp"
# query the data
res_raw = make_shapefile(
database_dir = database_dir,
# normally null only setting it here for me
attribute_database_name = "tbl_frane",
# the name without extension
dictionary_database_name = "diz_frane",
shapefile = shape_path,
# the colums we want to retrieve directly
attri = c("anno_min",
"mese_min",
"giorno_min",
"area"),
# tables to join the description
joins = list(
"tbl_frane.Generalita.Cod_tipo" = c(
"diz_frane.diz_tipo_movi.cod_tipo",
"diz_frane.diz_tipo_movi.tipologia"
),
"tbl_frane.clas_ii_liv.movimento" = c(
"diz_frane.diz_movimenti.movimento",
"diz_frane.diz_movimenti.nome_movimento"
),
"tbl_frane.Geologia.litologia" = c(
"diz_frane.diz_litologie.litologia",
"diz_frane.diz_litologie.nome_litologia"
)
)
)
library(stringr)
# define some paths
database_dir = "../euracR/data/database/"
shape_path = "../euracR/data/Shapefiles/IFFI10_1.shp"
# query the data
res_raw = make_shapefile(
database_dir = database_dir,
# normally null only setting it here for me
attribute_database_name = "tbl_frane",
# the name without extension
dictionary_database_name = "diz_frane",
shapefile = shape_path,
# the colums we want to retrieve directly
attri = c("anno_min",
"mese_min",
"giorno_min",
"area"),
# tables to join the description
joins = list(
"tbl_frane.Generalita.Cod_tipo" = c(
"diz_frane.diz_tipo_movi.cod_tipo",
"diz_frane.diz_tipo_movi.tipologia"
),
"tbl_frane.clas_ii_liv.movimento" = c(
"diz_frane.diz_movimenti.movimento",
"diz_frane.diz_movimenti.nome_movimento"
),
"tbl_frane.Geologia.litologia" = c(
"diz_frane.diz_litologie.litologia",
"diz_frane.diz_litologie.nome_litologia"
)
)
)
usethis::use_data(res_raw)
# query the data
landsld = make_shapefile(
database_dir = database_dir,
# normally null only setting it here for me
attribute_database_name = "tbl_frane",
# the name without extension
dictionary_database_name = "diz_frane",
shapefile = shape_path,
# the colums we want to retrieve directly
attri = c("anno_min",
"mese_min",
"giorno_min",
"area"),
# tables to join the description
joins = list(
"tbl_frane.Generalita.Cod_tipo" = c(
"diz_frane.diz_tipo_movi.cod_tipo",
"diz_frane.diz_tipo_movi.tipologia"
),
"tbl_frane.clas_ii_liv.movimento" = c(
"diz_frane.diz_movimenti.movimento",
"diz_frane.diz_movimenti.nome_movimento"
),
"tbl_frane.Geologia.litologia" = c(
"diz_frane.diz_litologie.litologia",
"diz_frane.diz_litologie.nome_litologia"
)
)
)
usethis::use_data(landsld)
usethis::use_data(landsld, compress = "xz")
usethis::use_data(landsld, compress = "xz", overwrite = T)
library(iffitoR)
landsld
class(landsld)
devtools::load_all()
?landsld
library(iffitoR)
?landsld
?example_data
?landsld
