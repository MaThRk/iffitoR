geom_sf(data=south_tyrol, fill="transparent")
res %>% filter(str_detect(nome_movimento, "trasla")) %>%
ggplot() +
geom_sf(fill=anno_min) +
geom_sf(data=south_tyrol, fill="transparent")
names(res)
res %>% filter(str_detect(nome_movimento, "trasla")) %>% View()
res %>% filter(str_detect(nome_movimento, "trasla")) %>%
ggplot() +
geom_sf(aes(fill=anno_min)) +
geom_sf(data=south_tyrol, fill="transparent")
# classify
twok = seq(2000,20)
twok
# classify
twok = seqfrom=2000, to=2018)
# classify
twok = seq(from=2000, to=2018)
twok
breaks = c(1800, 1900, 1950, 2000, twok)
breaks
breaks = c(1800, 1900, 1950, twok)
breaks
labels = as.character(breaks)
labels
res %>% filter(str_detect(nome_movimento, "trasla")) %>%
mutate(year = cut(anno_min, breaks=breaks, labels=labels)) %>%
ggplot() +
geom_sf(aes(fill=anno_min)) +
geom_sf(data=south_tyrol, fill="transparent")
breaks = c(1800, 1900, 1950, twok)
labels = as.character(breaks)
length(breaks)
length(labels)
res %>% filter(str_detect(nome_movimento, "trasla")) %>%
mutate(year = cut(anno_min, breaks=breaks, labels=labels)) %>%
ggplot() +
geom_sf(aes(fill=anno_min)) +
geom_sf(data=south_tyrol, fill="transparent")
res %>% filter(str_detect(nome_movimento, "trasla")) %>%
mutate(year = cut(anno_min, breaks=breaks, labels=labels))
cut(res$anno_min, breaks=c(1900,2000), labels = c("before"))
labels = as.character(breaks[2:])
# classify
res %>% filter(str_detect(nome_movimento, "trasla")) %>%
mutate(year = cut(anno_min, breaks=breaks, labels=labels)) %>%
ggplot() +
geom_sf(aes(fill=anno_min)) +
geom_sf(data=south_tyrol, fill="transparent")
labels = as.character(subsets[2:length(breaks)])
labels = as.character(breaks[2:length(breaks)])
labels
res %>% filter(str_detect(nome_movimento, "trasla")) %>%
mutate(year = cut(anno_min, breaks=breaks, labels=labels)) %>%
ggplot() +
geom_sf(aes(fill=anno_min)) +
geom_sf(data=south_tyrol, fill="transparent")
res %>% filter(str_detect(nome_movimento, "trasla")) %>%
mutate(year = cut(anno_min, breaks=breaks, labels=labels)) %>%
ggplot() +
geom_sf(aes(col=anno_min)) +
geom_sf(data=south_tyrol, fill="transparent")
res %>% filter(str_detect(nome_movimento, "trasla")) %>%
mutate(year = cut(anno_min, breaks=breaks, labels=labels)) %>%
ggplot() +
geom_sf(aes(col=year)) +
geom_sf(data=south_tyrol, fill="transparent")
breaks = c(1800, 1900, 1950, 2000, 2020)
labels = as.character(breaks[2:length(breaks)])
res %>% filter(str_detect(nome_movimento, "trasla")) %>%
mutate(year = cut(anno_min, breaks=breaks, labels=labels)) %>%
ggplot() +
geom_sf(aes(col=year)) +
geom_sf(data=south_tyrol, fill="transparent")
labels = as.character(breaks)
res %>% filter(str_detect(nome_movimento, "trasla")) %>%
mutate(year = cut(anno_min, breaks=breaks, labels=labels)) %>%
ggplot() +
geom_sf(aes(col=year)) +
geom_sf(data=south_tyrol, fill="transparent")
labels = as.character(breaks[2:length(breaks)])
res %>% filter(str_detect(nome_movimento, "trasla")) %>%
mutate(year = cut(anno_min, breaks=breaks, labels=labels)) %>%
ggplot() +
geom_sf(aes(col=year)) +
geom_sf(data=south_tyrol, fill="transparent")
res %>% filter(str_detect(nome_movimento, "trasla")) %>%
mutate(year = cut(anno_min, breaks=breaks, labels=labels)) %>%
ggplot() +
geom_sf(aes(col=year)) +
geom_sf(data=south_tyrol, fill="transparent") +
theme(
panel.background = element_blank()
)
labels = as.character("1800-1900", "1900-1950", "1950-2000", "2000-2020")
res %>% filter(str_detect(nome_movimento, "trasla")) %>%
mutate(year = cut(anno_min, breaks=breaks, labels=labels)) %>%
ggplot() +
geom_sf(aes(col=year)) +
geom_sf(data=south_tyrol, fill="transparent") +
theme(
panel.background = element_blank()
)
breaks = c(1900, 1950, 2000, 2020)
labels = as.character("1800-1900", "1900-1950", "1950-2000", "2000-2020")
res %>% filter(str_detect(nome_movimento, "trasla")) %>%
mutate(year = cut(anno_min, breaks=breaks, labels=labels)) %>%
ggplot() +
geom_sf(aes(col=year)) +
geom_sf(data=south_tyrol, fill="transparent") +
theme(
panel.background = element_blank()
)
# classify
twok = seq(from=2000, to=2018)
breaks = c(-Inf, 1950, 2000, Inf)
labels = as.character("<1950", "1950-2000", ">2000")
# classify
breaks = c(-Inf, 1950, 2000, Inf)
labels = as.character("<1950", "1950-2000", ">2000")
res %>% filter(str_detect(nome_movimento, "trasla")) %>%
mutate(year = cut(anno_min, breaks=breaks, labels=labels)) %>%
ggplot() +
geom_sf(aes(col=year)) +
geom_sf(data=south_tyrol, fill="transparent") +
theme(
panel.background = element_blank()
)
# classify
breaks = c(-Inf, 1950, 2000, Inf)
labels = as.character("<1950", "1950-2000", ">2000")
# classify
breaks = c(-Inf, 1950, 2000, Inf)
labels = as.character("<1950", "1950-2000", ">2000")
res %>% filter(str_detect(nome_movimento, "trasla")) %>%
mutate(year = cut(anno_min, breaks=breaks, labels=labels)) %>%
ggplot() +
geom_sf(aes(col=year)) +
geom_sf(data=south_tyrol, fill="transparent") +
theme(
panel.background = element_blank()
)
# classify
breaks = c(1950, 2000, Inf)
labels = as.character("<1950", "1950-2000", ">2000")
res %>% filter(str_detect(nome_movimento, "trasla")) %>%
mutate(year = cut(anno_min, breaks=breaks, labels=labels)) %>%
ggplot() +
geom_sf(aes(col=year)) +
geom_sf(data=south_tyrol, fill="transparent") +
theme(
panel.background = element_blank()
)
# classify
breaks = c(-Inf, 1950, 2000, Inf)
breaks
labels = as.character("<1950", "1950-2000", ">2000")
labels
labels = c("<1950", "1950-2000", ">2000")
labels
res %>% filter(str_detect(nome_movimento, "trasla")) %>%
mutate(year = cut(anno_min, breaks=breaks, labels=labels)) %>%
ggplot() +
geom_sf(aes(col=year)) +
geom_sf(data=south_tyrol, fill="transparent") +
theme(
panel.background = element_blank()
)
res %>% filter(str_detect(nome_movimento, "trasla")) %>%
mutate(year = cut(anno_min, breaks=breaks, labels=labels)) %>%
ggplot() +
geom_sf(aes(col=year)) +
scale_color_manual(name="") +
geom_sf(data=south_tyrol, fill="transparent") +
theme(
panel.background = element_blank()
)
res %>% filter(str_detect(nome_movimento, "trasla")) %>%
mutate(year = cut(anno_min, breaks=breaks, labels=labels)) %>%
ggplot() +
geom_sf(aes(col=year)) +
geom_sf(data=south_tyrol, fill="transparent") +
labs(col="") +
theme(
panel.background = element_blank()
)
res %>% filter(str_detect(nome_movimento, "trasla")) %>%
mutate(year = cut(anno_min, breaks=breaks, labels=labels)) %>%
ggplot() +
geom_sf(aes(col=year)) +
geom_sf(data=south_tyrol, fill="transparent") +
labs(col="", title="Where are the rotational movements?") +
theme(
panel.background = element_blank()
)
res %>% filter(str_detect(nome_movimento, "rotaz")) %>%
mutate(year = cut(anno_min, breaks=breaks, labels=labels)) %>%
ggplot() +
geom_sf(aes(col=year)) +
geom_sf(data=south_tyrol, fill="transparent") +
labs(col="", title="Where are the rotational movements?") +
theme(
panel.background = element_blank()
)
remotes::install_github('yihui/xaringan')
shiny::runApp('local_tests/iffi_data_shiny')
install.packages("shinydashboard")
runApp('local_tests/iffi_data_shiny')
runApp('local_tests/iffi_data_shiny')
runApp('local_tests/iffi_data_shiny')
runApp()
runApp('local_tests/iffi_data_shiny')
runApp()
runApp('local_tests/iffi_data_shiny')
runApp('local_tests/iffi_data_shiny')
runApp('local_tests/iffi_data_shiny')
res = make_shapefile(
database_dir = "../euracR/data/database/",
# normally null only setting it here for me
attribute_database_name = "tbl_frane",
# the name without extension
dictionary_database_name = "diz_frane",
shapefile = "../euracR/data/Shapefiles/IFFI10_1.shp",
# normally null only setting it here for me
# the colums we want to retrieve directly
attri = c("anno_min",
"mese_min",
"giorno_min",
"area"),
# tables to join the description
joins = list(
"tbl_frane.Generalita.Cod_tipo" = c(
"diz_frane.diz_tipo_movi.cod_tipo",
"diz_frane.diz_tipo_movi.tipologia"
),
"tbl_frane.clas_ii_liv.movimento" = c(
"diz_frane.diz_movimenti.movimento",
"diz_frane.diz_movimenti.nome_movimento"
),
"tbl_frane.ass_gen_cause.causa" = c(
"diz_frane.diz_cause.causa",
"diz_frane.diz_cause.nome_causa"
)
)
)
# load libraries---------------------------------------------------------------
library(sf)
library(iffitoR)
library(tmap)
library(tidyverse)
library(glue)
library(GADMTools)
library(mapview)
res = make_shapefile(
database_dir = "../euracR/data/database/",
# normally null only setting it here for me
attribute_database_name = "tbl_frane",
# the name without extension
dictionary_database_name = "diz_frane",
shapefile = "../euracR/data/Shapefiles/IFFI10_1.shp",
# normally null only setting it here for me
# the colums we want to retrieve directly
attri = c("anno_min",
"mese_min",
"giorno_min",
"area"),
# tables to join the description
joins = list(
"tbl_frane.Generalita.Cod_tipo" = c(
"diz_frane.diz_tipo_movi.cod_tipo",
"diz_frane.diz_tipo_movi.tipologia"
),
"tbl_frane.clas_ii_liv.movimento" = c(
"diz_frane.diz_movimenti.movimento",
"diz_frane.diz_movimenti.nome_movimento"
),
"tbl_frane.ass_gen_cause.causa" = c(
"diz_frane.diz_cause.causa",
"diz_frane.diz_cause.nome_causa"
)
)
)
a = res %>% filter(anno_min == 2000, str_detect(nome_movimento, "tras"))
dim(a)
edit.file("local_tests/make_mapview.R")
edit("local_tests/make_mapview.R")
file.edit("local_tests/make_mapview.R")
# load libraries---------------------------------------------------------------
library(sf)
library(iffitoR)
library(tmap)
library(tidyverse)
library(glue)
library(GADMTools)
library(mapview)
# query the data ----------------------------------------------------------
res_raw = make_shapefile(
database_dir = "../euracR/data/database/",
# normally null only setting it here for me
attribute_database_name = "tbl_frane",
# the name without extension
dictionary_database_name = "diz_frane",
shapefile = "../euracR/data/Shapefiles/IFFI10_1.shp",
# normally null only setting it here for me
# the colums we want to retrieve directly
attri = c(
"anno_min",
"mese_min",
"giorno_min",
"anno",
"mese",
"giorno",
"area",
"azimut"
),
# tables to join the description
joins = list(
"tbl_frane.Generalita.Cod_tipo" = c(
"diz_frane.diz_tipo_movi.cod_tipo",
"diz_frane.diz_tipo_movi.tipologia"
),
"tbl_frane.clas_ii_liv.movimento" = c(
"diz_frane.diz_movimenti.movimento",
"diz_frane.diz_movimenti.nome_movimento"
),
"tbl_frane.ass_gen_cause.causa" = c(
"diz_frane.diz_cause.causa",
"diz_frane.diz_cause.nome_causa"
),
"tbl_frane.clas_ii_liv.materiale" = c(
"diz_frane.diz_materiali.materiale",
"diz_frane.diz_materiali.nome_materiale"
),
"tbl_frane.clas_ii_liv.acqua" = c(
"diz_frane.diz_acqua.acqua",
"diz_frane.diz_acqua.nome_acqua"
),
"tbl_frane.clas_ii_liv.velocita" = c(
"diz_frane.diz_velocita.velocita",
"diz_frane.diz_velocita.nome_velocita"
),
"tbl_frane.Attivita.stile" = c(
"diz_frane.diz_stile.stile",
"diz_frane.diz_stile.nome_stile"
),
"tbl_frane.Geologia.litologia" = c(
"diz_frane.diz_litologie.litologia",
"diz_frane.diz_litologie.nome_litologia"
),
"tbl_frane.Uso_Suolo.uso_suolo" = c(
"diz_frane.diz_usi_suolo.uso_suolo",
"diz_frane.diz_usi_suolo.nome_uso_suolo"
)
)
)
# get date information ----------------------------------------------------
res_raw = res_raw %>%
mutate(
year_present = if_else(!is.na(anno_min), true = TRUE, false = FALSE),
month_present = if_else(!is.na(mese_min), true = TRUE, false = FALSE),
day_present = if_else(!is.na(giorno_min), true = TRUE, false = FALSE)
)
res_raw = res_raw %>%
mutate(date_info = if_else(
day_present,
true = "day",
false = if_else(
month_present,
true = "month",
false = if_else(year_present, true = "year", false =
"no date")
)))
res_raw = res_raw %>%
mutate(date = paste(anno_min, mese_min, giorno_min, sep = "/")) %>%
mutate(date = as.Date(date),
year.int = anno_min, # year as int
year.posix = as.Date(paste0(anno_min, "-01-01")))
## put them in a mapview
res_raw %>% filter(anno_min >= 2000) %>%
mapview(zcol="anno_min", burst=T)
library(shiny); runApp('local_tests/iffi_data_shiny/app2.R')
?sliderInput
runApp('local_tests/iffi_data_shiny/app2.R')
runApp('local_tests/iffi_data_shiny/app2.R')
runApp('local_tests/iffi_data_shiny/app2.R')
runApp('local_tests/iffi_data_shiny/app2.R')
?checkboxGroupInput
runApp('local_tests/iffi_data_shiny/app2.R')
# the filter options fot the type of movements
types_of_movements = res$nome_movimento %>% distinct()
# the filter options fot the type of movements
types_of_movements = res$nome_movimento %>% unique(.)
types_of_movements
runApp('local_tests/iffi_data_shiny/app2.R')
runApp('local_tests/iffi_data_shiny/app2.R')
runApp('local_tests/iffi_data_shiny/app2.R')
runApp('local_tests/iffi_data_shiny')
runApp('local_tests/iffi_data_shiny')
runApp('local_tests/iffi_data_shiny/app2.R')
runApp('local_tests/iffi_data_shiny/app2.R')
?br
runApp('local_tests/iffi_data_shiny/app2.R')
runApp('local_tests/iffi_data_shiny/app2.R')
runApp('local_tests/iffi_data_shiny/app2.R')
ui <- fluidPage(
title="iffi data",
plotOutput("plot2"),
hr(),
fluidRow(
column(3, h4("Date Explorer"),
selectInput("year", "Year:", seq(from=2000, to=2020))),
column(3, br(), br(),
selectInput("month", "Month:", c("all", seq(from=1, to=12)), selected="all")
),
column(3, br(), br(),
selectInput("day", "Day:", c("all", seq(from=1, to=31)), selected="all")
),
column(3, br(), br(),
selectInput("type", "Which type of movement", types_of_movements, selected="scivolamento traslativo", multiple = TRUE))
),
hr(),
tableOutput("sumtable")
)
ui <- fluidPage(
title="iffi data",
plotOutput("plot2"),
hr(),
fluidRow(
column(3, h4("Date Explorer"),
selectInput("year", "Year:", seq(from=2000, to=2020))),
column(3, br(), br(),
selectInput("month", "Month:", c("all", seq(from=1, to=12)), selected="all")
),
column(3, br(), br(),
selectInput("day", "Day:", c("all", seq(from=1, to=31)), selected="all")
),
column(3, br(), br(),
selectInput("type", "Which type of movement", types_of_movements, selected="scivolamento traslativo", multiple = TRUE))
),
hr(),
tableOutput("sumtable")
)
fluidPage(
title="iffi data",
plotOutput("plot2"),
hr(),
fluidRow(
column(3, h4("Date Explorer"),
selectInput("year", "Year:", seq(from=2000, to=2020))),
column(3, br(), br(),
selectInput("month", "Month:", c("all", seq(from=1, to=12)), selected="all")
),
column(3, br(), br(),
selectInput("day", "Day:", c("all", seq(from=1, to=31)), selected="all")
),
column(3, br(), br(),
selectInput("type", "Which type of movement", types_of_movements, selected="scivolamento traslativo", multiple = TRUE))
),
hr(),
tableOutput("sumtable")
)
runApp('local_tests/iffi_data_shiny/app2.R')
runApp('local_tests/iffi_data_shiny/app2.R')
# read the data
res = st_read("data.gpkg")
# read the data
res = st_read("data.gpkg")
res = read_sf("local_tests/iffi_data_shiny/data.gpkg")
names(res)
runApp('local_tests/iffi_data_shiny/app2.R')
runApp('local_tests/iffi_data_shiny/app2.R')
runApp('local_tests/iffi_data_shiny/app2.R')
runApp('local_tests/iffi_data_shiny/app2.R')
runApp('local_tests/iffi_data_shiny/app2.R')
runApp('local_tests/iffi_data_shiny/app2.R')
install.packages("plotly")
library(plotly)
runApp('local_tests/iffi_data_shiny/app2.R')
res
res %>% st_coordinates()
a = res %>% st_coordinates()
a
class(a)
names(a)
b = a %>% colnames(c("x", "y"))
names(b)
colnames(b)
a = res %>% st_coordinates() %>% as.data.frame()
a
names(a)
plot_mapbox(a)
plot_geo(a)
plot_geo() %>% add_markers(a)
plot_geo(a) %>% add_markers(x=~X, y=~Y)
runApp('local_tests/iffi_data_shiny/app2.R')
runApp('local_tests/iffi_data_shiny/app2.R')
runApp('local_tests/iffi_data_shiny/app2.R')
includeCSS()
runApp('local_tests/iffi_data_shiny/app2.R')
runApp('local_tests/iffi_data_shiny/app2.R')
runApp('local_tests/iffi_data_shiny/app2.R')
runApp('local_tests/iffi_data_shiny/app2.R')
runApp('local_tests/iffi_data_shiny/app2.R')
library(shiny)
library(rsconnect)
deployApp("local_tests/iffi_data_shiny/")
runApp('local_tests/iffi_data_shiny')
runApp('local_tests/iffi_data_shiny')
runApp('local_tests/iffi_data_shiny')
runApp('local_tests/iffi_data_shiny')
runApp('local_tests/iffi_data_shiny')
deployApp("local_tests/iffi_data_shiny/")
