if(os == "Linux"){
path_ncdf = "/mnt/CEPH_PROJECTS/Proslide/PREC_GRIDS_updated/"
poly_landslide_path = "/mnt/CEPH_PROJECTS/Proslide/Landslides/iffi_db_1821_to_2020/shapefile/IFFI10_4/IFFI10_4.shp"
points_landslide_path = "/mnt/CEPH_PROJECTS/Proslide/Landslides/iffi_db_1821_to_2020/shapefile/IFFI10_1/IFFI10_1.shp"
database_dir = "/mnt/CEPH_PROJECTS/Proslide/Landslides/iffi_db_1821_to_2020/IFFI_access300321/IFFI/"
}else if(os == "Windows"){
path_ncdf = "\\\\projectdata.eurac.edu/projects/Proslide/PREC_GRIDS_updated/"
poly_landslide_path = "\\\\projectdata.eurac.edu/projects/Proslide/Landslides/Iffi_db_xxxx_to_2018/exportperEurac2020/Shapefiles/IFFI10_5.shp"
points_landslide_path = "\\\\projectdata.eurac.edu/projects/Proslide/Landslides/Iffi_db_xxxx_to_2018/exportperEurac2020/Shapefiles/IFFI10_1.shp"
database_dir = "\\\\projectdata.eurac.edu/projects/Proslide/Landslides/Iffi_db_xxxx_to_2018/exportperEurac2020/database"
}else{
stop(call. = F, "what the hell are you working on...")
}
# which shape to read
if(points){
path_spatial = points_landslide_path
}else{
path_spatial = poly_landslide_path
}
# query the landslide data and its attributes -----------------------------
res = iffitoR::make_shapefile(database_dir = database_dir,
attribute_database_name = "tbl_frane",
# the name without extension
dictionary_database_name = "diz_frane",
shapefile = path_spatial,
# normally null only setting it here for me
# the colums we want to retrieve directly
attri = c("anno_min",
"mese_min",
"giorno_min",
"area",
"costo_prev_interventi",
"costo_eff_inteventi"),
# tables to join the description
joins = list(
"tbl_frane.Generalita.Cod_tipo" = c(
"diz_frane.diz_tipo_movi.cod_tipo",
"diz_frane.diz_tipo_movi.tipologia"
),
"tbl_frane.clas_ii_liv.materiale" = c(
"diz_frane.diz_materiali.materiale",
"diz_frane.diz_materiali.nome_materiale"
),
"tbl_frane.clas_ii_liv.movimento" = c(
"diz_frane.diz_movimenti.movimento",
"diz_frane.diz_movimenti.nome_movimento"
),
"tbl_frane.ass_gen_cause.causa" = c(
"diz_frane.diz_cause.causa",
"diz_frane.diz_cause.nome_causa"
)
)
)
path_spatial
dim(tes)
dim(res)
head(tes)
head(res)
res iffitoR::get_date_information(res)
res = iffitoR::get_date_information(res)
dim(res)
database_dir
# query the landslide data and its attributes -----------------------------
res = iffitoR::make_shapefile(database_dir = "../euracR/data/database/",
attribute_database_name = "tbl_frane",
# the name without extension
dictionary_database_name = "diz_frane",
shapefile = path_spatial,
# normally null only setting it here for me
# the colums we want to retrieve directly
attri = c("anno_min",
"mese_min",
"giorno_min",
"area",
"costo_prev_interventi",
"costo_eff_inteventi"),
# tables to join the description
joins = list(
"tbl_frane.Generalita.Cod_tipo" = c(
"diz_frane.diz_tipo_movi.cod_tipo",
"diz_frane.diz_tipo_movi.tipologia"
),
"tbl_frane.clas_ii_liv.materiale" = c(
"diz_frane.diz_materiali.materiale",
"diz_frane.diz_materiali.nome_materiale"
),
"tbl_frane.clas_ii_liv.movimento" = c(
"diz_frane.diz_movimenti.movimento",
"diz_frane.diz_movimenti.nome_movimento"
),
"tbl_frane.ass_gen_cause.causa" = c(
"diz_frane.diz_cause.causa",
"diz_frane.diz_cause.nome_causa"
)
)
)
dim(res)
# query the landslide data and its attributes -----------------------------
res = iffitoR::make_shapefile(
database_dir = "../../iffi_raw_daniel/export_06042021/IFFI/IFFI/",
attribute_database_name = "tbl_frane",
# the name without extension
dictionary_database_name = "diz_frane",
shapefile = path_spatial,
# normally null only setting it here for me
# the colums we want to retrieve directly
attri = c(
"anno_min",
"mese_min",
"giorno_min",
"area",
"costo_prev_interventi",
"costo_eff_inteventi"
),
# tables to join the description
joins = list(
"tbl_frane.Generalita.Cod_tipo" = c(
"diz_frane.diz_tipo_movi.cod_tipo",
"diz_frane.diz_tipo_movi.tipologia"
),
"tbl_frane.clas_ii_liv.materiale" = c(
"diz_frane.diz_materiali.materiale",
"diz_frane.diz_materiali.nome_materiale"
),
"tbl_frane.clas_ii_liv.movimento" = c(
"diz_frane.diz_movimenti.movimento",
"diz_frane.diz_movimenti.nome_movimento"
),
"tbl_frane.ass_gen_cause.causa" = c(
"diz_frane.diz_cause.causa",
"diz_frane.diz_cause.nome_causa"
)
)
)
dim(res)
dim(landsld)
# load libraries---------------------------------------------------------------
library(sf)
library(iffitoR)
library(tmap)
library(tidyverse)
library(glue)
library(GADMTools)
library(mapview)
library(RODBC)
# we want the point data
points = T
# which os to automatically set the paths
os = Sys.info()["sysname"]
if(os == "Linux"){
path_ncdf = "/mnt/CEPH_PROJECTS/Proslide/PREC_GRIDS_updated/"
poly_landslide_path = "/mnt/CEPH_PROJECTS/Proslide/Landslides/iffi_db_1821_to_2020/shapefile/IFFI10_4/IFFI10_4.shp"
points_landslide_path = "/mnt/CEPH_PROJECTS/Proslide/Landslides/iffi_db_1821_to_2020/shapefile/IFFI10_1/IFFI10_1.shp"
database_dir = "/mnt/CEPH_PROJECTS/Proslide/Landslides/iffi_db_1821_to_2020/IFFI_access300321/IFFI/"
}else if(os == "Windows"){
path_ncdf = "\\\\projectdata.eurac.edu/projects/Proslide/PREC_GRIDS_updated/"
poly_landslide_path = "\\\\projectdata.eurac.edu/projects/Proslide/Landslides/iffi_db_1821_to_2020/shapefile/IFFI10_4/IFFI10_4.shp"
points_landslide_path = "\\\\projectdata.eurac.edu/projects/Proslide/Landslides/Iffi_db_xxxx_to_2018/exportperEurac2020/Shapefiles/IFFI10_1.shp"
points_landslide_path_2020 = "\\\\projectdata.eurac.edu/projects/Proslide/Landslides/iffi_db_1821_to_2020/shapefile/IFFI10_1/IFFI10_1.shp"
database_dir = "\\\\projectdata.eurac.edu/projects/Proslide/Landslides/Iffi_db_xxxx_to_2018/exportperEurac2020/database"
database_dir_2020 = "\\\\projectdata.eurac.edu/projects/Proslide/Landslides/iffi_db_1821_to_2020/IFFI_access300321/IFFI/"
}else{
stop(call. = F, "what the hell are you working on...")
}
# which shape to read
if(points){
path_spatial = points_landslide_path_2020
}else{
path_spatial = poly_landslide_path
}
# query the landslide data and its attributes -----------------------------
res = iffitoR::make_shapefile(
database_dir = "../../iffi_raw_daniel/export_06042021/IFFI/IFFI/",
attribute_database_name = "tbl_frane",
# the name without extension
dictionary_database_name = "diz_frane",
shapefile = path_spatial,
# normally null only setting it here for me
# the colums we want to retrieve directly
attri = c("anno_min",
"mese_min",
"giorno_min",
"area"),
joins = list(
"tbl_frane.Geologia.litologia"                 = c(
"diz_frane.diz_litologie.litologia",
"diz_frane.diz_litologie.nome_litologia"
),
"tbl_frane.clas_ii_liv.movimento"              = c(
"diz_frane.diz_movimenti.movimento",
"diz_frane.diz_movimenti.nome_movimento"
),
"tbl_frane.Uso_Suolo.uso_suolo"                = c(
"diz_frane.diz_usi_suolo.uso_suolo",
"diz_frane.diz_usi_suolo.nome_uso_suolo"
),
"tbl_frane.ass_gen_cause.causa"                = c(
"diz_frane.diz_cause.causa",
"diz_frane.diz_cause.nome_causa"
),
"tbl_frane.Attivita.stile"                     = c(
"diz_frane.diz_stile.stile",
"diz_frane.diz_stile.nome_stile"
),
"tbl_frane.clas_ii_liv.materiale"              = c(
"diz_frane.diz_materiali.materiale",
"diz_frane.diz_materiali.nome_materiale"
),
"tbl_frane.Generalita.Cod_tipo"                = c(
"diz_frane.diz_tipo_movi.cod_tipo",
"diz_frane.diz_tipo_movi.tipologia"
),
"tbl_frane.clas_ii_liv.acqua"                  = c(
"diz_frane.diz_acqua.acqua",
"diz_frane.diz_acqua.nome_acqua"
),
"tbl_frane.clas_ii_liv.velocita"               = c(
"diz_frane.diz_velocita.velocita",
"diz_frane.diz_velocita.nome_velocita"
),
"tbl_frane.ass_gen_cause.causa"                = c(
"diz_frane.diz_cause.causa",
"diz_frane.diz_gruppi_cause.gruppo_cause"
),
"tbl_frane.Attivita.stato"                     = c(
"diz_frane.diz_stati.stato",
"diz_frane.diz_stati.nome_stato"
),
"tbl_frane.Generalita.Cod_tipo"                = c(
"diz_frane.diz_pendii.tipo_pendio",
"diz_frane.diz_pendii.nome_pendio"
),
"tbl_frane.ass_gen_metodo.codmetodo"           = c(
"diz_frane.diz_metodo.codmetodo",
"diz_frane.diz_metodo.descrizione"
),
"tbl_frane.Geologia.litotecnica"               = c(
"diz_frane.diz_litotecniche.litotecnica",
"diz_frane.diz_litotecniche.nome_litotecnica"
),
"tbl_frane.ass_gen_elementi_rischio.element"   = c(
"diz_frane.diz_elementi_rischio.element",
"diz_frane.diz_elementi_rischio.nome_elemento"
)
)
)
dim(res)
# query the landslide data and its attributes -----------------------------
res = iffitoR::make_shapefile(
database_dir = "../../iffi_raw_daniel/export_06042021/IFFI/IFFI/",
attribute_database_name = "tbl_frane",
# the name without extension
dictionary_database_name = "diz_frane",
shapefile = path_spatial,
# normally null only setting it here for me
# the colums we want to retrieve directly
attri = c("anno_min",
"mese_min",
"giorno_min",
"area",
"costo_eff_inteventi",
"costo_prev_interventi"),
joins = list(
"tbl_frane.Geologia.litologia"                 = c(
"diz_frane.diz_litologie.litologia",
"diz_frane.diz_litologie.nome_litologia"
),
"tbl_frane.clas_ii_liv.movimento"              = c(
"diz_frane.diz_movimenti.movimento",
"diz_frane.diz_movimenti.nome_movimento"
),
"tbl_frane.Uso_Suolo.uso_suolo"                = c(
"diz_frane.diz_usi_suolo.uso_suolo",
"diz_frane.diz_usi_suolo.nome_uso_suolo"
),
"tbl_frane.ass_gen_cause.causa"                = c(
"diz_frane.diz_cause.causa",
"diz_frane.diz_cause.nome_causa"
),
"tbl_frane.Attivita.stile"                     = c(
"diz_frane.diz_stile.stile",
"diz_frane.diz_stile.nome_stile"
),
"tbl_frane.clas_ii_liv.materiale"              = c(
"diz_frane.diz_materiali.materiale",
"diz_frane.diz_materiali.nome_materiale"
),
"tbl_frane.Generalita.Cod_tipo"                = c(
"diz_frane.diz_tipo_movi.cod_tipo",
"diz_frane.diz_tipo_movi.tipologia"
),
"tbl_frane.clas_ii_liv.acqua"                  = c(
"diz_frane.diz_acqua.acqua",
"diz_frane.diz_acqua.nome_acqua"
),
"tbl_frane.clas_ii_liv.velocita"               = c(
"diz_frane.diz_velocita.velocita",
"diz_frane.diz_velocita.nome_velocita"
),
"tbl_frane.ass_gen_cause.causa"                = c(
"diz_frane.diz_cause.causa",
"diz_frane.diz_gruppi_cause.gruppo_cause"
),
"tbl_frane.Attivita.stato"                     = c(
"diz_frane.diz_stati.stato",
"diz_frane.diz_stati.nome_stato"
),
"tbl_frane.Generalita.Cod_tipo"                = c(
"diz_frane.diz_pendii.tipo_pendio",
"diz_frane.diz_pendii.nome_pendio"
),
"tbl_frane.ass_gen_metodo.codmetodo"           = c(
"diz_frane.diz_metodo.codmetodo",
"diz_frane.diz_metodo.descrizione"
),
"tbl_frane.Geologia.litotecnica"               = c(
"diz_frane.diz_litotecniche.litotecnica",
"diz_frane.diz_litotecniche.nome_litotecnica"
),
"tbl_frane.ass_gen_elementi_rischio.element"   = c(
"diz_frane.diz_elementi_rischio.element",
"diz_frane.diz_elementi_rischio.nome_elemento"
)
)
)
dim(res)
landsld = iffitoR::get_date_information(res)
dim(res)
write.csv(landsld../../geodata/landsld.csv")
write.csv(landsld, "../../geodata/landsld.csv")
# load libraries---------------------------------------------------------------
library(sf)
library(iffitoR)
library(tmap)
library(tidyverse)
library(glue)
library(GADMTools)
library(mapview)
library(RODBC)
# we want the point data
points = T
# which os to automatically set the paths
os = Sys.info()["sysname"]
if(os == "Linux"){
path_ncdf = "/mnt/CEPH_PROJECTS/Proslide/PREC_GRIDS_updated/"
poly_landslide_path = "/mnt/CEPH_PROJECTS/Proslide/Landslides/iffi_db_1821_to_2020/shapefile/IFFI10_4/IFFI10_4.shp"
points_landslide_path = "/mnt/CEPH_PROJECTS/Proslide/Landslides/iffi_db_1821_to_2020/shapefile/IFFI10_1/IFFI10_1.shp"
database_dir = "/mnt/CEPH_PROJECTS/Proslide/Landslides/iffi_db_1821_to_2020/IFFI_access300321/IFFI/"
}else if(os == "Windows"){
path_ncdf = "\\\\projectdata.eurac.edu/projects/Proslide/PREC_GRIDS_updated/"
poly_landslide_path = "\\\\projectdata.eurac.edu/projects/Proslide/Landslides/iffi_db_1821_to_2020/shapefile/IFFI10_4/IFFI10_4.shp"
points_landslide_path = "\\\\projectdata.eurac.edu/projects/Proslide/Landslides/Iffi_db_xxxx_to_2018/exportperEurac2020/Shapefiles/IFFI10_1.shp"
points_landslide_path_2020 = "\\\\projectdata.eurac.edu/projects/Proslide/Landslides/iffi_db_1821_to_2020/shapefile/IFFI10_1/IFFI10_1.shp"
database_dir = "\\\\projectdata.eurac.edu/projects/Proslide/Landslides/Iffi_db_xxxx_to_2018/exportperEurac2020/database"
database_dir_2020 = "\\\\projectdata.eurac.edu/projects/Proslide/Landslides/iffi_db_1821_to_2020/IFFI_access300321/IFFI/"
}else{
stop(call. = F, "what the hell are you working on...")
}
devtools::load_all()
library(dplyr)
remove.packages("ellipsis")
library(dplyr)
library(dplyr)
install.packages("ellipsis")
library(dplyr)
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
library(iffitoR)
# load libraries---------------------------------------------------------------
library(sf)
library(tmap)
library(iffitoR)
library(glue)
library(GADMTools)
library(mapview)
library(RODBC)
# we want the point data
points = T
# which os to automatically set the paths
os = Sys.info()["sysname"]
if(os == "Linux"){
path_ncdf = "/mnt/CEPH_PROJECTS/Proslide/PREC_GRIDS_updated/"
poly_landslide_path = "/mnt/CEPH_PROJECTS/Proslide/Landslides/iffi_db_1821_to_2020/shapefile/IFFI10_4/IFFI10_4.shp"
points_landslide_path = "/mnt/CEPH_PROJECTS/Proslide/Landslides/iffi_db_1821_to_2020/shapefile/IFFI10_1/IFFI10_1.shp"
database_dir = "/mnt/CEPH_PROJECTS/Proslide/Landslides/iffi_db_1821_to_2020/IFFI_access300321/IFFI/"
}else if(os == "Windows"){
path_ncdf = "\\\\projectdata.eurac.edu/projects/Proslide/PREC_GRIDS_updated/"
poly_landslide_path = "\\\\projectdata.eurac.edu/projects/Proslide/Landslides/iffi_db_1821_to_2020/shapefile/IFFI10_4/IFFI10_4.shp"
points_landslide_path = "\\\\projectdata.eurac.edu/projects/Proslide/Landslides/Iffi_db_xxxx_to_2018/exportperEurac2020/Shapefiles/IFFI10_1.shp"
points_landslide_path_2020 = "\\\\projectdata.eurac.edu/projects/Proslide/Landslides/iffi_db_1821_to_2020/shapefile/IFFI10_1/IFFI10_1.shp"
database_dir = "\\\\projectdata.eurac.edu/projects/Proslide/Landslides/Iffi_db_xxxx_to_2018/exportperEurac2020/database"
database_dir_2020 = "\\\\projectdata.eurac.edu/projects/Proslide/Landslides/iffi_db_1821_to_2020/IFFI_access300321/IFFI/"
}else{
stop(call. = F, "what the hell are you working on...")
}
# which shape to read
if(points){
path_spatial = points_landslide_path_2020
}else{
path_spatial = poly_landslide_path
}
# query the landslide data and its attributes -----------------------------
res = iffitoR::make_shapefile(
database_dir = "../../iffi_raw_daniel/export_06042021/IFFI/IFFI/",
attribute_database_name = "tbl_frane",
# the name without extension
dictionary_database_name = "diz_frane",
shapefile = path_spatial,
# normally null only setting it here for me
# the colums we want to retrieve directly
attri = c("anno_min",
"mese_min",
"giorno_min",
"area"),
joins = list(
"tbl_frane.Geologia.litologia"                 = c(
"diz_frane.diz_litologie.litologia",
"diz_frane.diz_litologie.nome_litologia"
),
"tbl_frane.clas_ii_liv.movimento"              = c(
"diz_frane.diz_movimenti.movimento",
"diz_frane.diz_movimenti.nome_movimento"
),
"tbl_frane.Uso_Suolo.uso_suolo"                = c(
"diz_frane.diz_usi_suolo.uso_suolo",
"diz_frane.diz_usi_suolo.nome_uso_suolo"
),
"tbl_frane.ass_gen_cause.causa"                = c(
"diz_frane.diz_cause.causa",
"diz_frane.diz_cause.nome_causa"
),
"tbl_frane.Attivita.stile"                     = c(
"diz_frane.diz_stile.stile",
"diz_frane.diz_stile.nome_stile"
),
"tbl_frane.clas_ii_liv.materiale"              = c(
"diz_frane.diz_materiali.materiale",
"diz_frane.diz_materiali.nome_materiale"
),
"tbl_frane.Generalita.Cod_tipo"                = c(
"diz_frane.diz_tipo_movi.cod_tipo",
"diz_frane.diz_tipo_movi.tipologia"
),
"tbl_frane.clas_ii_liv.acqua"                  = c(
"diz_frane.diz_acqua.acqua",
"diz_frane.diz_acqua.nome_acqua"
),
"tbl_frane.clas_ii_liv.velocita"               = c(
"diz_frane.diz_velocita.velocita",
"diz_frane.diz_velocita.nome_velocita"
),
"tbl_frane.ass_gen_cause.causa"                = c(
"diz_frane.diz_cause.causa",
"diz_frane.diz_gruppi_cause.gruppo_cause"
),
"tbl_frane.Attivita.stato"                     = c(
"diz_frane.diz_stati.stato",
"diz_frane.diz_stati.nome_stato"
),
"tbl_frane.Generalita.Cod_tipo"                = c(
"diz_frane.diz_pendii.tipo_pendio",
"diz_frane.diz_pendii.nome_pendio"
),
"tbl_frane.ass_gen_metodo.codmetodo"           = c(
"diz_frane.diz_metodo.codmetodo",
"diz_frane.diz_metodo.descrizione"
),
"tbl_frane.Geologia.litotecnica"               = c(
"diz_frane.diz_litotecniche.litotecnica",
"diz_frane.diz_litotecniche.nome_litotecnica"
),
"tbl_frane.ass_gen_elementi_rischio.element"   = c(
"diz_frane.diz_elementi_rischio.element",
"diz_frane.diz_elementi_rischio.nome_elemento"
)
)
)
dim(res)
# translate to english
res_eng = iffitoR::translate_iffi(res)
# add time information
landsld = iffitoR::get_date_information(res_eng)
landsld = landsld %>% st_transform(., 32632)
# save it
usethis::use_data(landsld, overwrite = T)
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
testthat::testthat_print()
devtools::build_vignettes()
devtools::build_vignettes()
pkgdown::build_site()
?pkgdown::build_site
pkgdown::build_site()
devtools::document()
devtools::document()
devtools::document()
devtools::document(pkg = ".")
usethis::create_package()
usethis::create_package(":")
usethis::create_package(".")
usethis::use_package(".")
install.packages(".")
usethis::use_description()
usethis::use_package()
usethis::use_package(".")
usethis::use_package("iffitoR")
devtools::load_all()
devtools::install()
remove.packages("iffitoR")
remotes::install_github("mathrk/iffitoR")
