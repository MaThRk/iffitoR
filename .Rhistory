index_attr
if (!is.null(dictionary_database_name)) {
index_dict = which(grepl(dictionary_database_name, names(conns)))
}
index_dict
attr_database_conn = conns[[index_attr]]
if (!is.null(dictionary_database_name)) {
dict_database_conn = conns[[index_dict]]
}
dict_database_conn
# the table names are the attributes we can query
# Especially the one in the attributes table are interesting
table_names_attr = make_vector_table_names(attr_database_conn)
if (!is.null(dictionary_database_name)) {
table_names_dict = make_vector_table_names(dict_database_conn)
}
# make a list of dataframes(tables) for the attributes database
dfs_attr = make_list_dataframes(attr_database_conn)
dfs_attr
rm(list=ls())
remotes::install_github("RobinKohrs/iffitoR")
remove.packages("iffitoR")
devtools::load_all()
?devtools::check_built
devtools::check()
devtools::check(vignettes = F)
?landsld
landsld
devtools::check(vignettes = F)
library(iffitoR)
remove.packages("iffitoR")
library(iffitoR)
rm(list=ls())
ls
remotes::install_github("RobinKohrs/iffitoR")
pkgdown::build_site()
library(iffitoR)
devtools::load_all()
install.packages("installR")
install.packages("installr")
installr::updateR()
library(iffitoR)
library(sf)
remove.packages("iffitoR")
devtools::install()
library(iffitoR)
remotes::install_github("RobinKohrs/iffitoR")
cat("\nAdded the columns:\n\n date_info (chr) - (eiher 'year', 'month', 'day' or 'no date')\n year.int (integer)
month.int (integer)
day.int (integer)
year.posix (date) (object of class date, referenced to the 1st of January of the year)\n\n")
as.Date("2021-12-02")
a = as.Date("2021-12-02")
d = format(a, "%y")
d
library(lubridate)
yday(a)
a
b = yday(a)
class(b)
devtools::document()
devtools::load_all()
browseVignettes("iffitoR")
devtools::load_all()
# load libraries---------------------------------------------------------------
library(sf)
library(iffitoR)
library(tmap)
library(tidyverse)
library(glue)
library(GADMTools)
library(mapview)
# we want the point data
points = T
# we want the point data
points = T
# which os to automatically set the paths
os = Sys.info()["sysname"]
if(os == "Linux"){
path_ncdf = "/mnt/CEPH_PROJECTS/Proslide/PREC_GRIDS_updated/"
poly_landslide_path = "/mnt/CEPH_PROJECTS/Proslide/Landslides/Iffi_db_xxxx_to_2018/exportperEurac2020/Shapefiles/IFFI10_5.shp"
points_landslide_path = "/mnt/CEPH_PROJECTS/Proslide/Landslides/Iffi_db_xxxx_to_2018/exportperEurac2020/Shapefiles/IFFI10_1.shp"
database_dir = "/mnt/CEPH_PROJECTS/Proslide/Landslides/Iffi_db_xxxx_to_2018/exportperEurac2020/database"
}else if(os == "Windows"){
path_ncdf = "\\\\projectdata.eurac.edu/projects/Proslide/PREC_GRIDS_updated/"
poly_landslide_path = "\\\\projectdata.eurac.edu/projects/Proslide/Landslides/Iffi_db_xxxx_to_2018/exportperEurac2020/Shapefiles/IFFI10_5.shp"
points_landslide_path = "\\\\projectdata.eurac.edu/projects/Proslide/Landslides/Iffi_db_xxxx_to_2018/exportperEurac2020/Shapefiles/IFFI10_1.shp"
database_dir = "\\\\projectdata.eurac.edu/projects/Proslide/Landslides/Iffi_db_xxxx_to_2018/exportperEurac2020/database"
}else{
stop(call. = F, "what the hell are you working on...")
}
# which shape to read
if(points){
path_spatial = points_landslide_path
}else{
path_spatial = poly_landslide_path
}
res = iffitoR::make_shapefile(database_dir = database_dir,
attribute_database_name = "tbl_frane",
# the name without extension
dictionary_database_name = "diz_frane",
shapefile = path_spatial,
# normally null only setting it here for me
# the colums we want to retrieve directly
attri = c("anno_min",
"mese_min",
"giorno_min",
"area"),
# tables to join the description
joins = list(
"tbl_frane.Generalita.Cod_tipo" = c(
"diz_frane.diz_tipo_movi.cod_tipo",
"diz_frane.diz_tipo_movi.tipologia"
),
"tbl_frane.clas_ii_liv.movimento" = c(
"diz_frane.diz_movimenti.movimento",
"diz_frane.diz_movimenti.nome_movimento"
),
"tbl_frane.ass_gen_cause.causa" = c(
"diz_frane.diz_cause.causa",
"diz_frane.diz_cause.nome_causa"
)
)
)
res = iffitoR::make_shapefile(database_dir = database_dir,
attribute_database_name = "tbl_frane",
# the name without extension
dictionary_database_name = "diz_frane",
shapefile = path_spatial,
# normally null only setting it here for me
# the colums we want to retrieve directly
attri = c("anno_min",
"mese_min",
"giorno_min",
"area"),
# tables to join the description
joins = list(
"tbl_frane.Generalita.Cod_tipo" = c(
"diz_frane.diz_tipo_movi.cod_tipo",
"diz_frane.diz_tipo_movi.tipologia"
),
"tbl_frane.clas_ii_liv.movimento" = c(
"diz_frane.diz_movimenti.movimento",
"diz_frane.diz_movimenti.nome_movimento"
),
"tbl_frane.ass_gen_cause.causa" = c(
"diz_frane.diz_cause.causa",
"diz_frane.diz_cause.nome_causa"
)
)
)
library(RODBC)
library(RODBC)
res = iffitoR::make_shapefile(database_dir = database_dir,
attribute_database_name = "tbl_frane",
# the name without extension
dictionary_database_name = "diz_frane",
shapefile = path_spatial,
# normally null only setting it here for me
# the colums we want to retrieve directly
attri = c("anno_min",
"mese_min",
"giorno_min",
"area"),
# tables to join the description
joins = list(
"tbl_frane.Generalita.Cod_tipo" = c(
"diz_frane.diz_tipo_movi.cod_tipo",
"diz_frane.diz_tipo_movi.tipologia"
),
"tbl_frane.clas_ii_liv.movimento" = c(
"diz_frane.diz_movimenti.movimento",
"diz_frane.diz_movimenti.nome_movimento"
),
"tbl_frane.ass_gen_cause.causa" = c(
"diz_frane.diz_cause.causa",
"diz_frane.diz_cause.nome_causa"
)
)
)
# translate to english
res_eng = iffitoR::translate_iffi(res)
# add time information
landsld = iffitoR::get_date_information(res_eng)
devtools::load_all()
# translate to english
res_eng = iffitoR::translate_iffi(res)
# add time information
landsld = iffitoR::get_date_information(res_eng)
week = paste0(2012, lubridate::week(as.Date("2012-01-01")))
week
class(week)
week = as.interger(paste0(2012, lubridate::week(as.Date("2012-01-01"))))
week = as.integer(paste0(2012, lubridate::week(as.Date("2012-01-01"))))
week
devtools::load_all()
# add time information
landsld = iffitoR::get_date_information(res_eng)
landsld
head(landsld$week)
dim(landsld)
# add time information
landsld = iffitoR::get_date_information(res_eng)
# save it
usethis::use_data(landsld, overwrite = T)
ls
library(shiny)
shiny::runApp(appDir = "local_tests/iffi_data_shiny/")
library(rsconnect)
rsconnect::deployApp(appDir = "local_tests/iffi_data_shiny/")
file.edit("local_tests/iffi_data_shiny/app.R")
shiny::runApp(appdir="local_tests/iffi_data_shiny/")
shiny::runApp(appDir="local_tests/iffi_data_shiny/")
rsconnect::deployApp(appDir = "local_tests/iffi_data_shiny/")
path_IFFI10 = "\\\\projectdata.eurac.edu/projects/Proslide/Landslides/Iffi_db_xxxx_to_2018/exportperEurac2020/Shapefiles/IFFI10_1.shp"
path_LPM_shape = lpm_excel_path = "\\\\projectdata.eurac.edu/projects/Proslide/Landslides/Iffi_db_xxxx_to_2018/exportperEurac2020/Shapefiles/LMP_Akten.shp"
path_stato_delle = lpm_excel_path = "\\\\projectdata.eurac.edu/projects/Proslide/Landslides/Iffi_db_xxxx_to_2018/exportperEurac2020/database/Stato delle conoscenze.xls"){
path_stato_delle = lpm_excel_path = "\\\\projectdata.eurac.edu/projects/Proslide/Landslides/Iffi_db_xxxx_to_2018/exportperEurac2020/database/Stato delle conoscenze.xls"
dir.exists(path_IFFI10)
file.exists(path_IFFI10)
path_stato = lpm_excel_path = "\\\\projectdata.eurac.edu/projects/Proslide/Landslides/Iffi_db_xxxx_to_2018/exportperEurac2020/database/Stato delle conoscenze.xls"
path_stato = "\\\\projectdata.eurac.edu/projects/Proslide/Landslides/Iffi_db_xxxx_to_2018/exportperEurac2020/database/Stato delle conoscenze.xls"
library(sf)
# read in the data
iffi10 = read_sf(path_IFFI10)
lpm_shape = read_sf(path_LPM_shape)
library(readxl)
lpm_shape = read_sf(path_LPM_shape)
# verify that there actually are some paths
stopifnot("The path to the IFFI10-shapefile does not result in a file...", file.exists(path_IFFI10))
path_IFFI10 = "\\\\projectdata.eurac.edu/projects/Proslide/Landslides/Iffi_db_xxxx_to_2018/exportperEurac2020/Shapefiles/IFFI10_1.shp"
path_LPM_shape = lpm_excel_path = "\\\\projectdata.eurac.edu/projects/Proslide/Landslides/Iffi_db_xxxx_to_2018/exportperEurac2020/Shapefiles/LMP_Akten.shp"
path_stato = "\\\\projectdata.eurac.edu/projects/Proslide/Landslides/Iffi_db_xxxx_to_2018/exportperEurac2020/database/Stato delle conoscenze.xls"
# verify that there actually are some paths
stopifnot("The path to the IFFI10-shapefile does not result in a file...", file.exists(path_IFFI10))
file.exists(path_IFFI10)
file.exists(path_LPM_shape)
file.exists(path_stato)
path_LPM_shape = lpm_excel_path = "\\\\projectdata.eurac.edu/projects/Proslide/Landslides/Iffi_db_xxxx_to_2018/exportperEurac2020/Shapefiles/LPM_Akten.shp"
# verify that there actually are some paths
stopifnot("The path to the IFFI10-shapefile does not result in a file...", file.exists(path_IFFI10))
# verify that there actually are some paths
stopifnot("The path to the IFFI10-shapefile does not result in a file..." = file.exists(path_IFFI10))
# verify that there actually are some paths
stopifnot("The path to the IFFI10-shapefile does not result in a file..." = file.exists(path_IFFI10))
stopifnot("The path to the LPM-shapefile does not result in a file..." = file.exists(path_LPM_shape))
stopifnot("The path to the Stato delle conoscenze does not result in a file..." = file.exists(path_stato))
# read in the data
iffi10 = read_sf(path_IFFI10)
lpm_shape = read_sf(path_LPM_shape)
stato = read_excel(path_stato)
# check if they use the same crs
crs_iffi = st_crs(iffi10)
crs_iffi
crs_lpm = st_crs(lpm_shape)
crs_lpm == crs_iffi
lpm_shape = st_transform(lpm_shape, crs_iffi)
# merge the iffi with stato based on the iffi kodex -----------------------
df_iffi = merge(iffi10, stato, by.x="PIFF_ID", by.y="iffi")
# read in the data
iffi10 = read_sf(path_IFFI10)
names(iffi10)
names(stato)
# calculate the iffi kodex in the stato excel -----------------------------
stato = stato %>%
mutate(iffi = 10000*GEN_ID + 100*GEN_SUBID + 00)
library(dplyr)
# calculate the iffi kodex in the stato excel -----------------------------
stato = stato %>%
mutate(iffi = 10000*GEN_ID + 100*GEN_SUBID + 00)
# merge the iffi with stato based on the iffi kodex -----------------------
df_iffi = merge(iffi10, stato, by.x="PIFF_ID", by.y="iffi")
dim(df_iffi)
dim(iffi10)
?merge
# merge the iffi with stato based on the iffi kodex -----------------------
df_iffi = merge(iffi10, stato, by.x="PIFF_ID", by.y="iffi", all.x)
dim(df_iffi)
# merge the iffi with stato based on the iffi kodex -----------------------
df_iffi = merge(iffi10, stato, by.x="PIFF_ID", by.y="iffi", all.x, all.y=F)
dim(df_iffi)
length(unique(iffi10$PIFF_ID))
length(unique(stato$iffi))
names(df_iffi)
# merge the iffi with stato based on the iffi kodex -----------------------
df_iffi = merge(iffi11, stato, by.x="PIFF_ID", by.y="iffi", all.x, all.y=F) %>%
dplyr::distinct(PIFF_ID)
# merge the iffi with stato based on the iffi kodex -----------------------
df_iffi = merge(iffi, stato, by.x="PIFF_ID", by.y="iffi", all.x, all.y=F) %>%
dplyr::distinct(PIFF_ID)
# merge the iffi with stato based on the iffi kodex -----------------------
df_iffi = merge(iffi10, stato, by.x="PIFF_ID", by.y="iffi", all.x, all.y=F) %>%
dplyr::distinct(PIFF_ID)
dim(df_iffi)
count(stato, iffi, sort=T)
# merge the iffi with stato based on the iffi kodex -----------------------
df_iffi = merge(iffi10, stato, by.x="PIFF_ID", by.y="iffi", all.x, all.y=F) %>%
dplyr::distinct(PIFF_ID)
names(df_iffi)
# merge the iffi with stato based on the iffi kodex -----------------------
df_iffi = merge(iffi10, stato, by.x="PIFF_ID", by.y="iffi", all.x, all.y=F) %>%
dplyr::distinct(PIFF_ID, .keep_all=TRUE)
names(df_iffi)
names(iffi10)
names(stato)
# get the ACCGE_IDEN from the excel table ---------------------------------
stato = stato %>%
tidyr::extract(col = c("NOTE"), into=c("ACCGE_IDEN"), "(\\d{5})")
head(stato)
stato = read_excel(path_stato)
# get the ACCGE_IDEN from the excel table ---------------------------------
stato = stato %>%
tidyr::extract(col = c("NOTE"), into=c("ACCGE_IDEN"), "(\\d{5})", remove=FALSE)
head(stato)
# remove the spatial information from the lpm_shapefile
lpm_shape = lpm_shape %>% st_drop_geometry()
dim(lpm_shape)
names(lpm_shape)
keep_lm = c(ACCGE_IDEN, GEOKAT_ID, OGGETTO
keep_lm = c(ACCGE_IDEN, GEOKAT_ID, OGGETTO)
keep_lm = c("ACCGE_IDEN", "GEOKAT_ID", "OGGETTO")
keep_lm
# remove the spatial information from the lpm_shapefile
lpm_shape = lpm_shape %>% st_drop_geometry() %>% dplyr::select(keep_lm)
lpm_shape
class(lpm_shape)
lpm_shape = read_sf(path_LPM_shape)
class(lpm_shape)
# remove the spatial information from the lpm_shapefile
lpm_shape = lpm_shape %>% st_drop_geometry() %>% dplyr::select(keep_lm)
keep_lpm = c(ACCGE_IDEN, "GEOKAT_ID", "OGGETTO")
keep_lpm = c("ACCGE_IDEN", "GEOKAT_ID", "OGGETTO")
# remove the spatial information from the lpm_shapefile
lpm_shape = lpm_shape %>% st_drop_geometry() %>% .[, keep_lpm]
lpm_shape = read_sf(path_LPM_shape)
lpm_shape
# remove the spatial information from the lpm_shapefile
lpm_no_shape = lpm_shape %>% st_drop_geometry() %>% .[, keep_lpm]
names(lpm_no_shape)
head(lpm_no_shape)
# join the lpm_no_shape_information to the iffi ---------------------------
all_joined = merge(df_iffi, lpm_no_shape, by="ACCGE_IDEN")
names(df_iffi)
# get the ACCGE_IDEN from the excel table ---------------------------------
df_iffi = df_iffi %>%
tidyr::extract(col = c("NOTE"), into=c("ACCGE_IDEN"), "(\\d{5})", remove=FALSE)
names(df_iffi)
dim(df_iffi)
dim(lpm_no_shape)
# join the lpm_no_shape_information to the iffi ---------------------------
all_joined = merge(df_iffi, lpm_no_shape, by="ACCGE_IDEN")
# join the lpm_no_shape_information to the iffi ---------------------------
all_joined = merge(lpm_no_shape, df_iffi, by="ACCGE_IDEN")
dim(all_joined)
mapview::mapview(all_joined) + mapview::mapview(iffi10)
mapview::mapview(all_joined) )
mapview::mapview(all_joined)
class(all_joined)
names(all_joined)
# join the lpm_no_shape_information to the iffi ---------------------------
all_joined = merge(lpm_no_shape, df_iffi, by="ACCGE_IDEN") %>% st_as_sf()
names(all_joined)
class(all_joined)
mapview::mapview(all_joined)
mapview::mapview(all_joined) + mapview::mapview(iffi10)
mapview::mapview(all_joined) + mapview::mapview(iffi10, col="red")
mapview::mapview(all_joined) + mapview::mapview(iffi10, zcol="red")
mapview::mapview(all_joined) + mapview::mapview(iffi10, zcol="PIFF_ID")
?mapview::mapview
mapview::mapview(all_joined) + mapview::mapview(iffi10, col.regions="red")
mapview::mapview(all_joined) + mapview::mapview(iffi10, col.regions="red", layerName"iffi")
mapview::mapview(all_joined) + mapview::mapview(iffi10, col.regions="red", layer.name"iffi")
mapview::mapview(all_joined) + mapview::mapview(iffi10, col.regions="red", layer.name="iffi")
dim(iffi10)
devtools::load_all()
devtools::load_all()
librar
library(shiny)
shiny::runao
shiny::runApp()
shiny::runApp(appDir = "local_tests/iffi_data_shiny/")
library(shiny)
library(tidyverse)
library(sf)
library(GADMTools)
library(plotly)
library(leaflet)
library(leaflet.extras)
library(iffitoR)
library(here)
leaflet() %>% addTile()
leaflet() %>% addTiles()
leaflet() %>% addProviderTiles(providers$OpenStreetMap)
dat = landsld
leaflet() %>%
addProviderTiles(providers$CartoDB.Positron, group = "Carto DB") %>%
addProviderTiles(providers$Stamen.TerrainBackground, group = "Terrain") %>%
addProviderTiles(providers$Esri.WorldImagery, group = "Satellite") %>%
addPolygons(data = st,
stroke = T,
color="Black",
fill=F,
opacity = .8,
weight=1) %>%
addCircles(data = dat,
popup = paste0("<b>Date</b>: ", dat$date,
"<br>",
"<b>First level</b>: ", dat$tipologia,
"<br>",
"<b>Second level</b>: ", dat$second_level,
"<br>",
"<b>Cause:</b> ", dat$nome_cause,
"<br>",
"<b>Litology: </b>", dat$nome_litologia,
"<br>",
"<b>Soiltype: </b>", dat$nome_uso_suolo),
color=~factpal(second_level)) %>%
addLegend("bottomright", pal=factpal, values = dat$second_level,
title="2. Level type") %>%
addLayersControl(
baseGroups = c("Carto DB", "Terrain", "Satellite"),
position = "bottomleft"
)
leaflet() %>%
addProviderTiles(providers$CartoDB.Positron, group = "Carto DB") %>%
addProviderTiles(providers$Stamen.TerrainBackground, group = "Terrain") %>%
addProviderTiles(providers$Esri.WorldImagery, group = "Satellite") %>%
addCircles(data = dat,
popup = paste0("<b>Date</b>: ", dat$date,
"<br>",
"<b>First level</b>: ", dat$tipologia,
"<br>",
"<b>Second level</b>: ", dat$second_level,
"<br>",
"<b>Cause:</b> ", dat$nome_cause,
"<br>",
"<b>Litology: </b>", dat$nome_litologia,
"<br>",
"<b>Soiltype: </b>", dat$nome_uso_suolo),
color=~factpal(second_level)) %>%
addLegend("bottomright", pal=factpal, values = dat$second_level,
title="2. Level type") %>%
addLayersControl(
baseGroups = c("Carto DB", "Terrain", "Satellite"),
position = "bottomleft"
)
dat = landsld
factpal = colorFactor(topo.colors(length(unique(dat$second_level))), dat$second_level)
leaflet() %>%
addProviderTiles(providers$CartoDB.Positron, group = "Carto DB") %>%
addProviderTiles(providers$Stamen.TerrainBackground, group = "Terrain") %>%
addProviderTiles(providers$Esri.WorldImagery, group = "Satellite") %>%
addCircles(data = dat,
popup = paste0("<b>Date</b>: ", dat$date,
"<br>",
"<b>First level</b>: ", dat$tipologia,
"<br>",
"<b>Second level</b>: ", dat$second_level,
"<br>",
"<b>Cause:</b> ", dat$nome_cause,
"<br>",
"<b>Litology: </b>", dat$nome_litologia,
"<br>",
"<b>Soiltype: </b>", dat$nome_uso_suolo),
color=~factpal(second_level)) %>%
addLegend("bottomright", pal=factpal, values = dat$second_level,
title="2. Level type") %>%
addLayersControl(
baseGroups = c("Carto DB", "Terrain", "Satellite"),
position = "bottomleft"
)
shiny::runApp(appDir = "local_tests/iffi_data_shiny/")
shiny::runApp(appDir = "local_tests/iffi_data_shiny/")
runApp('local_tests/iffi_data_shiny')
install.package("shinyjqui")
install.packages("shinyjqui")
library(shinyjqui)
runApp('local_tests/iffi_data_shiny')
runApp('local_tests/iffi_data_shiny')
runApp('local_tests/iffi_data_shiny')
runApp('local_tests/iffi_data_shiny')
runApp('local_tests/iffi_data_shiny')
runApp('local_tests/iffi_data_shiny')
runApp('local_tests/iffi_data_shiny')
runApp('local_tests/iffi_data_shiny')
runApp('local_tests/iffi_data_shiny')
runApp('local_tests/iffi_data_shiny')
runApp('local_tests/iffi_data_shiny')
runApp('local_tests/iffi_data_shiny')
runApp('local_tests/iffi_data_shiny')
runApp('local_tests/iffi_data_shiny')
rsconnect::deployApp()
runApp('local_tests/iffi_data_shiny/app3.R')
runApp('local_tests/iffi_data_shiny/app3.R')
runApp('local_tests/iffi_data_shiny/app3.R')
runApp('local_tests/iffi_data_shiny/app3.R')
runApp('local_tests/iffi_data_shiny/app3.R')
runApp('local_tests/iffi_data_shiny')
rsconnect::deployApp()
rsconnect::deployApp(appDir = "local_tests/iffi_data_shiny/")
runApp('local_tests/iffi_data_shiny')
rsconnect::deployApp(appDir = "local_tests/iffi_data_shiny/")
library(shinyjqui)
library(shinyjqui)
rsconnect::deployApp(appDir = "local_tests/iffi_data_shiny/")
?rsconnect::deployApp
rm(list=ls())
shiny::runApp('local_tests/iffi_data_shiny')
runApp('local_tests/iffi_data_shiny')
rsconnect::deployApp(appDir = "local_tests/iffi_data_shiny/")
devtools::load_all()
sf = get_shape_southtyrol()
