elements_in_join
# establish connections
conns = set_connection(database_dir)
# set the right ones
# there are some issues with indexing the list, for some reason we need to index conns with [[]]
# to maintain a valid and open connection
index_attr = which(grepl(attribute_database_name, names(conns)))
if (!is.null(dictionary_database_name)) {
index_dict = which(grepl(dictionary_database_name, names(conns)))
}
attr_database_conn = conns[[index_attr]]
if (!is.null(dictionary_database_name)) {
dict_database_conn = conns[[index_dict]]
}
# the table names are the attributes we can query
# Especially the one in the attributes table are interesting
table_names_attr = make_vector_table_names(attr_database_conn)
table_names_attr
if (!is.null(dictionary_database_name)) {
table_names_dict = make_vector_table_names(dict_database_conn)
}
table_names_dict
table_names_attr
tolower(table_names_attr)
table_names_attr = tolower(table_names_attr)
# make a list of dataframes(tables) for the attributes database
dfs_attr = make_list_dataframes(attr_database_conn)
dfs_attr
names(dfs_attr)
names(dfs_attr[[1]])
devtools::load_all()
# the table names are the attributes we can query
# Especially the one in the attributes table are interesting
table_names_attr = make_vector_table_names(attr_database_conn)
table_names_attr
# make a list of dataframes(tables) for the attributes database
dfs_attr = make_list_dataframes(attr_database_conn)
dfs_atrt
dfs_attr
names(dfs_attr)
names(dfs_attr[[1]])
# make a list of dataframes(tables) for the dictionary database
if (!is.null(dictionary_database_name)) {
dfs_dict = make_list_dataframes(dict_database_conn)
}
dfs_dict
# check for each dataframe if they have an id and subid column
log_vec = check_id(dfs_attr)
# for the rest create the iffi index for the attribute tables
dfs_attr_iffi = create_iffi_index(dfs_attr, log_vec)
# find the tables that we can join directly
tables_to_append_diretly = find_tables(dfs_attr_iffi, attri)
### join those tables
# read the shape
shape = read_shape(shapefile)
shape_joined_attri = join_shape_attributes(shape, tables_to_append_diretly, dfs_attr_iffi)
# make the joins to the dictionary
if (!is.null(dictionary_database_name) | !is.null(joins)) {
joined_dicionary_tables_with_iffi_kodex = join_descriptions(joins, dfs_attr_iffi, dfs_dict)
}
joins
dfs_attr_iffi
names(dfs_attr_iffi)
names(dfs_dict)
i = 1
# make a vector of the three
elements_in_join = c(names(joins)[[i]], joins[[i]][[1]], joins[[i]][[2]])
elements_in_join
# assert that all have 3 entries (db, table, col)
length_attri = elements_in_join[[1]] %>% stringr::str_split(., pattern = "\\.") %>% unlist() %>% length()
length_diz_key = elements_in_join[[2]] %>% stringr::str_split(., pattern = "\\.") %>% unlist() %>% length()
length_diz_value = elements_in_join[[3]] %>% stringr::str_split(., pattern = "\\.") %>% unlist() %>% length()
# vector of the three lengths
ll = c(length_attri, length_diz_key, length_diz_value)
for (l in seq_along(ll)) {
if (ll[[l]] != 3) {
stop(call. = FALSE, paste0("You gave a wrong joins attribute\n", elements_in_join[[l]] ,"\n does not thave the three elements <database>.<table>.<column>"))
}
}
# get the database, Table, column of the attribute datbase
table_attri = names(joins)[[i]] %>% stringr::str_split(., pattern = "\\.") %>% .[[1]] %>% .[[2]]
table_attri
col_attri = names(joins)[[i]] %>% stringr::str_split(., pattern = "\\.") %>% .[[1]] %>% .[[3]]
# find the attribute table
df_index = grep(pattern = paste0("^", table_attri, "$"), names(dfs_attr_iffi))
df_index
table_attri
names(dfs_attr_iffi)
joins
joins[[1]]
j =joins[[1]]
j
joins
joins[[1]]
names(joins)[[1]]
tolowe(names(joins)[[1]])
tolower(names(joins)[[1]])
# make a vector of the three
elements_in_join = c(names(joins)[[i]], joins[[i]][[1]], joins[[i]][[2]])
elements_in_join
# make a vector of the three
elements_in_join = c(names(joins)[[i]], joins[[i]][[1]], joins[[i]][[2]]) %>% tolower(.)
elements_in_join
# make a vector of the three
elements_in_join = c(names(joins)[[i]], joins[[i]][[1]], joins[[i]][[2]]) %>% tolower(.)
# assert that all have 3 entries (db, table, col)
length_attri = elements_in_join[[1]] %>% stringr::str_split(., pattern = "\\.") %>% unlist() %>% length()
length_diz_key = elements_in_join[[2]] %>% stringr::str_split(., pattern = "\\.") %>% unlist() %>% length()
length_diz_value = elements_in_join[[3]] %>% stringr::str_split(., pattern = "\\.") %>% unlist() %>% length()
# vector of the three lengths
ll = c(length_attri, length_diz_key, length_diz_value)
for (l in seq_along(ll)) {
if (ll[[l]] != 3) {
stop(call. = FALSE, paste0("You gave a wrong joins attribute\n", elements_in_join[[l]] ,"\n does not thave the three elements <database>.<table>.<column>"))
}
}
# get the database, Table, column of the attribute datbase
table_attri = names(joins)[[i]] %>% stringr::str_split(., pattern = "\\.") %>% .[[1]] %>% .[[2]]
col_attri = names(joins)[[i]] %>% stringr::str_split(., pattern = "\\.") %>% .[[1]] %>% .[[3]]
col_attri
# get the database, Table, column of the attribute datbase
table_attri = names(joins)[[i]] %>% stringr::str_split(., pattern = "\\.") %>% .[[1]] %>% .[[2]]
table_attri
# make a vector of the three
elements_in_join = c(names(joins)[[i]], joins[[i]][[1]], joins[[i]][[2]]) %>% tolower(.)
# assert that all have 3 entries (db, table, col)
length_attri = elements_in_join[[1]] %>% stringr::str_split(., pattern = "\\.") %>% unlist() %>% length()
length_diz_key = elements_in_join[[2]] %>% stringr::str_split(., pattern = "\\.") %>% unlist() %>% length()
length_diz_value = elements_in_join[[3]] %>% stringr::str_split(., pattern = "\\.") %>% unlist() %>% length()
# vector of the three lengths
ll = c(length_attri, length_diz_key, length_diz_value)
for (l in seq_along(ll)) {
if (ll[[l]] != 3) {
stop(call. = FALSE, paste0("You gave a wrong joins attribute\n", elements_in_join[[l]] ,"\n does not thave the three elements <database>.<table>.<column>"))
}
}
joins = tolower(joins)
joins
# get the database, Table, column of the attribute datbase
table_attri = names(joins)[[i]] %>% stringr::str_split(., pattern = "\\.") %>% .[[1]] %>% .[[2]]
# get the database, Table, column of the attribute datbase
table_attri = names(joins)[[i]] %>% stringr::str_split(., pattern = "\\.") %>% .[[1]] %>% .[[2]]
joins = list(
"tbl_frane.Generalita.Cod_tipo" = c(
"diz_frane.diz_tipo_movi.cod_tipo",
"diz_frane.diz_tipo_movi.tipologia"
),
"tbl_frane.clas_ii_liv.materiale" = c(
"diz_frane.diz_materiali.materiale",
"diz_frane.diz_materiali.nome_materiale"
),
"tbl_frane.clas_ii_liv.movimento" = c(
"diz_frane.diz_movimenti.movimento",
"diz_frane.diz_movimenti.nome_movimento"
),
"tbl_frane.ass_gen_cause.causa" = c(
"diz_frane.diz_cause.causa",
"diz_frane.diz_cause.nome_causa"
)
)
joins
joins = tolower(joins)
joins
joins = list(
"tbl_frane.Generalita.Cod_tipo" = c(
"diz_frane.diz_tipo_movi.cod_tipo",
"diz_frane.diz_tipo_movi.tipologia"
),
"tbl_frane.clas_ii_liv.materiale" = c(
"diz_frane.diz_materiali.materiale",
"diz_frane.diz_materiali.nome_materiale"
),
"tbl_frane.clas_ii_liv.movimento" = c(
"diz_frane.diz_movimenti.movimento",
"diz_frane.diz_movimenti.nome_movimento"
),
"tbl_frane.ass_gen_cause.causa" = c(
"diz_frane.diz_cause.causa",
"diz_frane.diz_cause.nome_causa"
)
)
lapply(joins, tolower)
joins = lapply(joins, tolower)
joins
# get the database, Table, column of the attribute datbase
table_attri = names(joins)[[i]] %>% stringr::str_split(., pattern = "\\.") %>% .[[1]] %>% .[[2]]
table_attri
joins = lapply(joins, tolower)
# get the database, Table, column of the attribute datbase
table_attri = names(joins)[[i]] %>% stringr::str_split(., pattern = "\\.") %>% .[[1]] %>% .[[2]]
table_attri
joins
names(joins)
names(joins) = tolower(names(joins))
joins
# get the database, Table, column of the attribute datbase
table_attri = names(joins)[[i]] %>% stringr::str_split(., pattern = "\\.") %>% .[[1]] %>% .[[2]]
table_attri
col_attri = names(joins)[[i]] %>% stringr::str_split(., pattern = "\\.") %>% .[[1]] %>% .[[3]]
col_attri
# find the attribute table
df_index = grep(pattern = paste0("^", table_attri, "$"), names(dfs_attr_iffi))
df_index
# select the column to join and the iffi kodex
df = dfs_attr_iffi[[df_index]] %>% select(c(col_attri, "iffi_kodex"))
df
# get the database, Table, column of the dictionary datbase
table_dict = joins[[i]] %>% stringr::str_split(., pattern = "\\.") %>% .[[1]] %>% .[[2]]
table_dict
cols_dict = sapply(joins[[i]], function(x) split_and_return(x), USE.NAMES = F)
cols_dict
# find the dict table
df_dict_index = grep(table_dict, names(dfs_dict))
df_dict = dfs_dict[[df_dict_index]] %>% select(cols_dict)
df_dict_index
df_dict = dfs_dict[[df_dict_index]] %>% select(cols_dict)
names(df_dict)
# join them
merged = merge(df, df_dict, by.x = col_attri, by.y = cols_dict[[1]], all.x = T, all.y=F)
dim(merged)
devtools::load_all()
# make the joins to the dictionary
if (!is.null(dictionary_database_name) | !is.null(joins)) {
joined_dicionary_tables_with_iffi_kodex = join_descriptions(joins, dfs_attr_iffi, dfs_dict)
}
joined_dicionary_tables_with_iffi_kodex
joins
dfs_attr_iffi
dfs_dict
i
# list of joined tables
joined_tables = vector("list")
# make a vector of the three
elements_in_join = c(names(joins)[[i]], joins[[i]][[1]], joins[[i]][[2]]) %>% tolower(.)
joins = lapply(joins, tolower)
names(joins) = tolower(names(joins))
# assert that all have 3 entries (db, table, col)
length_attri = elements_in_join[[1]] %>% stringr::str_split(., pattern = "\\.") %>% unlist() %>% length()
length_diz_key = elements_in_join[[2]] %>% stringr::str_split(., pattern = "\\.") %>% unlist() %>% length()
length_diz_value = elements_in_join[[3]] %>% stringr::str_split(., pattern = "\\.") %>% unlist() %>% length()
# vector of the three lengths
ll = c(length_attri, length_diz_key, length_diz_value)
for (l in seq_along(ll)) {
if (ll[[l]] != 3) {
stop(call. = FALSE, paste0("You gave a wrong joins attribute\n", elements_in_join[[l]] ,"\n does not thave the three elements <database>.<table>.<column>"))
}
}
# get the database, Table, column of the attribute datbase
table_attri = names(joins)[[i]] %>% stringr::str_split(., pattern = "\\.") %>% .[[1]] %>% .[[2]]
col_attri = names(joins)[[i]] %>% stringr::str_split(., pattern = "\\.") %>% .[[1]] %>% .[[3]]
# find the attribute table
df_index = grep(pattern = paste0("^", table_attri, "$"), names(dfs_attr_iffi))
# select the column to join and the iffi kodex
df = dfs_attr_iffi[[df_index]] %>% select(c(col_attri, "iffi_kodex"))
# get the database, Table, column of the dictionary datbase
table_dict = joins[[i]] %>% stringr::str_split(., pattern = "\\.") %>% .[[1]] %>% .[[2]]
cols_dict = sapply(joins[[i]], function(x) split_and_return(x), USE.NAMES = F)
# find the dict table
df_dict_index = grep(table_dict, names(dfs_dict))
df_dict = dfs_dict[[df_dict_index]] %>% select(cols_dict)
# join them
merged = merge(df, df_dict, by.x = col_attri, by.y = cols_dict[[1]], all.x = T, all.y=F)
print(paste0("joind the tables: ", table_attri, " and ", table_dict))
print(paste0("    on the columns ", col_attri, " and ", cols_dict[[1]]))
print(paste0("    Resulting table is has ", dim(merged)[[1]], " rows, and ", dim(merged)[[2]], " columns"))
print("")
joined_tables[[i]] = merged
i = 2
# make a vector of the three
elements_in_join = c(names(joins)[[i]], joins[[i]][[1]], joins[[i]][[2]]) %>% tolower(.)
joins = lapply(joins, tolower)
names(joins) = tolower(names(joins))
# assert that all have 3 entries (db, table, col)
length_attri = elements_in_join[[1]] %>% stringr::str_split(., pattern = "\\.") %>% unlist() %>% length()
length_diz_key = elements_in_join[[2]] %>% stringr::str_split(., pattern = "\\.") %>% unlist() %>% length()
length_diz_value = elements_in_join[[3]] %>% stringr::str_split(., pattern = "\\.") %>% unlist() %>% length()
# vector of the three lengths
ll = c(length_attri, length_diz_key, length_diz_value)
for (l in seq_along(ll)) {
if (ll[[l]] != 3) {
stop(call. = FALSE, paste0("You gave a wrong joins attribute\n", elements_in_join[[l]] ,"\n does not thave the three elements <database>.<table>.<column>"))
}
}
# get the database, Table, column of the attribute datbase
table_attri = names(joins)[[i]] %>% stringr::str_split(., pattern = "\\.") %>% .[[1]] %>% .[[2]]
col_attri = names(joins)[[i]] %>% stringr::str_split(., pattern = "\\.") %>% .[[1]] %>% .[[3]]
# find the attribute table
df_index = grep(pattern = paste0("^", table_attri, "$"), names(dfs_attr_iffi))
# assert that all have 3 entries (db, table, col)
length_attri = elements_in_join[[1]] %>% stringr::str_split(., pattern = "\\.") %>% unlist() %>% length()
length_diz_key = elements_in_join[[2]] %>% stringr::str_split(., pattern = "\\.") %>% unlist() %>% length()
length_diz_value = elements_in_join[[3]] %>% stringr::str_split(., pattern = "\\.") %>% unlist() %>% length()
# vector of the three lengths
ll = c(length_attri, length_diz_key, length_diz_value)
for (l in seq_along(ll)) {
if (ll[[l]] != 3) {
stop(call. = FALSE, paste0("You gave a wrong joins attribute\n", elements_in_join[[l]] ,"\n does not thave the three elements <database>.<table>.<column>"))
}
}
# get the database, Table, column of the attribute datbase
table_attri = names(joins)[[i]] %>% stringr::str_split(., pattern = "\\.") %>% .[[1]] %>% .[[2]]
col_attri = names(joins)[[i]] %>% stringr::str_split(., pattern = "\\.") %>% .[[1]] %>% .[[3]]
# find the attribute table
df_index = grep(pattern = paste0("^", table_attri, "$"), names(dfs_attr_iffi))
# select the column to join and the iffi kodex
df = dfs_attr_iffi[[df_index]] %>% select(c(col_attri, "iffi_kodex"))
i
# make a vector of the three
elements_in_join = c(names(joins)[[i]], joins[[i]][[1]], joins[[i]][[2]]) %>% tolower(.)
elements_in_join
joins = lapply(joins, tolower)
joins
names(joins) = tolower(names(joins))
# assert that all have 3 entries (db, table, col)
length_attri = elements_in_join[[1]] %>% stringr::str_split(., pattern = "\\.") %>% unlist() %>% length()
length_diz_key = elements_in_join[[2]] %>% stringr::str_split(., pattern = "\\.") %>% unlist() %>% length()
length_diz_value = elements_in_join[[3]] %>% stringr::str_split(., pattern = "\\.") %>% unlist() %>% length()
# vector of the three lengths
ll = c(length_attri, length_diz_key, length_diz_value)
ll
for (l in seq_along(ll)) {
if (ll[[l]] != 3) {
stop(call. = FALSE, paste0("You gave a wrong joins attribute\n", elements_in_join[[l]] ,"\n does not thave the three elements <database>.<table>.<column>"))
}
}
# get the database, Table, column of the attribute datbase
table_attri = names(joins)[[i]] %>% stringr::str_split(., pattern = "\\.") %>% .[[1]] %>% .[[2]]
table_attri
col_attri = names(joins)[[i]] %>% stringr::str_split(., pattern = "\\.") %>% .[[1]] %>% .[[3]]
col_attri
joins
# find the attribute table
df_index = grep(pattern = paste0("^", table_attri, "$"), names(dfs_attr_iffi))
df_index
table_attri
names(dfs_attr_iffi)
# find the attribute table
df_index = grep(pattern = paste0("^", table_attri, "$"), names(dfs_attr_iffi))
df_index
# select the column to join and the iffi kodex
df = dfs_attr_iffi[[df_index]] %>% select(c(col_attri, "iffi_kodex"))
# get the database, Table, column of the attribute datbase
table_attri = names(joins)[[i]] %>% stringr::str_split(., pattern = "\\.") %>% .[[1]] %>% .[[2]]
table_attri
names(dfs_attr_iffi)
joins = list(
"tbl_frane.Generalita.Cod_tipo" = c(
"diz_frane.diz_tipo_movi.cod_tipo",
"diz_frane.diz_tipo_movi.tipologia"
),
"tbl_frane.classi_ii_liv.materiale" = c(
"diz_frane.diz_materiali.materiale",
"diz_frane.diz_materiali.nome_materiale"
),
"tbl_frane.classi_ii_liv.movimento" = c(
"diz_frane.diz_movimenti.movimento",
"diz_frane.diz_movimenti.nome_movimento"
),
"tbl_frane.ass_gen_cause.causa" = c(
"diz_frane.diz_cause.causa",
"diz_frane.diz_cause.nome_causa"
)
)
joins
# make them all lower case
joins = lapply(joins, tolower)
names(joins) = tolower(names(joins))
# make them all lower case
joins = lapply(joins, tolower)
names(joins) = tolower(names(joins))
joins
# get the database, Table, column of the attribute datbase
table_attri = names(joins)[[i]] %>% stringr::str_split(., pattern = "\\.") %>% .[[1]] %>% .[[2]]
col_attri = names(joins)[[i]] %>% stringr::str_split(., pattern = "\\.") %>% .[[1]] %>% .[[3]]
table_attri
# find the attribute table
df_index = grep(pattern = paste0("^", table_attri, "$"), names(dfs_attr_iffi))
if(length(df_index == 0)){
stop("The attribute table specified in the joins list does not have a corresponding table in the databse...")
}
# select the column to join and the iffi kodex
df = dfs_attr_iffi[[df_index]] %>% select(c(col_attri, "iffi_kodex"))
i
# get the database, Table, column of the dictionary datbase
table_dict = joins[[i]] %>% stringr::str_split(., pattern = "\\.") %>% .[[1]] %>% .[[2]]
cols_dict = sapply(joins[[i]], function(x) split_and_return(x), USE.NAMES = F)
# find the dict table
df_dict_index = grep(table_dict, names(dfs_dict))
df_dict = dfs_dict[[df_dict_index]] %>% select(cols_dict)
# join them
merged = merge(df, df_dict, by.x = col_attri, by.y = cols_dict[[1]], all.x = T, all.y=F)
print(paste0("joind the tables: ", table_attri, " and ", table_dict))
print(paste0("    on the columns ", col_attri, " and ", cols_dict[[1]]))
print(paste0("    Resulting table is has ", dim(merged)[[1]], " rows, and ", dim(merged)[[2]], " columns"))
print("")
devtools::load_all()
# make the joins to the dictionary
if (!is.null(dictionary_database_name) | !is.null(joins)) {
joined_dicionary_tables_with_iffi_kodex = join_descriptions(joins, dfs_attr_iffi, dfs_dict)
}
devtools::load_all()
# make the joins to the dictionary
if (!is.null(dictionary_database_name) | !is.null(joins)) {
joined_dicionary_tables_with_iffi_kodex = join_descriptions(joins, dfs_attr_iffi, dfs_dict)
}
names(dfs_attr_iffi)
table_attri
# find the attribute table
df_index = grep(pattern = paste0("^", table_attri, "$"), names(dfs_attr_iffi))
df_index
joins
# make the joins to the dictionary
if (!is.null(dictionary_database_name) | !is.null(joins)) {
joined_dicionary_tables_with_iffi_kodex = join_descriptions(joins, dfs_attr_iffi, dfs_dict)
}
i = 1
# make a vector of the three
elements_in_join = c(names(joins)[[i]], joins[[i]][[1]], joins[[i]][[2]]) %>% tolower(.)
# assert that all have 3 entries (db, table, col)
length_attri = elements_in_join[[1]] %>% stringr::str_split(., pattern = "\\.") %>% unlist() %>% length()
length_diz_key = elements_in_join[[2]] %>% stringr::str_split(., pattern = "\\.") %>% unlist() %>% length()
length_diz_value = elements_in_join[[3]] %>% stringr::str_split(., pattern = "\\.") %>% unlist() %>% length()
# vector of the three lengths
ll = c(length_attri, length_diz_key, length_diz_value)
for (l in seq_along(ll)) {
if (ll[[l]] != 3) {
stop(call. = FALSE, paste0("You gave a wrong joins attribute\n", elements_in_join[[l]] ,"\n does not thave the three elements <database>.<table>.<column>"))
}
}
# get the database, Table, column of the attribute datbase
table_attri = names(joins)[[i]] %>% stringr::str_split(., pattern = "\\.") %>% .[[1]] %>% .[[2]]
col_attri = names(joins)[[i]] %>% stringr::str_split(., pattern = "\\.") %>% .[[1]] %>% .[[3]]
# find the attribute table
df_index = grep(pattern = paste0("^", table_attri, "$"), names(dfs_attr_iffi))
if(length(df_index == 0)){
stop(paste0("The attribute table ", table_attri," specified in the joins list does not have a corresponding table in the database..."))
}
# find the attribute table
df_index = grep(pattern = paste0("^", table_attri, "$"), names(dfs_attr_iffi))
df_index
if(length(df_index == 0)){
stop(paste0("The attribute table ", table_attri," specified in the joins list does not have a corresponding table in the database..."))
}
a = character(0)
a
length(a)
length(df_index)
df_index
# find the attribute table
df_index = grep(pattern = paste0("^", table_attri, "$"), names(dfs_attr_iffi))
df_index
if(length(df_index == 0)){
stop(paste0("The attribute table ", table_attri," specified in the joins list does not have a corresponding table in the database..."))
}
if(length(df_index) == 0){
stop(paste0("The attribute table ", table_attri," specified in the joins list does not have a corresponding table in the database..."))
}
devtools::load_all()
# make the joins to the dictionary
if (!is.null(dictionary_database_name) | !is.null(joins)) {
joined_dicionary_tables_with_iffi_kodex = join_descriptions(joins, dfs_attr_iffi, dfs_dict)
}
# join them to the shape
if (!is.null(dictionary_database_name) | !is.null(joins)) {
final_joined = join_descriptions_shape(joined_dicionary_tables_with_iffi_kodex, shape_joined_attri)
}
dim(final_joined)
dim(shape)
# filter the columns we wanted
final_selected = select_cols(final_joined, attri, joins)
dim(final_selected)
return(final_selected)
# query the landslide data and its attributes -----------------------------
res = iffitoR::make_shapefile(database_dir = database_dir,
attribute_database_name = "reconstructed",
# the name without extension
dictionary_database_name = "diz_frane",
shapefile = path_spatial,
# normally null only setting it here for me
# the colums we want to retrieve directly
attri = c("anno_min",
"mese_min",
"giorno_min",
"area"),
# tables to join the description
joins = list(
"tbl_frane.Generalita.Cod_tipo" = c(
"diz_frane.diz_tipo_movi.cod_tipo",
"diz_frane.diz_tipo_movi.tipologia"
),
"tbl_frane.classi_ii_liv.materiale" = c(
"diz_frane.diz_materiali.materiale",
"diz_frane.diz_materiali.nome_materiale"
),
"tbl_frane.classi_ii_liv.movimento" = c(
"diz_frane.diz_movimenti.movimento",
"diz_frane.diz_movimenti.nome_movimento"
),
"tbl_frane.ass_gen_cause.causa" = c(
"diz_frane.diz_cause.causa",
"diz_frane.diz_cause.nome_causa"
)
)
)
dim(res)
# translate to english
res_eng = iffitoR::translate_iffi(res)
# add time information
landsld = iffitoR::get_date_information(res_eng)
landsld = landsld %>% st_transform(., 32632)
# save it
usethis::use_data(landsld, overwrite = T)
