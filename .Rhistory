names(iffi10)
names(stato)
# merge the iffi with stato based on the iffi kodex -----------------------
# this will add the ACCGE_IDEN (in the NOTE-column) to the shape
df_iffi = merge(
iffi10,
stato,
by.x = "PIFF_ID",
by.y = "iffi",
all.x,
all.y = F
) %>%
dplyr::distinct(PIFF_ID, .keep_all = TRUE)
names(df_iffi)
# get the ACCGE_IDEN from the excel table ---------------------------------
df_iffi = df_iffi %>%
tidyr::extract(
col = c("NOTE"),
into = c("ACCGE_IDEN"),
"(\\d{5})",
remove = FALSE
)
names(df_iffi)
# merge the iffi with stato based on the iffi kodex -----------------------
# this will add the ACCGE_IDEN (in the NOTE-column) to the shape
df_iffi = merge(
iffi10,
stato,
by.x = "PIFF_ID",
by.y = "iffi",
all.x,
all.y = F
) %>%
dplyr::distinct(PIFF_ID, .keep_all = TRUE)
# get the ACCGE_IDEN from the excel table ---------------------------------
df_iffi = df_iffi %>%
tidyr::extract(
col = c("NOTE"),
into = c("ACCGE_IDEN"),
"(\\d{5})",
remove = T
)
names(df_iffi)
# merge the iffi with stato based on the iffi kodex -----------------------
# this will add the ACCGE_IDEN (in the NOTE-column) to the shape
df_iffi = merge(
iffi10,
stato,
by.x = "PIFF_ID",
by.y = "iffi",
all.x,
all.y = F
) %>%
dplyr::distinct(PIFF_ID, .keep_all = TRUE)
# get the ACCGE_IDEN from the excel table ---------------------------------
df_iffi = df_iffi %>%
tidyr::extract(
col = c("NOTE"),
into = c("ACCGE_IDEN"),
"(\\d{5})",
remove = FALSE
)
names(df_iffi)
# get the ACCGE_IDEN from the excel table ---------------------------------
df_iffi = df_iffi %>%
tidyr::extract(
col = c("NOTE"),
into = c("ACCGE_IDEN"),
"(\\d{5})",
remove = TRUE
)
# merge the iffi with stato based on the iffi kodex -----------------------
# this will add the ACCGE_IDEN (in the NOTE-column) to the shape
df_iffi = merge(
iffi10,
stato,
by.x = "PIFF_ID",
by.y = "iffi",
all.x,
all.y = F
) %>%
dplyr::distinct(PIFF_ID, .keep_all = TRUE)
# get the ACCGE_IDEN from the excel table ---------------------------------
df_iffi = df_iffi %>%
tidyr::extract(
col = c("NOTE"),
into = c("ACCGE_IDEN"),
"(\\d{5})",
remove = TRUE
)
names(df_iffi)
# merge the iffi with stato based on the iffi kodex -----------------------
# this will add the ACCGE_IDEN (in the NOTE-column) to the shape
df_iffi = merge(
iffi10,
stato,
by.x = "PIFF_ID",
by.y = "iffi",
all.x,
all.y = F
) %>%
dplyr::distinct(PIFF_ID, .keep_all = TRUE)
names(df_iffi)
names(iffi10)
names(stato)
stato = read_excel(path_stato)
head(stato)
stato = read_excel(path_stato)
stato = read_excel(path_stato, range = cell_cols("B:F"))
library(readxl)
?read_xls
?cell_cols
stato = read_excel(path_stato, range = cell_cols("B:F"))
stato
devtools::document()
# read in the data
iffi10 = read_sf(path_IFFI10)
lpm_shape = read_sf(path_LPM_shape)
stato = read_excel(path_stato, range = cell_cols("B:F"))
stato
# calculate the iffi kodex in the stato excel -----------------------------
# there are duplicates in the calculated iffi-index --> What to do?
stato = stato %>%
mutate(iffi = 10000 * GEN_ID + 100 * GEN_SUBID + 00)
# merge the iffi with stato based on the iffi kodex -----------------------
# this will add the ACCGE_IDEN (in the NOTE-column) to the shape
df_iffi = merge(
iffi10,
stato,
by.x = "PIFF_ID",
by.y = "iffi",
all.x,
all.y = F
) %>%
dplyr::distinct(PIFF_ID, .keep_all = TRUE)
df_iffi
names(df_iffi)
# get the ACCGE_IDEN from the excel table ---------------------------------
df_iffi = df_iffi %>%
tidyr::extract(
col = c("NOTE"),
into = c("ACCGE_IDEN"),
"(\\d{5})",
remove = TRUE
)
names(df_iffi)
# remove duplicate geometry columsn
duplicate_geom = df_iffi %>% st_geometry()
# remove duplicate geometry columsn
duplicate_geom = df_iffi %>% select(c(ID))
# remove duplicate geometry columsn
duplicate_geom = df_iffi %>% select(matches("ID"))
# remove duplicate geometry columsn
duplicate_geom = df_iffi %>% dplyr::select(matches("ID"))
names(df_iffi)
# remove duplicate geometry column
index_first_geometry = names(df_iffi) %>% grep("geom", .)
index_first_geometry
# remove duplicate geometry column
index_first_geometry = names(df_iffi) %>% grep("geom", .) %>% .[[1]]
index_first_geometry
remove_indexes = index_geometries[2:length(index_geometries)]
# remove duplicate geometry column
index_geometries = names(df_iffi) %>% grep("geom", .)
remove_indexes = index_geometries[2:length(index_geometries)]
remove_indexes
df_iffi = df_iffi[, -remove_indexes]
df_iffi[,remove_indexes] = NULL
names(df_iffi)
# remove the spatial information from the lpm_shapefile -------------------
# For us the spatial information from the iffi10-shape is more useful
lpm_no_shape = lpm_shape %>% st_drop_geometry() %>% .[, keep_lpm]
# join the lpm_no_shape_information to the iffi ---------------------------
all_joined = merge(df_iffi, lpm_no_shape, by = "ACCGE_IDEN") %>% st_as_sf()
names(df_iffi)
names(lpm_no_shape)
all_joined = merge(df_iffi, lpm_no_shape, by = "ACCGE_IDEN")
st_geometry(df_iffi)
class(df_iffi)
names(df_iffi)
st_as_sf(df_iffi)
# merge the iffi with stato based on the iffi kodex -----------------------
# this will add the ACCGE_IDEN (in the NOTE-column) to the shape
df_iffi = merge(
iffi10,
stato,
by.x = "PIFF_ID",
by.y = "iffi",
all.x,
all.y = F
) %>%
dplyr::distinct(PIFF_ID, .keep_all = TRUE)
df_iffi
names(df_iffi)
# get the ACCGE_IDEN from the excel table ---------------------------------
# why does it produce duplicate geometry columns??
df_iffi = df_iffi  %>%
st_drop_geometry %>%
tidyr::extract(
col = c("NOTE"),
into = c("ACCGE_IDEN"),
"(\\d{5})",
remove = TRUE
)
df_iffi
names(df_iffi)
# get the geometry
geom = df_iffi %>% st_geometry()
# merge the iffi with stato based on the iffi kodex -----------------------
# this will add the ACCGE_IDEN (in the NOTE-column) to the shape
df_iffi = merge(
iffi10,
stato,
by.x = "PIFF_ID",
by.y = "iffi",
all.x,
all.y = F
) %>%
dplyr::distinct(PIFF_ID, .keep_all = TRUE)
# get the geometry
geom = df_iffi %>% st_geometry()
geom
# get the ACCGE_IDEN from the excel table ---------------------------------
# why does it produce duplicate geometry columns??
df_iffi = df_iffi  %>%
st_drop_geometry %>%
tidyr::extract(
col = c("NOTE"),
into = c("ACCGE_IDEN"),
"(\\d{5})",
remove = TRUE
)
# put back the geometry
df_iffi$geom = geom
class(df_iffi)
df_iffi = st_as_sf(df_iffi)
names(df_iffi)
class(df_iffi)
head(df_iffi)
# remove the spatial information from the lpm_shapefile -------------------
# For us the spatial information from the iffi10-shape is more useful
lpm_no_shape = lpm_shape %>% st_drop_geometry() %>% .[, keep_lpm]
lpm_no_shape
# join the lpm_no_shape_information to the iffi ---------------------------
all_joined = merge(df_iffi, lpm_no_shape, by = "ACCGE_IDEN") %>% st_as_sf()
dim(all_joined)
all_joined = merge(df_iffi, lpm_no_shape, by = "ACCGE_IDEN", all.x=TRUE)
dim(all_joined)
length(sum(!is.na(all_joined$ACCGE_IDEN)))
View(all_joined)
mapview(all_joined)
devtools::document()
devtools::document()
# remotes::install_github("https://github.com/RobinKohrs/iffitoR", force=TRUE)
library(iffitoR)
library(plotly)
library(glue)
library(RODBC)
library(forcats)
library(dplyr)
library(rgdal)
library(ggplot2)
library(tools)
library(stringr)
library(sf)
#####
joins = list(
"tbl_frane.Geologia.litologia"                 = c("diz_frane.diz_litologie.litologia",      "diz_frane.diz_litologie.nome_litologia"),
"tbl_frane.clas_ii_liv.movimento"              = c("diz_frane.diz_movimenti.movimento",      "diz_frane.diz_movimenti.nome_movimento"),
"tbl_frane.Uso_Suolo.uso_suolo"                = c("diz_frane.diz_usi_suolo.uso_suolo",      "diz_frane.diz_usi_suolo.nome_uso_suolo"),
"tbl_frane.ass_gen_cause.causa"                = c("diz_frane.diz_cause.causa",              "diz_frane.diz_cause.nome_causa"),
"tbl_frane.Attivita.stile"                     = c("diz_frane.diz_stile.stile",              "diz_frane.diz_stile.nome_stile"),
"tbl_frane.clas_ii_liv.materiale"              = c("diz_frane.diz_materiali.materiale",      "diz_frane.diz_materiali.nome_materiale"),
"tbl_frane.Generalita.Cod_tipo"                = c("diz_frane.diz_tipo_movi.cod_tipo",       "diz_frane.diz_tipo_movi.tipologia"),
"tbl_frane.clas_ii_liv.acqua"                  = c("diz_frane.diz_acqua.acqua",              "diz_frane.diz_acqua.nome_acqua"),
"tbl_frane.clas_ii_liv.velocita"               = c("diz_frane.diz_velocita.velocita",        "diz_frane.diz_velocita.nome_velocita"),
"tbl_frane.ass_gen_cause.causa"                = c("diz_frane.diz_cause.causa",              "diz_frane.diz_gruppi_cause.gruppo_cause"),
"tbl_frane.Attivita.stato"                     = c("diz_frane.diz_stati.stato",              "diz_frane.diz_stati.nome_stato"),
"tbl_frane.Generalita.Cod_tipo"                = c("diz_frane.diz_pendii.tipo_pendio",       "diz_frane.diz_pendii.nome_pendio"),
"tbl_frane.ass_gen_metodo.codmetodo"           = c("diz_frane.diz_metodo.codmetodo",         "diz_frane.diz_metodo.descrizione"),
"tbl_frane.Geologia.litotecnica"               = c("diz_frane.diz_litotecniche.litotecnica", "diz_frane.diz_litotecniche.nome_litotecnica"),
"tbl_frane.ass_gen_elementi_rischio.element"   = c("diz_frane.diz_elementi_rischio.element", "diz_frane.diz_elementi_rischio.nome_elemento")
)
# the path to the iffi polygons
landslide_poly_path = "\\\\projectdata.eurac.edu/projects/Proslide/Landslides/Iffi_db_xxxx_to_2018/exportperEurac2020/Shapefiles/IFFI10_5.shp"
# the path to the iffi points
landslide_point_path = "\\\\projectdata.eurac.edu/projects/Proslide/Landslides/Iffi_db_xxxx_to_2018/exportperEurac2020/Shapefiles/IFFI10_1.shp"
# the path to the folder with the iffi-databases
database_dir = "\\\\projectdata.eurac.edu/projects/Proslide/Landslides/Iffi_db_xxxx_to_2018/exportperEurac2020/database"
# attributes directly included in the db
attri = c("anno_min", "mese_min", "giorno_min","ora_min", "area", "vol_finale", "Note_classifi", "anno", "danno_diretto", "costo_totale", "Morti") # anno = previous event in year?
os = Sys.info()["sysname"]
if (os == "Windows") {
iffi_sf = iffitoR::make_shapefile(
database_dir = database_dir,
attribute_database_name = "tbl_frane",
dictionary_database_name = "diz_frane",
shapefile = landslide_point_path,
attri = attri,
joins = joins
)
}else{
iffi_sf = landsld}
iffi
names(iffi_sf)
devtools::document()
iffi_sf
get_additional_information(iffi_sf)
r = get_additional_information(iffi_sf)
names(r)
sim(r)
dim(r)
dim(iffi_sf)
length(unique(r$ACCGE_IDEN))
mapview(r)
devtools::document()
remotes::install_gitlab("git@gitlab.inf.unibz.it:proslide/iffitor.git")
remotes::install_gitlab("https://gitlab.inf.unibz.it/proslide/iffitor/-/tree/master")
remotes::install_gitlab("https://gitlab.inf.unibz.it/proslide/iffitor/")
remotes::install_gitlab("https://gitlab.inf.unibz.it/proslide/iffitor.git")
remotes::install_gitlab("proslide/iffitoR")
remotes::install_gitlab(repo = "proslide/iffitoR", host = "gitlab.inf.unibz.it")
cred <- git2r::cred_user_pass(rstudioapi::askForPassword("username"), rstudioapi::askForPassword("Password"))
install.packages("git2r")
cred <- git2r::cred_user_pass(rstudioapi::askForPassword("username"), rstudioapi::askForPassword("Password"))
cred <- git2r::cred_user_pass(rstudioapi::askForPassword("username"), rstudioapi::askForPassword("Password"))
devtools::install_git("https://gitlab.inf.unibz.it/proslide/iffitor.git", credentials = cred)
cred
cred <- git2r::cred_user_pass(rstudioapi::askForPassword("username"), rstudioapi::askForPassword("Password"))
devtools::install_git("https://gitlab.inf.unibz.it/proslide/iffitor.git", credentials = cred)
remotes::install_git(url = "proslide/iffitor", repos = "gitlab.inf.unibz.it")
creds = git2r::cred_ssh_key(publickey = "C://Users/robin/.ssh/id_rsa.pub",)
creds = git2r::cred_ssh_key(publickey = "C://Users/robin/.ssh/id_rsa.pub",
privatekey = "C://Users/robin/.ssh/id_rsa")
creds
devtools::install_git("git@gitlab.inf.unibz.it:proslide/iffitor.git",)
devtools::install_git("git@gitlab.inf.unibz.it:proslide/iffitor.git",
credentials = creds)
library(leaflet)
library(raster)
library(here)
# create reproducible example
r = raster()
res(r) = 0.1
r[] = runif(ncell(r))
r
writeRaster(r, "local_data/big_raster.tif")
# plot it with mapview
mapview::mapview(r)
# plot it with leaflet
leaflet() %>% addTiles() %>% addRasterImage(r)
ii = "m3_class_3857.tif"
library(leafem)
ii = raster("m3_class_3857.tif")
shiny::runApp('local_tests/iffi_data_shiny')
library(leaflet)
library(leafem)
library(raster)
library(sf)
library(here)
raster_path = here("local_tests/iffi_data_shiny/m3_class.tif")
r = raster(raster_path)
r = raster()
res(r) = 0.1
r[] = runif(ncell(r))
leaflet() %>% addTiles() %>% leafem::addGeoRaster(r)
library(leaflet)
library(leafem)
library(raster)
library(sf)
library(here)
raster_path = here("local_tests/iffi_data_shiny/m3_class.tif")
r = raster(raster_path)
# r = raster()
# res(r) = 0.1
# r[] = runif(ncell(r))
leaflet() %>% addTiles() %>% leafem::addGeoRaster(r)
ii = raster("m3_class.tif")
runApp('local_tests/iffi_data_shiny')
library(git2r)
library(iffitoR)
library(sf)
library(dplyr)
library(ggplot2)
library(mapview)
library(tmap)
library(stringr)
library(RODBC)
raw_res =
res_raw = make_shapefile(
database_dir = "../euracR/data/database/",
# normally null only setting it here for me
attribute_database_name = "tbl_frane",
# the name without extension
dictionary_database_name = "diz_frane",
shapefile = "../euracR/data/Shapefiles/IFFI10_1.shp",
# normally null only setting it here for me
# the colums we want to retrieve directly
attri = c(
"anno_min",
"anno_max",
"mese_min",
"mese_max",
"giorno_min",
"giorno_max"
),
# tables to join the description
joins = list(
"tbl_frane.Geologia.litologia" = c(
"diz_frane.diz_litologie.litologia",
"diz_frane.diz_litologie.nome_litologia"
),
"tbl_frane.clas_ii_liv.movimento" = c(
"diz_frane.diz_movimenti.movimento",
"diz_frane.diz_movimenti.nome_movimento"
),
"tbl_frane.Uso_Suolo.uso_suolo" = c(
"diz_frane.diz_usi_suolo.uso_suolo",
"diz_frane.diz_usi_suolo.nome_uso_suolo"
)
)
)
res_filtered = res_raw %>%
dplyr::filter(
!is.na(anno_min),
!is.na(mese_min),
!is.na(giorno_min)
) %>%
distinct(PIFF_ID, .keep_all = TRUE)
res_no_date = res_raw %>% filter(!PIFF_ID %in% res_filtered$PIFF_ID) %>%
distinct(PIFF_ID, .keep_all = TRUE)
# This is the same....
res_filtered2 = res_raw %>%
dplyr::filter(
!(is.na(anno_min) & is.na(anno_max)), # at least one of each is present
!(is.na(mese_min) & is.na(mese_max)),
!(is.na(giorno_min) & is.na(giorno_max))
) %>%
distinct(PIFF_ID, .keep_all = TRUE)
res_date = res_filtered %>% mutate(
year = anno_min,
month = mese_min,
day = giorno_min) %>%
mutate(date = paste(year, month, day, sep = "/")) %>%
mutate(date = as.Date(date),
year.int = year, # year as int
year.posix = as.Date(paste0(year, "-01-01"))) # year as posix...
# check that there are no more NAs
res_date %>%  select(c(year.posix, month, day)) %>% st_drop_geometry(.) %>% purrr::map(~sum(is.na(.)))
# 2000 -now
ggplot(res_date, aes(x = year.posix)) +
geom_bar(fill = "grey", col = "black", size=1.2) +
geom_text(aes(label=..count..),
stat='count',
nudge_y = 0.125,
vjust=-1) +
scale_x_date(date_breaks = "1 year",
labels = scales::date_format("%Y"),
limits = as.Date(c("2000-01-02", "2020-12-01"))) +
labs(title="Count of Events of all type",
x = "Year") +
theme_minimal() +
theme(
axis.text.x = element_text(angle=90)
)
type_movement_date = res_date %>% st_drop_geometry(.) %>%
select(c(nome_movimento)) %>%
mutate(movement = as.factor(nome_movimento)) %>% .[[1]]
type_movement_no_date = res_no_date %>% st_drop_geometry(.) %>%
select(c(nome_movimento)) %>%
mutate(movement = as.factor(nome_movimento)) %>% .[[1]]
# combine the two
# must adapt the size and fill with na to make one plot
n = max(length(type_movement_date), length(type_movement_no_date))
# set both to the same length
length(type_movement_date) = length(type_movement_no_date) = n
df = cbind(type_movement_date, type_movement_no_date) %>% as.data.frame(.) %>%
tidyr::pivot_longer(cols=c("type_movement_date", "type_movement_no_date"), names_to = "date", values_to="movement")
cols = c("type_movement_date" = "cornflowerblue", "type_movement_no_date" ="darkgrey")
ggplot() +
geom_bar(data = df, aes(x=movement, fill=date), position="dodge") +
scale_fill_manual(values=cols, labels=c("date present", "no date")) +
labs(title = "Type and number of movements with/without date") +
theme_minimal() +
theme(axis.text.x = element_text(angle=45, vjust = 1, hjust = 1))
italy = gadm_sf_loadCountries("ITA", level=3)$sf %>% st_transform(st_crs(32632))
# make a map with administrative boundaries
library(GADMTools)
italy = gadm_sf_loadCountries("ITA", level=3)$sf %>% st_transform(st_crs(32632))
south_tyrol = italy %>% filter(grepl("Bolzano", NAME_2))
italy = gadm_sf_loadCountries("ITA", level=3)$sf %>% st_transform(st_crs(res_date))
south_tyrol = italy %>% filter(grepl("Bolzano", NAME_2))
# plot them on a map
ggplot() +
geom_sf(data=south_tyrol, fill="transparent", alpha=.1) +
geom_sf(data=translative_slides_2014, aes(col=day.posix)) +
scale_color_date(low="red", high="green", name="Day") + theme_minimal() +
labs(title="Translational landslides in 2014 with day-precise date")
# plot each the ones from 2014 in a bacr chart
translative_slides_2014 = res_date %>%
filter(year == 2014) %>%
filter(grepl("traslativo", nome_movimento))
# plot them on a map
ggplot() +
geom_sf(data=south_tyrol, fill="transparent", alpha=.1) +
geom_sf(data=translative_slides_2014, aes(col=day.posix)) +
scale_color_date(low="red", high="green", name="Day") + theme_minimal() +
labs(title="Translational landslides in 2014 with day-precise date")
translational_2000_sf = translational_complete_date_sf %>% filter(year.posix >= as.Date("2000-01-01"))
anim = tm_shape(south_tyrol) + tm_polygons() +
tm_shape(translational_2000_sf) + tm_squares() +
tm_facets(along="year.posix", free.coords = FALSE)
