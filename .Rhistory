y = n),
fill = "grey",
col = "black",
size = 1.2,
position="identity") +
scale_x_continuous(breaks = 1:12) +
labs(y = "Count", title = "Number of translational Landslides in 2008, 2014 and 2018", x =
"Day") +
facet_grid(vars(year.int)) +
theme_minimal() +
theme(
panel.background = element_rect(colour = "black", size = .5),
axis.text.x = element_text(),
axis.title.x = element_text(face = "bold"),
axis.title.y = element_text(face = "bold")
)
ggplot(twok8_twok14_twok18) +
geom_bar(aes(x = month.int,
y = n),
fill = "grey",
col = "black",
size = 1.2,
stat="identity") +
scale_x_continuous(breaks = 1:12) +
labs(y = "Count", title = "Number of translational Landslides in 2008, 2014 and 2018", x =
"Day") +
facet_grid(vars(year.int)) +
theme_minimal() +
theme(
panel.background = element_rect(colour = "black", size = .5),
axis.text.x = element_text(),
axis.title.x = element_text(face = "bold"),
axis.title.y = element_text(face = "bold")
)
twok8_twok14_twok18 %>% filter(year.int == 2008)
twok8_twok14_twok18 = res_dates %>%
filter(year.int %in% c(2008, 2014, 2018)) %>%
group_by(year.int, month.int) %>%
summarise(
n = n()
)
ggsave(filename = "../EURAC_MISC/landslide_eda/plots/translational_movements_200820142018.png", width=12, height=8, dpi=500)
ggsave(filename = "man/figures/translational_movements_200820142018.png", width=12, height=8, dpi=500)
devtools::document()
# load libraries---------------------------------------------------------------
library(sf)
library(iffitoR)
library(tmap)
library(tidyverse)
library(glue)
library(GADMTools)
library(mapview)
library(RODBC)
# we want the point data
points = T
# which os to automatically set the paths
os = Sys.info()["sysname"]
if(os == "Linux"){
path_ncdf = "/mnt/CEPH_PROJECTS/Proslide/PREC_GRIDS_updated/"
poly_landslide_path = "/mnt/CEPH_PROJECTS/Proslide/Landslides/Iffi_db_xxxx_to_2018/exportperEurac2020/Shapefiles/IFFI10_5.shp"
points_landslide_path = "/mnt/CEPH_PROJECTS/Proslide/Landslides/Iffi_db_xxxx_to_2018/exportperEurac2020/Shapefiles/IFFI10_1.shp"
database_dir = "/mnt/CEPH_PROJECTS/Proslide/Landslides/Iffi_db_xxxx_to_2018/exportperEurac2020/database"
}else if(os == "Windows"){
path_ncdf = "\\\\projectdata.eurac.edu/projects/Proslide/PREC_GRIDS_updated/"
poly_landslide_path = "\\\\projectdata.eurac.edu/projects/Proslide/Landslides/Iffi_db_xxxx_to_2018/exportperEurac2020/Shapefiles/IFFI10_5.shp"
points_landslide_path = "\\\\projectdata.eurac.edu/projects/Proslide/Landslides/Iffi_db_xxxx_to_2018/exportperEurac2020/Shapefiles/IFFI10_1.shp"
database_dir = "\\\\projectdata.eurac.edu/projects/Proslide/Landslides/Iffi_db_xxxx_to_2018/exportperEurac2020/database"
}else{
stop(call. = F, "what the hell are you working on...")
}
# which shape to read
if(points){
path_spatial = points_landslide_path
}else{
path_spatial = poly_landslide_path
}
res = iffitoR::make_shapefile(database_dir = database_dir,
attribute_database_name = "tbl_frane",
# the name without extension
dictionary_database_name = "diz_frane",
shapefile = path_spatial,
# normally null only setting it here for me
# the colums we want to retrieve directly
attri = c("anno_min",
"mese_min",
"giorno_min",
"area"),
# tables to join the description
joins = list(
"tbl_frane.Generalita.Cod_tipo" = c(
"diz_frane.diz_tipo_movi.cod_tipo",
"diz_frane.diz_tipo_movi.tipologia"
),
"tbl_frane.clas_ii_liv.materiale" = c(
"diz_frane.diz_materiali.materiale",
"diz_frane.diz_materiali.nome_materiale"
),
"tbl_frane.clas_ii_liv.movimento" = c(
"diz_frane.diz_movimenti.movimento",
"diz_frane.diz_movimenti.nome_movimento"
),
"tbl_frane.ass_gen_cause.causa" = c(
"diz_frane.diz_cause.causa",
"diz_frane.diz_cause.nome_causa"
)
)
)
names(res)
unique(res$nome_materiale)
devtools::load_all()
t = translate_iffi(landsld)
t = translate_iffi(res)
names(r)
names(t)
names(res)
names(res)
#' function to translate some of the column to english
#'
#' @export
#'
translate_iffi = function(df) {
# do some checking
if(!any(grepl("anno_min|mese_min|giorno_min|tipologia|nome_movimento", names(df)))){
stop("some of the necessary columns are'n present in the dataframe provided, ",
"Did you pass the dataframe directly to the translate-funtion after you created it with make_shapefile?")
}
df = df %>%
# rename the values in nome_movimento
mutate(
nome_movimento = str_replace(nome_movimento, pattern = "[Cc]omplesso", replacement = "complex"),
nome_movimento = str_replace(nome_movimento, pattern = "Aree soggette a crolli/ribaltamenti diffusi", replacement = "area subject to rockfall/topple"),
nome_movimento = str_replace(nome_movimento, pattern = "crollo", replacement = "fall-type"),
nome_movimento = str_replace(nome_movimento, pattern = "scivolamento traslativo", replacement = "translational slide"),
nome_movimento = str_replace(nome_movimento, pattern = "scivolamento rotazionale", replacement = "rotational slide"),
nome_movimento = str_replace(nome_movimento, pattern = "Aree soggette a sprofondamenti diffusi", replacement = "areas subject to subsidence"),
nome_movimento = str_replace(nome_movimento, pattern = 'col.*lento"', replacement = "slow flow-type"),
nome_movimento = str_replace(nome_movimento, pattern = 'col.*rapido"', replacement = "fast flow-type"),
nome_movimento = str_replace(nome_movimento, pattern = "ribaltamento", replacement = "topple"),
nome_movimento = str_replace(nome_movimento, pattern = "DGPV", replacement = "deep-seated movement"),
nome_movimento = str_replace(nome_movimento, pattern = "sprofondamento", replacement = "subsidence"),
nome_movimento = str_replace(nome_movimento, pattern = "Aree soggette a frane superficiali diffuse", replacement = "area subject to shallow-slides"),
nome_movimento = str_replace(nome_movimento, pattern = "espansione", replacement = "area of expansion"),
) %>%
# rename the values in tipologia
mutate(
tipologia = str_replace(tipologia, pattern="Complesso", replacement="complex"),
tipologia = str_replace(tipologia, pattern="Aree soggette a crolli/ribaltamenti diffusi", replacement="area subject to rockfall/topple"),
tipologia = str_replace(tipologia, pattern="Crollo/Ribaltamento", replacement="fall-type/topple"),
tipologia = str_replace(tipologia, pattern="Scivolamento rotazionale/traslativo", replacement="translational/rotational slide"),
tipologia = str_replace(tipologia, pattern = "Espansione", replacement = "area of expansion"),
tipologia = str_replace(tipologia, pattern = "Aree soggette a frane superficiali diffuse", replacement = "area subject to shallow slides"),
tipologia = str_replace(tipologia, pattern = "Colamento lento", replacement = "slow flow-type"),
tipologia = str_replace(tipologia, pattern = "Colamento rapido", replacement = "fast flow-type"),
tipologia = str_replace(tipologia, pattern = "DGPV", replacement = "deep-seated landslide"),
tipologia = str_replace(tipologia, pattern = "Sprofondamento", replacement = "subsidence"),
tipologia = str_replace(tipologia, pattern = "Aree soggette a sprofondamenti diffusi", replacement = "area subject to subsidence")
) %>%
mutate(
nome_materiale = str_replace(nome_materiale, "roccia", "rock"),
nome_materiale = str_replace(nome_materiale, "detrito", "debris"),
nome_materiale = str_replace(nome_materiale, "terra", "earth"),
)
# rename the actual variables
mutate(
first_level = tipologia,
second_level = nome_movimento,
material = nome_materiale
)
return(df)
}
translate_iffi(res)
df = res
df = df %>%
# rename the values in nome_movimento
mutate(
nome_movimento = str_replace(nome_movimento, pattern = "[Cc]omplesso", replacement = "complex"),
nome_movimento = str_replace(nome_movimento, pattern = "Aree soggette a crolli/ribaltamenti diffusi", replacement = "area subject to rockfall/topple"),
nome_movimento = str_replace(nome_movimento, pattern = "crollo", replacement = "fall-type"),
nome_movimento = str_replace(nome_movimento, pattern = "scivolamento traslativo", replacement = "translational slide"),
nome_movimento = str_replace(nome_movimento, pattern = "scivolamento rotazionale", replacement = "rotational slide"),
nome_movimento = str_replace(nome_movimento, pattern = "Aree soggette a sprofondamenti diffusi", replacement = "areas subject to subsidence"),
nome_movimento = str_replace(nome_movimento, pattern = 'col.*lento"', replacement = "slow flow-type"),
nome_movimento = str_replace(nome_movimento, pattern = 'col.*rapido"', replacement = "fast flow-type"),
nome_movimento = str_replace(nome_movimento, pattern = "ribaltamento", replacement = "topple"),
nome_movimento = str_replace(nome_movimento, pattern = "DGPV", replacement = "deep-seated movement"),
nome_movimento = str_replace(nome_movimento, pattern = "sprofondamento", replacement = "subsidence"),
nome_movimento = str_replace(nome_movimento, pattern = "Aree soggette a frane superficiali diffuse", replacement = "area subject to shallow-slides"),
nome_movimento = str_replace(nome_movimento, pattern = "espansione", replacement = "area of expansion"),
) %>%
# rename the values in tipologia
mutate(
tipologia = str_replace(tipologia, pattern="Complesso", replacement="complex"),
tipologia = str_replace(tipologia, pattern="Aree soggette a crolli/ribaltamenti diffusi", replacement="area subject to rockfall/topple"),
tipologia = str_replace(tipologia, pattern="Crollo/Ribaltamento", replacement="fall-type/topple"),
tipologia = str_replace(tipologia, pattern="Scivolamento rotazionale/traslativo", replacement="translational/rotational slide"),
tipologia = str_replace(tipologia, pattern = "Espansione", replacement = "area of expansion"),
tipologia = str_replace(tipologia, pattern = "Aree soggette a frane superficiali diffuse", replacement = "area subject to shallow slides"),
tipologia = str_replace(tipologia, pattern = "Colamento lento", replacement = "slow flow-type"),
tipologia = str_replace(tipologia, pattern = "Colamento rapido", replacement = "fast flow-type"),
tipologia = str_replace(tipologia, pattern = "DGPV", replacement = "deep-seated landslide"),
tipologia = str_replace(tipologia, pattern = "Sprofondamento", replacement = "subsidence"),
tipologia = str_replace(tipologia, pattern = "Aree soggette a sprofondamenti diffusi", replacement = "area subject to subsidence")
) %>%
mutate(
nome_materiale = str_replace(nome_materiale, "roccia", "rock"),
nome_materiale = str_replace(nome_materiale, "detrito", "debris"),
nome_materiale = str_replace(nome_materiale, "terra", "earth"),
)
df
devtools::load_all()
rm(list = c("translate_iffi"))
devtools::load_all()
r = translate_iffi(res)
names(r)
unique(r$material)
unique(res$nome_materiale)
# translate to english
res_eng = iffitoR::translate_iffi(res)
# add time information
landsld = iffitoR::get_date_information()
# add time information
landsld = iffitoR::get_date_information()
# add time information
landsld = iffitoR::get_date_information(res_eng)
names(landsld)
devtools::load_all()
# translate to english
res_eng = iffitoR::translate_iffi(res)
# add time information
landsld = iffitoR::get_date_information(res_eng)
names(landsld)
unique(landsld$material)
# save it
usethis::use_data(landsld, overwrite = T)
devtools::load_all()
library(sf)
write_sf(landsld, "../../../Desktop/landsld.shp")
if(os == "Linux"){
path_ncdf = "/mnt/CEPH_PROJECTS/Proslide/PREC_GRIDS_updated/"
poly_landslide_path = "/mnt/CEPH_PROJECTS/Proslide/Landslides/iffi_db_1821_to_2020/shapefile/IFFI10_4/IFFI10_4.shp"
points_landslide_path = "/mnt/CEPH_PROJECTS/Proslide/Landslides/iffi_db_1821_to_2020/shapefile/IFFI10_1/IFFI10_1.shp"
database_dir = "/mnt/CEPH_PROJECTS/Proslide/Landslides/iffi_db_1821_to_2020/IFFI_access300321/IFFI/"
}else if(os == "Windows"){
path_ncdf = "\\\\projectdata.eurac.edu/projects/Proslide/PREC_GRIDS_updated/"
poly_landslide_path = "\\\\projectdata.eurac.edu/projects/Proslide/Landslides/Iffi_db_xxxx_to_2018/exportperEurac2020/Shapefiles/IFFI10_5.shp"
points_landslide_path = "\\\\projectdata.eurac.edu/projects/Proslide/Landslides/Iffi_db_xxxx_to_2018/exportperEurac2020/Shapefiles/IFFI10_1.shp"
database_dir = "\\\\projectdata.eurac.edu/projects/Proslide/Landslides/Iffi_db_xxxx_to_2018/exportperEurac2020/database"
}else{
stop(call. = F, "what the hell are you working on...")
}
# which os to automatically set the paths
os = Sys.info()["sysname"]
if(os == "Linux"){
path_ncdf = "/mnt/CEPH_PROJECTS/Proslide/PREC_GRIDS_updated/"
poly_landslide_path = "/mnt/CEPH_PROJECTS/Proslide/Landslides/iffi_db_1821_to_2020/shapefile/IFFI10_4/IFFI10_4.shp"
points_landslide_path = "/mnt/CEPH_PROJECTS/Proslide/Landslides/iffi_db_1821_to_2020/shapefile/IFFI10_1/IFFI10_1.shp"
database_dir = "/mnt/CEPH_PROJECTS/Proslide/Landslides/iffi_db_1821_to_2020/IFFI_access300321/IFFI/"
}else if(os == "Windows"){
path_ncdf = "\\\\projectdata.eurac.edu/projects/Proslide/PREC_GRIDS_updated/"
poly_landslide_path = "\\\\projectdata.eurac.edu/projects/Proslide/Landslides/Iffi_db_xxxx_to_2018/exportperEurac2020/Shapefiles/IFFI10_5.shp"
points_landslide_path = "\\\\projectdata.eurac.edu/projects/Proslide/Landslides/Iffi_db_xxxx_to_2018/exportperEurac2020/Shapefiles/IFFI10_1.shp"
database_dir = "\\\\projectdata.eurac.edu/projects/Proslide/Landslides/Iffi_db_xxxx_to_2018/exportperEurac2020/database"
}else{
stop(call. = F, "what the hell are you working on...")
}
poly_landslide_path
points_landslide_path
# we want the point data
points = T
# which shape to read
if(points){
path_spatial = points_landslide_path
}else{
path_spatial = poly_landslide_path
}
database_dir
# query the landslide data and its attributes -----------------------------
res = iffitoR::make_shapefile(database_dir = database_dir,
attribute_database_name = "tbl_frane",
# the name without extension
dictionary_database_name = "diz_frane",
shapefile = path_spatial,
# normally null only setting it here for me
# the colums we want to retrieve directly
attri = c("anno_min",
"mese_min",
"giorno_min",
"area"),
# tables to join the description
joins = list(
"tbl_frane.Generalita.Cod_tipo" = c(
"diz_frane.diz_tipo_movi.cod_tipo",
"diz_frane.diz_tipo_movi.tipologia"
),
"tbl_frane.clas_ii_liv.materiale" = c(
"diz_frane.diz_materiali.materiale",
"diz_frane.diz_materiali.nome_materiale"
),
"tbl_frane.clas_ii_liv.movimento" = c(
"diz_frane.diz_movimenti.movimento",
"diz_frane.diz_movimenti.nome_movimento"
),
"tbl_frane.ass_gen_cause.causa" = c(
"diz_frane.diz_cause.causa",
"diz_frane.diz_cause.nome_causa"
)
)
)
library(sf)
library(iffitoR)
library(tmap)
library(tidyverse)
library(glue)
library(GADMTools)
library(mapview)
library(RODBC)
# query the landslide data and its attributes -----------------------------
res = iffitoR::make_shapefile(database_dir = database_dir,
attribute_database_name = "tbl_frane",
# the name without extension
dictionary_database_name = "diz_frane",
shapefile = path_spatial,
# normally null only setting it here for me
# the colums we want to retrieve directly
attri = c("anno_min",
"mese_min",
"giorno_min",
"area"),
# tables to join the description
joins = list(
"tbl_frane.Generalita.Cod_tipo" = c(
"diz_frane.diz_tipo_movi.cod_tipo",
"diz_frane.diz_tipo_movi.tipologia"
),
"tbl_frane.clas_ii_liv.materiale" = c(
"diz_frane.diz_materiali.materiale",
"diz_frane.diz_materiali.nome_materiale"
),
"tbl_frane.clas_ii_liv.movimento" = c(
"diz_frane.diz_movimenti.movimento",
"diz_frane.diz_movimenti.nome_movimento"
),
"tbl_frane.ass_gen_cause.causa" = c(
"diz_frane.diz_cause.causa",
"diz_frane.diz_cause.nome_causa"
)
)
)
# load libraries---------------------------------------------------------------
library(sf)
library(iffitoR)
library(tmap)
library(tidyverse)
library(glue)
library(GADMTools)
library(mapview)
library(RODBC)
# we want the point data
points = T
# which os to automatically set the paths
os = Sys.info()["sysname"]
if(os == "Linux"){
path_ncdf = "/mnt/CEPH_PROJECTS/Proslide/PREC_GRIDS_updated/"
poly_landslide_path = "/mnt/CEPH_PROJECTS/Proslide/Landslides/iffi_db_1821_to_2020/shapefile/IFFI10_4/IFFI10_4.shp"
points_landslide_path = "/mnt/CEPH_PROJECTS/Proslide/Landslides/iffi_db_1821_to_2020/shapefile/IFFI10_1/IFFI10_1.shp"
database_dir = "/mnt/CEPH_PROJECTS/Proslide/Landslides/iffi_db_1821_to_2020/IFFI_access300321/IFFI/"
}else if(os == "Windows"){
path_ncdf = "\\\\projectdata.eurac.edu/projects/Proslide/PREC_GRIDS_updated/"
poly_landslide_path = "\\\\projectdata.eurac.edu/projects/Proslide/Landslides/Iffi_db_xxxx_to_2018/exportperEurac2020/Shapefiles/IFFI10_5.shp"
points_landslide_path = "\\\\projectdata.eurac.edu/projects/Proslide/Landslides/Iffi_db_xxxx_to_2018/exportperEurac2020/Shapefiles/IFFI10_1.shp"
database_dir = "\\\\projectdata.eurac.edu/projects/Proslide/Landslides/Iffi_db_xxxx_to_2018/exportperEurac2020/database"
}else{
stop(call. = F, "what the hell are you working on...")
}
database_dir
list.files(database_dir)
# which shape to read
if(points){
path_spatial = points_landslide_path
}else{
path_spatial = poly_landslide_path
}
path_spatial
# query the landslide data and its attributes -----------------------------
res = iffitoR::make_shapefile(database_dir = database_dir,
attribute_database_name = "tbl_frane",
# the name without extension
dictionary_database_name = "diz_frane",
shapefile = path_spatial,
# normally null only setting it here for me
# the colums we want to retrieve directly
attri = c("anno_min",
"mese_min",
"giorno_min",
"area"),
# tables to join the description
joins = list(
"tbl_frane.Generalita.Cod_tipo" = c(
"diz_frane.diz_tipo_movi.cod_tipo",
"diz_frane.diz_tipo_movi.tipologia"
),
"tbl_frane.clas_ii_liv.materiale" = c(
"diz_frane.diz_materiali.materiale",
"diz_frane.diz_materiali.nome_materiale"
),
"tbl_frane.clas_ii_liv.movimento" = c(
"diz_frane.diz_movimenti.movimento",
"diz_frane.diz_movimenti.nome_movimento"
),
"tbl_frane.ass_gen_cause.causa" = c(
"diz_frane.diz_cause.causa",
"diz_frane.diz_cause.nome_causa"
)
)
)
devtools::build_vignettes()
devtools::build_vignettes()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
os=Sys.info()["sysname"]
os
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
pkgdown::build_site()
# load libraries---------------------------------------------------------------
library(sf)
library(iffitoR)
library(tmap)
library(tidyverse)
library(glue)
library(GADMTools)
library(mapview)
library(RODBC)
# which os to automatically set the paths
os = Sys.info()["sysname"]
# we want the point data
points = T
os
if(os == "Linux"){
path_ncdf = "/mnt/CEPH_PROJECTS/Proslide/PREC_GRIDS_updated/"
poly_landslide_path = "/mnt/CEPH_PROJECTS/Proslide/Landslides/iffi_db_1821_to_2020/shapefile/IFFI10_4/IFFI10_4.shp"
points_landslide_path = "/mnt/CEPH_PROJECTS/Proslide/Landslides/iffi_db_1821_to_2020/shapefile/IFFI10_1/IFFI10_1.shp"
database_dir = "/mnt/CEPH_PROJECTS/Proslide/Landslides/iffi_db_1821_to_2020/IFFI_access300321/IFFI/"
}else if(os == "Windows"){
path_ncdf = "\\\\projectdata.eurac.edu/projects/Proslide/PREC_GRIDS_updated/"
poly_landslide_path = "\\\\projectdata.eurac.edu/projects/Proslide/Landslides/Iffi_db_xxxx_to_2018/exportperEurac2020/Shapefiles/IFFI10_5.shp"
points_landslide_path = "\\\\projectdata.eurac.edu/projects/Proslide/Landslides/Iffi_db_xxxx_to_2018/exportperEurac2020/Shapefiles/IFFI10_1.shp"
database_dir = "\\\\projectdata.eurac.edu/projects/Proslide/Landslides/Iffi_db_xxxx_to_2018/exportperEurac2020/database"
}else{
stop(call. = F, "what the hell are you working on...")
}
# which shape to read
if(points){
path_spatial = points_landslide_path
}else{
path_spatial = poly_landslide_path
}
path_spatial
# query the landslide data and its attributes -----------------------------
res = iffitoR::make_shapefile(database_dir = database_dir,
attribute_database_name = "tbl_frane",
# the name without extension
dictionary_database_name = "diz_frane",
shapefile = path_spatial,
# normally null only setting it here for me
# the colums we want to retrieve directly
attri = c("anno_min",
"mese_min",
"giorno_min",
"area",
"costo_prev_interventi",
"costo_eff_inteventi"),
# tables to join the description
joins = list(
"tbl_frane.Generalita.Cod_tipo" = c(
"diz_frane.diz_tipo_movi.cod_tipo",
"diz_frane.diz_tipo_movi.tipologia"
),
"tbl_frane.clas_ii_liv.materiale" = c(
"diz_frane.diz_materiali.materiale",
"diz_frane.diz_materiali.nome_materiale"
),
"tbl_frane.clas_ii_liv.movimento" = c(
"diz_frane.diz_movimenti.movimento",
"diz_frane.diz_movimenti.nome_movimento"
),
"tbl_frane.ass_gen_cause.causa" = c(
"diz_frane.diz_cause.causa",
"diz_frane.diz_cause.nome_causa"
)
)
)
devtools::load_all()
# load libraries---------------------------------------------------------------
library(sf)
library(iffitoR)
library(tmap)
library(tidyverse)
library(glue)
library(GADMTools)
library(mapview)
library(RODBC)
# we want the point data
points = T
# which os to automatically set the paths
os = Sys.info()["sysname"]
s = Sys.info()$sysname
install.packages("iffitoR")
install.packages("iffitoR")
