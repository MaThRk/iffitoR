table_names_attr = make_vector_table_names(attr_database_conn)
if (!is.null(dictionary_database_name)) {
table_names_dict = make_vector_table_names(dict_database_conn)
}
# create a csv file of the names of the databases
# write_csvs(table_names = table_names, database_dir = database_dir)
# make a list of dataframes(tables) for the attributes database
dfs_attr = make_list_dataframes(attr_database_conn)
# make a list of dataframes(tables) for the dictionary database
if (!is.null(dictionary_database_name)) {
dfs_dict = make_list_dataframes(dict_database_conn)
}
# check for each dataframe if they have an id and subid column
log_vec = check_id(dfs_attr)
# for the rest create the iffi index for the attribute tables
dfs_attr_iffi = create_iffi_index(dfs_attr, log_vec)
# find the tables that we can join directly
tables_to_append_diretly = find_tables(dfs_attr_iffi, attri)
### join those tables
# read the shape
shape = read_shape(shapefile)
shape_joined_attri = join_shape_attributes(shape, tables_to_append_diretly, dfs_attr_iffi)
# make the joins to the dictionary
if (!is.null(dictionary_database_name) | !is.null(joins)) {
joined_dicionary_tables_with_iffi_kodex = join_descriptions(joins, dfs_attr_iffi, dfs_dict)
}
# join them to the shape
if (!is.null(dictionary_database_name) | !is.null(joins)) {
final_joined = join_descriptions_shape(joined_dicionary_tables_with_iffi_kodex, shape_joined_attri)
}
# filter the columns we wanted
final_selected = select_cols(final_joined, attri, joins)
return(final_selected)
}
res_sf = make_shapefile(database_dir = "vignettes/data",
attribute_database_name = "test",
dictionary_database_name = "dic_db",
shape = "vignettes/data/IFFI10_1.shp",
attri=c("anno_min", "mese_min"))
print(res_sf)
res_sf = make_shapefile(database_dir = "vignettes/data",
attribute_database_name = "test",
dictionary_database_name = "dic_db",
shape = "vignettes/data/IFFI10_1.shp",
attri=c("anno_min", "mese_min"))
res_sf = make_shapefile(database_dir = "vignettes/data",
attribute_database_name = "test",
dictionary_database_name = "dic_db",
shape = "vignettes/data/IFFI10_1.shp",
attri=c("anno_min", "mese_min"))
res_sf
class(res_sf)
#' Main Function
#' @import dplyr
#' @import RODBC
#' @import tools
#' @import sf
#' @import stringr
#' @description
#' Generate a shapefile from a given spatial data-object and attributes as
#' produced by a query on the iffi database
#'
#' @return An sf-oject
#'
#' @param database_dir Path to the directory of the databases
#' @param attribute_database_name Name without extension of the attributes database
#' @param dictionary_database_name Name without extension of the dictionary database
#' @param shapefile A shape that cointains the iffi_kodex in a column called PIFF_ID
#' @param attri A vector of attributes to query directly from the attributes database
#' @param join A named list of the tables that need to be joined in order to get the desciptions from the dictionary
#' @export
#' @examples
#' \dontrun{
#'database_dir = "data/database/",
#'attribute_database_name = "tbl_frane",
#'dictionary_database_name = "diz_frane",
#'shapefile = "data/Shapefiles/IFFI10_5.shp",
#'attri = c(
#'   "anno_min",
#'   "anno_max",
#'   "mese_min",
#'   "mese_max",
#'   "giorno_min",
#'   "giorno_max"
#'),
#'joins = list(
#'   "tbl_frane.Geologia.litologia" = c(
#'      "diz_frane.diz_litologie.litologia",
#'      "diz_frane.diz_litologie.nome_litologia"
#'   ),
#'
#'   "tbl_frane.clas_ii_liv.movimento" = c(
#'      "diz_frane.diz_movimenti.movimento",
#'      "diz_frane.diz_movimenti.nome_movimento"
#'   ),
#'   "tbl_frane.Uso_Suolo.uso_suolo" = c(
#'      "diz_frane.diz_usi_suolo.uso_suolo",
#'      "diz_frane.diz_usi_suolo.nome_uso_suolo"
#'   )
#'),
#'plot = FALSE
#')
#'}
make_shapefile = function(database_dir=NULL,
attribute_database_name=NULL,
dictionary_database_name=NULL,
shapefile=NULL,
attri=NULL,
joins=NULL) {
# establish connections
conns = set_connection(database_dir)
# set the right ones
# there are some issues with indexing the list, for some reason we need to index conns with [[]]
# to maintain a valid and open connection
index_attr = which(grepl(attribute_database_name, names(conns)))
if (!is.null(dictionary_database_name)) {
index_dict = which(grepl(dictionary_database_name, names(conns)))
}
attr_database_conn = conns[[index_attr]]
if (!is.null(dictionary_database_name)) {
dict_database_conn = conns[[index_dict]]
}
return(conns)
# the table names are the attributes we can query
# Especially the one in the attributes table are interesting
table_names_attr = make_vector_table_names(attr_database_conn)
if (!is.null(dictionary_database_name)) {
table_names_dict = make_vector_table_names(dict_database_conn)
}
# create a csv file of the names of the databases
# write_csvs(table_names = table_names, database_dir = database_dir)
# make a list of dataframes(tables) for the attributes database
dfs_attr = make_list_dataframes(attr_database_conn)
# make a list of dataframes(tables) for the dictionary database
if (!is.null(dictionary_database_name)) {
dfs_dict = make_list_dataframes(dict_database_conn)
}
# check for each dataframe if they have an id and subid column
log_vec = check_id(dfs_attr)
# for the rest create the iffi index for the attribute tables
dfs_attr_iffi = create_iffi_index(dfs_attr, log_vec)
# find the tables that we can join directly
tables_to_append_diretly = find_tables(dfs_attr_iffi, attri)
### join those tables
# read the shape
shape = read_shape(shapefile)
shape_joined_attri = join_shape_attributes(shape, tables_to_append_diretly, dfs_attr_iffi)
# make the joins to the dictionary
if (!is.null(dictionary_database_name) | !is.null(joins)) {
joined_dicionary_tables_with_iffi_kodex = join_descriptions(joins, dfs_attr_iffi, dfs_dict)
}
# join them to the shape
if (!is.null(dictionary_database_name) | !is.null(joins)) {
final_joined = join_descriptions_shape(joined_dicionary_tables_with_iffi_kodex, shape_joined_attri)
}
# filter the columns we wanted
final_selected = select_cols(final_joined, attri, joins)
return(final_selected)
}
res_sf = make_shapefile(database_dir = "vignettes/data",
attribute_database_name = "test",
dictionary_database_name = "dic_db",
shape = "vignettes/data/IFFI10_1.shp",
attri=c("anno_min", "mese_min"))
devtools::load_all()
rm(list=ls())
devtools::load_all()
res_sf = make_shapefile(database_dir = "vignettes/data",
attribute_database_name = "test",
dictionary_database_name = "dic_db",
shape = "vignettes/data/IFFI10_1.shp",
attri=c("anno_min", "mese_min"))
res_sf = make_shapefile(database_dir = "vignettes/data",
attribute_database_name = "test",
dictionary_database_name = "dic_db",
shape = "vignettes/data/IFFI10_1.shp",
attri=c("anno_min", "mese_min"))
res_sf = make_shapefile(database_dir = "vignettes/data",
attribute_database_name = "test",
dictionary_database_name = "dic_db",
shape = "vignettes/data/IFFI10_1.shp",
attri=c("anno_min", "mese_min"))
print(getwd())
print("Working Directory: ", getwd())
rm(list = ls())
devtools::load_all()
res_sf = make_shapefile(database_dir = "vignettes/data",
attribute_database_name = "test",
dictionary_database_name = "dic_db",
shape = "vignettes/data/IFFI10_1.shp",
attri=c("anno_min", "mese_min"))
rm(list=ls())
devtools::load_all()
res_sf = make_shapefile(database_dir = "vignettes/data",
attribute_database_name = "test",
dictionary_database_name = "dic_db",
shape = "vignettes/data/IFFI10_1.shp",
attri=c("anno_min", "mese_min"))
rm(list=ls())
devtools::load_all()
res_sf = make_shapefile(database_dir = "vignettes/data",
attribute_database_name = "test",
dictionary_database_name = "dic_db",
shape = "vignettes/data/IFFI10_1.shp",
attri=c("anno_min", "mese_min"))
print(paste0("Working Directory: ", getwd()))
dbs = list.files(database_dir, full.names = TRUE)
database_dir = "vignettes/data"
print(paste0("Working Directory: ", getwd()))
dbs = list.files(database_dir, full.names = TRUE)
dbs
print(paste0("Found Databases: ", dbs))
#list all mdb file
databases_found = list.files(database_dir, full.names = TRUE) %>%
grep(".*\\.mdb", ., value = TRUE)
databases_found
print(length(databases_found))
# if it did not find anythgin
if(length(databases_found < 1)) {
stop(call. = F, "No database 'mdb' could be found...")
}
length(databases_found < 1
length(databases_found) < 1)
length(databases_found) < 1
rm(list=ls())
devtools::load_all()
res_sf = make_shapefile(database_dir = "vignettes/data",
attribute_database_name = "test",
dictionary_database_name = "dic_db",
shape = "vignettes/data/IFFI10_1.shp",
attri=c("anno_min", "mese_min"))
rm(list=ls())
devtools::load_all()
res_sf = make_shapefile(database_dir = "vignettes/data",
attribute_database_name = "test",
dictionary_database_name = "dic_db",
shape = "vignettes/data/IFFI10_1.shp",
attri=c("anno_min", "mese_min"))
res_sf
res_sf = make_shapefile(database_dir = "vignettes/data",
attribute_database_name = "test",
dictionary_database_name = "dic_db",
shape = "vignettes/data/IFFI10_1.shp",
attri=c("anno_min", "mese_min"))
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(iffitoR)
library(RODBC)
library(dplyr)
library(tools)
library(stringr)
library(sf)
print(getwd())
res_sf = make_shapefile(database_dir = "vignettes/data",
attribute_database_name = "test",
dictionary_database_name = "dic_db",
shape = "vignettes/data/IFFI10_1.shp",
attri=c("anno_min", "mese_min"))
res_sf = make_shapefile(database_dir = "vignettes/data",
attribute_database_name = "test",
dictionary_database_name = "dic_db",
shape = "vignettes/data/IFFI10_1.shp",
attri=c("anno_min", "mese_min"))
res_sf = make_shapefile(database_dir = "data",
attribute_database_name = "test",
dictionary_database_name = "dic_db",
shape = "data/IFFI10_1.shp",
attri=c("anno_min", "mese_min"))
res_sf = make_shapefile(database_dir = "data/",
attribute_database_name = "test",
dictionary_database_name = "dic_db",
shape = "data/IFFI10_1.shp",
attri=c("anno_min", "mese_min"))
make_shapefile = function(database_dir=NULL,
attribute_database_name=NULL,
dictionary_database_name=NULL,
shapefile=NULL,
attri=NULL,
joins=NULL) {
# establish connections
conns = set_connection(database_dir)
# set the right ones
# there are some issues with indexing the list, for some reason we need to index conns with [[]]
# to maintain a valid and open connection
index_attr = which(grepl(attribute_database_name, names(conns)))
if (!is.null(dictionary_database_name)) {
index_dict = which(grepl(dictionary_database_name, names(conns)))
}
attr_database_conn = conns[[index_attr]]
if (!is.null(dictionary_database_name)) {
dict_database_conn = conns[[index_dict]]
}
return(conns)
# the table names are the attributes we can query
# Especially the one in the attributes table are interesting
table_names_attr = make_vector_table_names(attr_database_conn)
if (!is.null(dictionary_database_name)) {
table_names_dict = make_vector_table_names(dict_database_conn)
}
# create a csv file of the names of the databases
# write_csvs(table_names = table_names, database_dir = database_dir)
# make a list of dataframes(tables) for the attributes database
dfs_attr = make_list_dataframes(attr_database_conn)
# make a list of dataframes(tables) for the dictionary database
if (!is.null(dictionary_database_name)) {
dfs_dict = make_list_dataframes(dict_database_conn)
}
# check for each dataframe if they have an id and subid column
log_vec = check_id(dfs_attr)
# for the rest create the iffi index for the attribute tables
dfs_attr_iffi = create_iffi_index(dfs_attr, log_vec)
# find the tables that we can join directly
tables_to_append_diretly = find_tables(dfs_attr_iffi, attri)
### join those tables
# read the shape
shape = read_shape(shapefile)
shape_joined_attri = join_shape_attributes(shape, tables_to_append_diretly, dfs_attr_iffi)
# make the joins to the dictionary
if (!is.null(dictionary_database_name) | !is.null(joins)) {
joined_dicionary_tables_with_iffi_kodex = join_descriptions(joins, dfs_attr_iffi, dfs_dict)
}
# join them to the shape
if (!is.null(dictionary_database_name) | !is.null(joins)) {
final_joined = join_descriptions_shape(joined_dicionary_tables_with_iffi_kodex, shape_joined_attri)
}
# filter the columns we wanted
final_selected = select_cols(final_joined, attri, joins)
return(final_selected)
}
res_sf = make_shapefile(database_dir = "data/",
attribute_database_name = "test",
dictionary_database_name = "dic_db",
shape = "data/IFFI10_1.shp",
attri=c("anno_min", "mese_min"))
devtools::load_all()
res_sf = make_shapefile(database_dir = "data/",
attribute_database_name = "test",
dictionary_database_name = "dic_db",
shape = "data/IFFI10_1.shp",
attri=c("anno_min", "mese_min"))
res_sf = make_shapefile(database_dir = "vignettes/data/",
attribute_database_name = "test",
dictionary_database_name = "dic_db",
shape = "vignettes/data/IFFI10_1.shp",
attri=c("anno_min", "mese_min"))
res_sf
res_sf = make_shapefile(database_dir = "vignettes/data/",
attribute_database_name = "test",
dictionary_database_name = "dic_db",
shape = "vignettes/data/IFFI10_1.shp",
attri=c("anno_min", "mese_min"))
rm(list=ls())
devtools::load_all()
res_sf = make_shapefile(database_dir = "vignettes/data/",
attribute_database_name = "test",
dictionary_database_name = "dic_db",
shape = "vignettes/data/IFFI10_1.shp",
attri=c("anno_min", "mese_min"))
res_sf
res_sf = make_shapefile(database_dir = "vignettes/data/",
attribute_database_name = "test",
dictionary_database_name = "dic_db",
shape = "vignettes/data/IFFI10_1.shp",
attri=c("anno_min", "mese_min"))
res_sf = make_shapefile(database_dir = "vignettes/data/",
attribute_database_name = "test",
dictionary_database_name = "dic_db",
shape = "vignettes/data/IFFI10_1.shp",
attri=c("anno_min", "mese_min"))
library(iffitoR)
res_sf = make_shapefile(database_dir = "vignettes/data/",
attribute_database_name = "test",
dictionary_database_name = "dic_db",
shape = "vignettes/data/IFFI10_1.shp",
attri=c("anno_min", "mese_min"))
res_sf = make_shapefile(database_dir = "vignettes/data/",
attribute_database_name = "test",
dictionary_database_name = ".",
shape = "vignettes/data/IFFI10_1.shp",
attri=c("anno_min", "mese_min"))
res_sf = make_shapefile(database_dir = "vignettes/data/",
attribute_database_name = "test",
dictionary_database_name = "dic_db",
shape = "vignettes/data/IFFI10_1.shp",
attri=c("anno_min", "mese_min"))
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(iffitoR)
library(RODBC)
library(dplyr)
library(tools)
library(stringr)
library(sf)
res_sf = make_shapefile(database_dir = "vignettes/data/",
attribute_database_name = "test",
dictionary_database_name = ".",
shape = "vignettes/data/IFFI10_1.shp",
attri=c("anno_min", "mese_min"))
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(iffitoR)
library(RODBC)
library(dplyr)
library(tools)
library(stringr)
library(sf)
res_sf = make_shapefile(database_dir = "vignettes/data/",
attribute_database_name = "test",
dictionary_database_name = "dic_db",
shape = "vignettes/data/IFFI10_1.shp",
attri=c("anno_min", "mese_min"))
remove.packages("iffitoR")
devtools::install_github("RobinKohrs/iffitoR")
library(iffitoR)
res = iffitoR::make_shapefile(database_dir = "vignettes/data/", attribute_database_name = "test", dictionary_database_name = "dic_db", shapefile = "vignettes/data/IFFI10_1.shp", attri = c("anno_min", "mese_min"))
class(res)
plot(res)
head(res)
pkgdown::build_site()
rm(list=ls())
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
rm(list = ls())
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
library(iffitoR)
library(RODBC)
library(dplyr)
library(tools)
library(stringr)
library(sf)
res_sf = make_shapefile(database_dir = "vignettes/data/",
attribute_database_name = "test",
dictionary_database_name = "dic_db",
shape = "vignettes/data/IFFI10_1.shp",
attri=c("anno_min", "mese_min"))
library(ggplot2)
names(res_sf)
nrow(res_sf)
res_gg = ggplot(res_sf) +
geom_sf(aes(color=anno_min)) +
scale_color_continuous(low="white", high="darkgreen")
res_gg
res_sf %>% filter(anno_min > 1990)
res_gg = ggplot(res_sf) +
geom_sf(aes(color=anno_min)) +
scale_color_continuous(low="white", high="darkgreen", na.value="grey")
res_gg
res_sf = res_sf %>% filter(anno_min > 2000)
res_gg = ggplot(res_sf) +
geom_sf(aes(color=anno_min)) +
scale_color_continuous(low="white", high="darkgreen", na.value="grey")
res_gg
res_gg = ggplot(res_sf) +
geom_sf(aes(color=anno_min)) +
scale_color_continuous(low="white", high="darkgreen", na.value="grey", Name="Year")
res_gg
res_gg = ggplot(res_sf) +
geom_sf(aes(color=anno_min)) +
scale_color_continuous(low="white", high="darkgreen", na.value="grey", name="Year")
res_gg
res_gg = ggplot(res_sf) +
geom_sf(aes(color=anno_min)) +
scale_color_continuous(low="white", high="darkgreen", na.value="grey", name="Year") +
scale_colour_manual(values=NA) +
guides(colour=guide_legend("No data", override.aes = list(colour="grey")))
res_gg
res_gg = ggplot(res_sf) +
geom_sf(aes(color=anno_min)) +
scale_color_continuous(low="white", high="darkgreen", na.value="grey", name="Year") +
scale_colour_manual(values=NA) +
guides(colour=guide_legend("No data", override.aes = list(colour="grey")))
res_gg = ggplot(res_sf) +
geom_sf(aes(color=anno_min)) +
scale_color_continuous(low="white", high="darkgreen", na.value="grey", Name="Year")
res_gg
res_gg = ggplot(res_sf) +
geom_sf(aes(color=anno_min)) +
scale_color_continuous(low="white", high="darkgreen", na.value="grey", Name="Year")
res_gg
library(ggplot2)
res_sf = res_sf %>% filter(anno_min > 2000)
res_gg = ggplot(res_sf) +
geom_sf(aes(color=anno_min)) +
scale_color_continuous(low="white", high="darkgreen", na.value="grey", Name="Year")
library(ggplot2)
res_sf = res_sf %>% filter(anno_min > 2000)
res_gg = ggplot(res_sf) +
geom_sf(aes(color=anno_min)) +
scale_color_continuous(low="white", high="darkgreen", na.value="grey")
res_gg
res_gg = ggplot(res_sf) +
geom_sf(aes(color=anno_min)) +
scale_color_continuous(low="white", high="darkgreen", na.value="grey", name="year")
res_gg
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
devtools::build_vignettes()
pkgdown::build_site()
