true = "month",
false = if_else(year_present, true = "year", false =
"no date")
)
))
View(res2)
res
library(iffitoR)
rm(list=ls())
library(iffitoR)
library(tidyverse)
res
res1 = res %>%
mutate(
year_present = ifelse(anno_min, TRUE, FALSE),
month_present = ifelse(mese_min, TRUE, FALSE),
day_present = ifelse(giorno_min, TRUE, FALSE)
)
View(res1)
res2 = res1 %>%
mutate(date_info = if_else(
day_present,
true = "day",
false = if_else(
month_present,
true = "month",
false = if_else(year_present, true = "year", false =
"no date")
)
))
View(res2)
res
get_date_information = function(res) {
res = res %>%
mutate(
year_present = if_else(!is.na(anno_min), true = TRUE, false = FALSE),
month_present = if_else(!is.na(mese_min), true = TRUE, false = FALSE),
day_present = if_else(!is.na(giorno_min), true = TRUE, false = FALSE)
)
res = res %>%
mutate(date_info = if_else(
day_present,
true = "day",
false = if_else(
month_present,
true = "month",
false = if_else(year_present, true = "year", false =
"no date")
)))
return(res)
}
df = get_date_information(res)
View(df)
get_date_information = function(res) {
res = res %>%
mutate(
year_present = if_else(!is.na(anno_min), true = TRUE, false = FALSE),
month_present = if_else(!is.na(mese_min), true = TRUE, false = FALSE),
day_present = if_else(!is.na(giorno_min), true = TRUE, false = FALSE)
)
res = res %>%
mutate(date_info = if_else(
day_present,
true = "day",
false = if_else(
month_present,
true = "month",
false = if_else(year_present, true = "year", false =
"no date")
)))
res = res %>% mutate(date = paste(anno_min, mese_min, giorno_min, sep = "/")) %>%
mutate(date = as.Date(date),
year.int = anno_min, # year as int
year.posix = as.Date(paste0(anno_min, "-01-01")))
return(res)
}
View(df)
df = get_date_information(res)
devtools::load_all()
?get_date_information
devtools::document()
?get_date_information
devtools::document()
?get_date_information
devtools::document()
?get_date_information
devtools::document()
?get_date_information
devtools::document()
devtools::load_all()
res
r = get_date_information(res)
View(r)
res
res %>% select(-c(anno_min))
devtools::load_all()
get_date_information
detach("iffitoR")
detach(name="iffitoR")
?detach
detach(package:iffitoR)
devtools::load_all()
get_date_information
devtools::load_all()
rm(list=c("get_date_information"))
devtools::load_all()
get_date_information()
get_date_information(
get_date_information
r = get_date_information(res) %>% View()
file.edit("local_tests/iffi_data_shiny/app.R")
library(shiny)
shiny::runApp()
shiny::runApp(appdir="local_tests/iffi_data_shiny/")
shiny::runApp(appdir="local_tests/iffi_data_shiny/")
shiny::runApp(appDir="local_tests/iffi_data_shiny/")
shiny::runApp(appDir="local_tests/iffi_data_shiny/")
shiny::runApp(appDir="local_tests/iffi_data_shiny/")
shiny::runApp(appDir="local_tests/iffi_data_shiny/")
file.edit("NAMESPACE")
res
devtools::load_all()
get_date_information(res)
a = get_date_information(res)
cat("Added the columns: date_info (year, month, day, no date)\n")
cat("Added the columns: date_info (year, month, day, no date)\n sd")
cat("Added the columns: date_info (year, month, day, no date)\nsd")
as.Date("2020-01-01")
a = as.Date("2020-01-01")
class(a)
cat("Added the columns:\n date_info (character-string indicting if - year, month, day, no date - is present)\n date (")
cat("Added the columns:\n date_info - chr - (character-string indicting if) year, month, day, no date - is present)\n date (")
a
res
df = get_date_information(res)
df
r = df$year.int[[1]]
r
class(r)
cat("Added the columns:\n date_info - chr - (eiher 'year', 'month', 'day' or 'no date')\n year.int - integer ")
cat("Added the columns:\n date_info (chr) - (eiher 'year', 'month', 'day' or 'no date')\n year.int - integer ")
cat("Added the columns:\n date_info (chr) - (eiher 'year', 'month', 'day' or 'no date')\n year.int (integer)
month.int")
cat("Added the columns:\n date_info (chr) - (eiher 'year', 'month', 'day' or 'no date')\n year.int (integer)
month.int")
cat("Added the columns:\n date_info (chr) - (eiher 'year', 'month', 'day' or 'no date')\n year.int (integer)
month.int")
cat("Added the columns:\n date_info (chr) - (eiher 'year', 'month', 'day' or 'no date')\n year.int (integer)
month.int")
cat("Added the columns:\n\n date_info (chr) - (eiher 'year', 'month', 'day' or 'no date')\n year.int (integer)
month.int")
cat("Added the columns:\n\n date_info (chr) - (eiher 'year', 'month', 'day' or 'no date')\n year.int (integer)
month.int (integer)
day.int (integer)
year.posix (date) (object of class date, referenced to the 1st of January of the year")
print("Added the columns:\n\n date_info (chr) - (eiher 'year', 'month', 'day' or 'no date')\n year.int (integer)
month.int (integer)
day.int (integer)
year.posix (date) (object of class date, referenced to the 1st of January of the year)")
message("Added the columns:\n\n date_info (chr) - (eiher 'year', 'month', 'day' or 'no date')\n year.int (integer)
month.int (integer)
day.int (integer)
year.posix (date) (object of class date, referenced to the 1st of January of the year)")
devtools::load_all()
a = get_date_information(res)
devtools::load_all()
a = get_date_information(res)
devtools::load_all()
a = get_date_information(res)
devtools::load_all()
a = get_date_information(res)
.libPaths()
library(iffitoR)
devtools::load_all()
get_date_information
library(shiny)
library(tidyverse)
library(sf)
library(GADMTools)
library(plotly)
library(leaflet)
library(leaflet.extras)
shiny::runApp("local_tests/iffi_data_shiny/")
shiny::runApp("local_tests/iffi_data_shiny/")
shiny::runApp("local_tests/iffi_data_shiny/")
librar
library(shiny)
shiny::runApp("local_tests/iffi_data_shiny/")
res
names(res)
!"hi" %in% names(df)
!"anno_min|there" %in% names(df)
devtools::load_all()
res
res %>% select(tipologia)
a = res %>% select(tipologia)
translate_iffi(a)
# do some checking
if(!"anno_min|mese_min|giorno_min|tipolgoia|nome_movimento" %in% names(df)){
stop("the necessary columns are'n present in the dataframe provided")
}
a = res %>% select(-nome_movimento)
names(a)
iffitoR::translate_iffi(a)
devtools::load_all()
iffitoR::translate_iffi(a)
?landsld
# we want the point data
points = T
# which os to automatically set the paths
os = Sys.info()["sysname"]
if(os == "Linux"){
path_ncdf = "/mnt/CEPH_PROJECTS/Proslide/PREC_GRIDS_updated/"
poly_landslide_path = "/mnt/CEPH_PROJECTS/Proslide/Landslides/Iffi_db_xxxx_to_2018/exportperEurac2020/Shapefiles/IFFI10_5.shp"
points_landslide_path = "/mnt/CEPH_PROJECTS/Proslide/Landslides/Iffi_db_xxxx_to_2018/exportperEurac2020/Shapefiles/IFFI10_1.shp"
database_dir = "/mnt/CEPH_PROJECTS/Proslide/Landslides/Iffi_db_xxxx_to_2018/exportperEurac2020/database"
}else if(os == "Windows"){
path_ncdf = "\\\\projectdata.eurac.edu/projects/Proslide/PREC_GRIDS_updated/"
poly_landslide_path = "\\\\projectdata.eurac.edu/projects/Proslide/Landslides/Iffi_db_xxxx_to_2018/exportperEurac2020/Shapefiles/IFFI10_5.shp"
points_landslide_path = "\\\\projectdata.eurac.edu/projects/Proslide/Landslides/Iffi_db_xxxx_to_2018/exportperEurac2020/Shapefiles/IFFI10_1.shp"
database_dir = "\\\\projectdata.eurac.edu/projects/Proslide/Landslides/Iffi_db_xxxx_to_2018/exportperEurac2020/database"
}else{
stop(call. = F, "what the hell are you working on...")
}
# which shape to read
if(points){
path_spatial = points_landslide_path
}else{
path_spatial = poly_landslide_path
}
res = iffitoR::make_shapefile(database_dir = database_dir,
attribute_database_name = "tbl_frane",
# the name without extension
dictionary_database_name = "diz_frane",
shapefile = path_spatial,
# normally null only setting it here for me
# the colums we want to retrieve directly
attri = c("anno_min",
"mese_min",
"giorno_min",
"area"),
# tables to join the description
joins = list(
"tbl_frane.Generalita.Cod_tipo" = c(
"diz_frane.diz_tipo_movi.cod_tipo",
"diz_frane.diz_tipo_movi.tipologia"
),
"tbl_frane.clas_ii_liv.movimento" = c(
"diz_frane.diz_movimenti.movimento",
"diz_frane.diz_movimenti.nome_movimento"
),
"tbl_frane.ass_gen_cause.causa" = c(
"diz_frane.diz_cause.causa",
"diz_frane.diz_cause.nome_causa"
)
)
)
# translate it to english
res_engl = iffitoR::translate_iffi(res)
# translate it to english
res_engl = iffitoR::translate_iffi(res)
# translate it to english
res_engl = iffitoR::translate_iffi(res)
names(res)
devtools::load_all()
# translate it to english
res_engl = iffitoR::translate_iffi(res)
res_engl
res_time = iffitoR::get_date_information(res_engl)
usethis::use_data(landsld, overwrite = T)
landsld = iffitoR::get_date_information(res_engl)
usethis::use_data(landsld, overwrite = T)
devtools::load_all()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::load_all()
res = make_shapefile(database_dir = database_dir,
attribute_database_name = "tbl_frane",
# the name without extension
dictionary_database_name = "diz_frane",
shapefile = path_spatial,
# normally null only setting it here for me
# the colums we want to retrieve directly
attri = c("anno_min",
"mese_min",
"giorno_min",
"area"),
# tables to join the description
joins = list(
"tbl_frane.Generalita.Cod_tipo" = c(
"diz_frane.diz_tipo_movi.cod_tipo",
"diz_frane.diz_tipo_movi.tipologia"
),
"tbl_frane.clas_ii_liv.movimento" = c(
"diz_frane.diz_movimenti.movimento",
"diz_frane.diz_movimenti.nome_movimento"
),
"tbl_frane.ass_gen_cause.causa" = c(
"diz_frane.diz_cause.causa",
"diz_frane.diz_cause.nome_causa"
)
)
)
devtools::document()
res = make_shapefile(database_dir = database_dir,
attribute_database_name = "tbl_frane",
# the name without extension
dictionary_database_name = "diz_frane",
shapefile = path_spatial,
# normally null only setting it here for me
# the colums we want to retrieve directly
attri = c("anno_min",
"mese_min",
"giorno_min",
"area"),
# tables to join the description
joins = list(
"tbl_frane.Generalita.Cod_tipo" = c(
"diz_frane.diz_tipo_movi.cod_tipo",
"diz_frane.diz_tipo_movi.tipologia"
),
"tbl_frane.clas_ii_liv.movimento" = c(
"diz_frane.diz_movimenti.movimento",
"diz_frane.diz_movimenti.nome_movimento"
),
"tbl_frane.ass_gen_cause.causa" = c(
"diz_frane.diz_cause.causa",
"diz_frane.diz_cause.nome_causa"
)
)
)
devtools
devtools::document()
res = make_shapefile(database_dir = database_dir,
attribute_database_name = "tbl_frane",
# the name without extension
dictionary_database_name = "diz_frane",
shapefile = path_spatial,
# normally null only setting it here for me
# the colums we want to retrieve directly
attri = c("anno_min",
"mese_min",
"giorno_min",
"area"),
# tables to join the description
joins = list(
"tbl_frane.Generalita.Cod_tipo" = c(
"diz_frane.diz_tipo_movi.cod_tipo",
"diz_frane.diz_tipo_movi.tipologia"
),
"tbl_frane.clas_ii_liv.movimento" = c(
"diz_frane.diz_movimenti.movimento",
"diz_frane.diz_movimenti.nome_movimento"
),
"tbl_frane.ass_gen_cause.causa" = c(
"diz_frane.diz_cause.causa",
"diz_frane.diz_cause.nome_causa"
)
)
)
devtools::document()
res = make_shapefile(database_dir = database_dir,
attribute_database_name = "tbl_frane",
# the name without extension
dictionary_database_name = "diz_frane",
shapefile = path_spatial,
# normally null only setting it here for me
# the colums we want to retrieve directly
attri = c("anno_min",
"mese_min",
"giorno_min",
"area"),
# tables to join the description
joins = list(
"tbl_frane.Generalita.Cod_tipo" = c(
"diz_frane.diz_tipo_movi.cod_tipo",
"diz_frane.diz_tipo_movi.tipologia"
),
"tbl_frane.clas_ii_liv.movimento" = c(
"diz_frane.diz_movimenti.movimento",
"diz_frane.diz_movimenti.nome_movimento"
),
"tbl_frane.ass_gen_cause.causa" = c(
"diz_frane.diz_cause.causa",
"diz_frane.diz_cause.nome_causa"
)
)
)
res
devtools::load_all()
res = translate_iffi(res)
names(res)
translate_iffi
translate_iffi(res)
names(res)
!"anno_min|mese_min|giorno_min|tipologia|nome_movimento" %in% names(res)
!"anno_min|mese_min" %in% names(res)
!"anno_min" %in% names(res)
grepl("anno_min|mese_min", names(res))
any()repl("anno_min|mese_min", names(res))
any(repl("anno_min|mese_min", names(res)))
any(grepl("anno_min|mese_min", names(res)))
df
df = res
df
!any(grepl("anno_min|mese_min|giorno_min|tipologia|nome_movimento", names(df)))
devtools::load_all()
ls
res
devtools::document()
# load libraries---------------------------------------------------------------
library(sf)
library(iffitoR)
library(tmap)
library(tidyverse)
library(glue)
library(GADMTools)
library(mapview)
# we want the point data
points = T
# which os to automatically set the paths
os = Sys.info()["sysname"]
if(os == "Linux"){
path_ncdf = "/mnt/CEPH_PROJECTS/Proslide/PREC_GRIDS_updated/"
poly_landslide_path = "/mnt/CEPH_PROJECTS/Proslide/Landslides/Iffi_db_xxxx_to_2018/exportperEurac2020/Shapefiles/IFFI10_5.shp"
points_landslide_path = "/mnt/CEPH_PROJECTS/Proslide/Landslides/Iffi_db_xxxx_to_2018/exportperEurac2020/Shapefiles/IFFI10_1.shp"
database_dir = "/mnt/CEPH_PROJECTS/Proslide/Landslides/Iffi_db_xxxx_to_2018/exportperEurac2020/database"
}else if(os == "Windows"){
path_ncdf = "\\\\projectdata.eurac.edu/projects/Proslide/PREC_GRIDS_updated/"
poly_landslide_path = "\\\\projectdata.eurac.edu/projects/Proslide/Landslides/Iffi_db_xxxx_to_2018/exportperEurac2020/Shapefiles/IFFI10_5.shp"
points_landslide_path = "\\\\projectdata.eurac.edu/projects/Proslide/Landslides/Iffi_db_xxxx_to_2018/exportperEurac2020/Shapefiles/IFFI10_1.shp"
database_dir = "\\\\projectdata.eurac.edu/projects/Proslide/Landslides/Iffi_db_xxxx_to_2018/exportperEurac2020/database"
}else{
stop(call. = F, "what the hell are you working on...")
}
# which shape to read
if(points){
path_spatial = points_landslide_path
}else{
path_spatial = poly_landslide_path
}
res = iffitoR::make_shapefile(database_dir = database_dir,
attribute_database_name = "tbl_frane",
# the name without extension
dictionary_database_name = "diz_frane",
shapefile = path_spatial,
# normally null only setting it here for me
# the colums we want to retrieve directly
attri = c("anno_min",
"mese_min",
"giorno_min",
"area"),
# tables to join the description
joins = list(
"tbl_frane.Generalita.Cod_tipo" = c(
"diz_frane.diz_tipo_movi.cod_tipo",
"diz_frane.diz_tipo_movi.tipologia"
),
"tbl_frane.clas_ii_liv.movimento" = c(
"diz_frane.diz_movimenti.movimento",
"diz_frane.diz_movimenti.nome_movimento"
),
"tbl_frane.ass_gen_cause.causa" = c(
"diz_frane.diz_cause.causa",
"diz_frane.diz_cause.nome_causa"
)
)
)
res = iffitoR::make_shapefile(database_dir = database_dir,
attribute_database_name = "tbl_frane",
# the name without extension
dictionary_database_name = "diz_frane",
shapefile = path_spatial,
# normally null only setting it here for me
# the colums we want to retrieve directly
attri = c("anno_min",
"mese_min",
"giorno_min",
"area"),
# tables to join the description
joins = list(
"tbl_frane.Generalita.Cod_tipo" = c(
"diz_frane.diz_tipo_movi.cod_tipo",
"diz_frane.diz_tipo_movi.tipologia"
),
"tbl_frane.clas_ii_liv.movimento" = c(
"diz_frane.diz_movimenti.movimento",
"diz_frane.diz_movimenti.nome_movimento"
),
"tbl_frane.ass_gen_cause.causa" = c(
"diz_frane.diz_cause.causa",
"diz_frane.diz_cause.nome_causa"
)
)
)
res
# translate to english
res_eng = iffitoR::translate_iffi(res)
# add time information
landsld = iffitoR::get_date_information(res_eng)
# save it
usethis::use_data(landsld, overwrite = T)
?remove.packages
load("data/landsld.rda")
landsld
dim(landsld)
