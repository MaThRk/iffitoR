dictionary_database_name = "diz_frane",
shapefile = path_spatial,
# normally null only setting it here for me
# the colums we want to retrieve directly
attri = c("anno_min",
"mese_min",
"giorno_min",
"area"),
# tables to join the description
joins = list(
"tbl_frane.Generalita.Cod_tipo" = c(
"diz_frane.diz_tipo_movi.cod_tipo",
"diz_frane.diz_tipo_movi.tipologia"
),
"tbl_frane.clas_ii_liv.materiale" = c(
"diz_frane.diz_materiali.materiale",
"diz_frane.diz_materiali.nome_materiale"
),
"tbl_frane.clas_ii_liv.movimento" = c(
"diz_frane.diz_movimenti.movimento",
"diz_frane.diz_movimenti.nome_movimento"
),
"tbl_frane.ass_gen_cause.causa" = c(
"diz_frane.diz_cause.causa",
"diz_frane.diz_cause.nome_causa"
)
)
)
dim(res)
# query the landslide data and its attributes -----------------------------
res = iffitoR::make_shapefile(
database_dir = "../../iffi_raw_daniel/export_06042021/IFFI/IFFI/",
attribute_database_name = "tbl_frane",
# the name without extension
dictionary_database_name = "diz_frane",
shapefile = path_spatial,
# normally null only setting it here for me
# the colums we want to retrieve directly
attri = c("anno_min",
"mese_min",
"giorno_min",
"area"),
joins = list(
"tbl_frane.Geologia.litologia"                 = c(
"diz_frane.diz_litologie.litologia",
"diz_frane.diz_litologie.nome_litologia"
),
"tbl_frane.clas_ii_liv.movimento"              = c(
"diz_frane.diz_movimenti.movimento",
"diz_frane.diz_movimenti.nome_movimento"
),
"tbl_frane.Uso_Suolo.uso_suolo"                = c(
"diz_frane.diz_usi_suolo.uso_suolo",
"diz_frane.diz_usi_suolo.nome_uso_suolo"
),
"tbl_frane.ass_gen_cause.causa"                = c(
"diz_frane.diz_cause.causa",
"diz_frane.diz_cause.nome_causa"
),
"tbl_frane.Attivita.stile"                     = c(
"diz_frane.diz_stile.stile",
"diz_frane.diz_stile.nome_stile"
),
"tbl_frane.clas_ii_liv.materiale"              = c(
"diz_frane.diz_materiali.materiale",
"diz_frane.diz_materiali.nome_materiale"
),
"tbl_frane.Generalita.Cod_tipo"                = c(
"diz_frane.diz_tipo_movi.cod_tipo",
"diz_frane.diz_tipo_movi.tipologia"
),
"tbl_frane.clas_ii_liv.acqua"                  = c(
"diz_frane.diz_acqua.acqua",
"diz_frane.diz_acqua.nome_acqua"
),
"tbl_frane.clas_ii_liv.velocita"               = c(
"diz_frane.diz_velocita.velocita",
"diz_frane.diz_velocita.nome_velocita"
),
"tbl_frane.ass_gen_cause.causa"                = c(
"diz_frane.diz_cause.causa",
"diz_frane.diz_gruppi_cause.gruppo_cause"
),
"tbl_frane.Attivita.stato"                     = c(
"diz_frane.diz_stati.stato",
"diz_frane.diz_stati.nome_stato"
),
"tbl_frane.Generalita.Cod_tipo"                = c(
"diz_frane.diz_pendii.tipo_pendio",
"diz_frane.diz_pendii.nome_pendio"
),
"tbl_frane.ass_gen_metodo.codmetodo"           = c(
"diz_frane.diz_metodo.codmetodo",
"diz_frane.diz_metodo.descrizione"
),
"tbl_frane.Geologia.litotecnica"               = c(
"diz_frane.diz_litotecniche.litotecnica",
"diz_frane.diz_litotecniche.nome_litotecnica"
),
"tbl_frane.ass_gen_elementi_rischio.element"   = c(
"diz_frane.diz_elementi_rischio.element",
"diz_frane.diz_elementi_rischio.nome_elemento"
)
)
)
dim(res)
names(res)
unique(res$nome_elemento)
# translate to english
res_eng = iffitoR::translate_iffi(res)
# add time information
landsld = iffitoR::get_date_information(res_eng)
landsld = landsld %>% st_transform(., 32632)
# save it
usethis::use_data(landsld, overwrite = T)
library(iffitoR)
library(plotly)
library(plotly)
library(glue)
library(RODBC)
library(forcats)
library(dplyr)
library(ggplot2)
library(tools)
library(stringr)
library(sf)
joins = list(
"tbl_frane.Geologia.litologia" = c(
"diz_frane.diz_litologie.litologia",
"diz_frane.diz_litologie.nome_litologia"
),
"tbl_frane.clas_ii_liv.movimento" = c(
"diz_frane.diz_movimenti.movimento",
"diz_frane.diz_movimenti.nome_movimento"
),
"tbl_frane.Generalita.Cod_tipo" = c(
"diz_frane.diz_tipo_movi.cod_tipo",
"diz_frane.diz_tipo_movi.tipologia"
)
)
library(iffitoR)
library(lubridate)
library(stringr)
library(leaflet.extras)
library(sf)
library(leaflet)
library(dplyr)
library(ggplot2)
library(glue)
library(forcats)
data_iffi %>%
filter(str_detect(second_level, "translational")) %>%
count(date, sort=T)
data_iffi = landsld
data_iffi %>%
filter(str_detect(second_level, "translational")) %>%
count(date, sort=T)
dat = data_iffi %>%
filter(date == as.Date("2020-12-06")) %>%
st_transform(4326)
# the color palette for the categorical data
cf = colorFactor(palette = "RdYlBu", domain=dat$second_level)
sl = unique(dat$second_level)
map = leaflet(dat) %>%
addProviderTiles(providers$Stamen.TonerLite)
for (g in sl) {
d = dat %>% filter(second_level == g)
map = map %>% addCircles(
data = d,
popup = paste0("date: ", d$date, "<br>", "type:", d$second_level),
color =  ~ cf(d$second_level),
group = g
)
}
map %>% addLayersControl(overlayGroups = sl)
map %>% addLayersControl(overlayGroups = sl)
data_iffi %>%
filter(date_info == "day") %>%
filter(str_detect(second_level, "translational")) %>%
mutate(week = paste0(year.int, formatC(week(date), flag=0, width=2))) %>%
count(week, sort=T) %>%
mutate(first_day_of_week = as.Date(paste0(week, 1), "%Y%U%u")) %>%
mutate(week = glue("{week}  ({n})")) %>%
mutate(week = fct_reorder(week, n)) %>%
mutate(ishighlight = ifelse(n == 9, TRUE, FALSE)) %>%
head(n = 12) %>%
ggplot() +
geom_col(aes(x=n, y=week, fill=ishighlight)) +
scale_fill_manual(values = c("grey", "darkred"), guide=F) +
theme_light() +
labs(x = "# of events per week",
y = "Week",
title = "Weeks with highest number of Slides")
data_iffi %>%
filter(date_info == "day") %>%
filter(str_detect(second_level, "translational")) %>%
mutate(week = paste0(year.int, formatC(week(date), flag=0, width=2))) %>%
count(week, sort=T) %>%
mutate(first_day_of_week = as.Date(paste0(week, 1), "%Y%U%u"))
data_iffi %>%
filter(date_info == "day") %>%
filter(str_detect(second_level, "translational")) %>%
mutate(week = paste0(year.int, formatC(week(date), flag=0, width=2))) %>%
count(week, sort=T) %>%
mutate(first_day_of_week = as.Date(paste0(week, 1), "%Y%U%u")) %>%
mutate(week = glue("{week}  ({n})")) %>%
mutate(week = fct_reorder(week, n))
data_iffi %>%
filter(date_info == "day") %>%
filter(str_detect(second_level, "translational")) %>%
mutate(week = paste0(year.int, formatC(week(date), flag=0, width=2))) %>%
count(week, sort=T) %>%
mutate(first_day_of_week = as.Date(paste0(week, 1), "%Y%U%u")) %>%
mutate(week = glue("{first_day_of_week}  ({n})")) %>%
mutate(week = fct_reorder(week, n)) %>%
mutate(ishighlight = ifelse(n == 9, TRUE, FALSE)) %>%
head(n = 12)
data_iffi %>%
filter(date_info == "day") %>%
filter(str_detect(second_level, "translational")) %>%
mutate(week = paste0(year.int, formatC(week(date), flag=0, width=2))) %>%
count(week, sort=T) %>%
mutate(first_day_of_week = as.Date(paste0(week, 1), "%Y%U%u")) %>%
mutate(week = glue("{first_day_of_week}  ({n})")) %>%
mutate(week = fct_reorder(week, n)) %>%
mutate(ishighlight = ifelse(n == 9, TRUE, FALSE)) %>%
head(n = 12) %>%
ggplot() +
geom_col(aes(x=n, y=week, fill=ishighlight)) +
scale_fill_manual(values = c("grey", "darkred"), guide=F) +
theme_light() +
labs(x = "# of events per week",
y = "Week",
title = "Weeks with highest number of Slides")
data_iffi %>%
filter(date_info == "day") %>%
filter(str_detect(second_level, "translational")) %>%
mutate(week = paste0(year.int, formatC(week(date), flag=0, width=2))) %>%
count(week, sort=T) %>%
mutate(first_day_of_week = as.Date(paste0(week, 1), "%Y%U%u")) %>%
mutate(week = glue("{first_day_of_week}  ({n})")) %>%
mutate(week = fct_reorder(week, n)) %>%
mutate(ishighlight = ifelse(n == 9, TRUE, FALSE)) %>%
head(n = 12) %>%
ggplot() +
geom_col(aes(x=n, y=week, fill=ishighlight)) +
scale_fill_manual(values = c("grey", "darkred"), guide=F) +
theme_light() +
labs(x = "# of events per week",
y = "Week",
title = "Weeks with highest number of Slides") +
theme(
axis.title.y = element_blank()
)
data_iffi %>%
filter(date_info == "day") %>%
filter(str_detect(second_level, "translational")) %>%
mutate(week = paste0(year.int, formatC(week(date), flag=0, width=2))) %>%
count(week, sort=T) %>%
mutate(first_day_of_week = as.Date(paste0(week, 1), "%Y%U%u")) %>%
mutate(week = glue("{first_day_of_week}  ({n})")) %>%
mutate(week = fct_reorder(week, n)) %>%
mutate(ishighlight = ifelse(n == 9, TRUE, FALSE)) %>%
head(n = 12) %>%
ggplot() +
geom_col(aes(x=n, y=week, fill=ishighlight), color="black") +
scale_fill_manual(values = c("grey", "darkred"), guide=F) +
theme_light() +
labs(x = "# of events per week",
y = "Week",
title = "Weeks with highest number of Slides") +
theme(
axis.title.y = element_blank()
)
data_iffi %>%
filter(date_info == "day") %>%
filter(str_detect(second_level, "translational")) %>%
mutate(week = paste0(year.int, formatC(week(date), flag=0, width=2))) %>%
count(week, sort=T) %>%
mutate(first_day_of_week = as.Date(paste0(week, 1), "%Y%U%u")) %>%
mutate(week = glue("{first_day_of_week}  ({n})")) %>%
mutate(week = fct_reorder(week, n))
data_iffi %>%
filter(date_info == "day") %>%
filter(str_detect(second_level, "translational")) %>%
mutate(week = paste0(year.int, formatC(week(date), flag=0, width=2))) %>%
count(week, sort=T) %>%
mutate(first_day_of_week = as.Date(paste0(week, 1), "%Y%U%u")) %>%
mutate(week = glue("{first_day_of_week}  ({n})")) %>%
mutate(ishighlight = ifelse(n == 9, TRUE, FALSE)) %>%
head(n = 12) %>%
ggplot() +
geom_col(aes(x=n, y=week, fill=ishighlight), color="black") +
theme_light() +
labs(x = "# of events per week",
y = "Week",
title = "Weeks with highest number of Slides") +
theme(
axis.title.y = element_blank()
)
data_iffi %>%
filter(date_info == "day") %>%
filter(str_detect(second_level, "translational")) %>%
mutate(week = paste0(year.int, formatC(week(date), flag=0, width=2))) %>%
count(week, sort=T) %>%
mutate(first_day_of_week = as.Date(paste0(week, 1), "%Y%U%u")) %>%
mutate(week = glue("{first_day_of_week}  ({n})")) %>%
mutate(ishighlight = ifelse(n == 9, TRUE, FALSE)) %>%
head(n = 12) %>%
ggplot() +
geom_col(aes(x=n, y=week, fill=ishighlight), color="black") +
scale_fill_manual(values = c("grey", "darkred"), guide=F) +
theme_light() +
labs(x = "# of events per week",
y = "Week",
title = "Weeks with highest number of Slides") +
theme(
axis.title.y = element_blank()
)
data_iffi %>%
filter(date_info == "day") %>%
filter(str_detect(second_level, "translational")) %>%
mutate(week = paste0(year.int, formatC(week(date), flag=0, width=2))) %>%
count(week, sort=T) %>%
mutate(first_day_of_week = as.Date(paste0(week, 1), "%Y%U%u")) %>%
mutate(week = glue("{first_day_of_week}  ({n})")) %>%
mutate(week = fct_reorder(week, n)) %>%
head(n = 12) %>%
ggplot() +
geom_col(aes(x=n, y=week, fill=ishighlight), color="black") +
theme_light() +
labs(x = "# of events per week",
y = "Week",
title = "Weeks with highest number of Slides") +
theme(
axis.title.y = element_blank()
)
data_iffi %>%
filter(date_info == "day") %>%
filter(str_detect(second_level, "translational")) %>%
mutate(week = paste0(year.int, formatC(week(date), flag=0, width=2))) %>%
count(week, sort=T) %>%
mutate(first_day_of_week = as.Date(paste0(week, 1), "%Y%U%u")) %>%
mutate(week = glue("{first_day_of_week}  ({n})")) %>%
mutate(week = fct_reorder(week, n)) %>%
head(n = 12) %>%
ggplot() +
geom_col(aes(x=n, y=week), color="black") +
theme_light() +
labs(x = "# of events per week",
y = "Week",
title = "Weeks with highest number of Slides") +
theme(
axis.title.y = element_blank()
)
data_iffi %>%
filter(date_info == "day") %>%
filter(str_detect(second_level, "translational")) %>%
mutate(week = paste0(year.int, formatC(week(date), flag=0, width=2))) %>%
count(week, sort=T) %>%
mutate(first_day_of_week = as.Date(paste0(week, 1), "%Y%U%u")) %>%
mutate(week = glue("{first_day_of_week}  ({n})")) %>%
mutate(week = fct_reorder(week, n)) %>%
head(n = 12) %>%
ggplot() +
geom_col(aes(x=n, y=week), color="black") +
theme_light(base_family="Times") +
labs(x = "# of events per week",
y = "Week",
title = "Weeks with highest number of Slides") +
theme(
axis.title.y = element_blank()
)
data_iffi %>%
filter(date_info == "day") %>%
filter(str_detect(second_level, "translational")) %>%
mutate(week = paste0(year.int, formatC(week(date), flag=0, width=2))) %>%
count(week, sort=T) %>%
mutate(first_day_of_week = as.Date(paste0(week, 1), "%Y%U%u")) %>%
mutate(week = glue("{first_day_of_week}  ({n})")) %>%
mutate(week = fct_reorder(week, n)) %>%
head(n = 12) %>%
ggplot() +
geom_col(aes(x=n, y=week), color="black") +
theme_light(base_family="Times New Roman") +
labs(x = "# of events per week",
y = "Week",
title = "Weeks with highest number of Slides") +
theme(
axis.title.y = element_blank()
)
library(sysfonts)
sysfonts::font.families()
sysfonts::font_add_google(name="Karantina", family = "f1")
sysfonts::font_add_google(name="Lobster", family = "f1")
data_iffi %>%
filter(date_info == "day") %>%
filter(str_detect(second_level, "translational")) %>%
mutate(week = paste0(year.int, formatC(week(date), flag=0, width=2))) %>%
count(week, sort=T) %>%
mutate(first_day_of_week = as.Date(paste0(week, 1), "%Y%U%u")) %>%
mutate(week = glue("{first_day_of_week}  ({n})")) %>%
mutate(week = fct_reorder(week, n)) %>%
head(n = 12) %>%
ggplot() +
geom_col(aes(x=n, y=week), color="black") +
theme_light(base_family=f1) +
labs(x = "# of events per week",
y = "Week",
title = "Weeks with highest number of Slides") +
theme(
axis.title.y = element_blank()
)
data_iffi %>%
filter(date_info == "day") %>%
filter(str_detect(second_level, "translational")) %>%
mutate(week = paste0(year.int, formatC(week(date), flag=0, width=2))) %>%
count(week, sort=T) %>%
mutate(first_day_of_week = as.Date(paste0(week, 1), "%Y%U%u")) %>%
mutate(week = glue("{first_day_of_week}  ({n})")) %>%
mutate(week = fct_reorder(week, n)) %>%
head(n = 12) %>%
ggplot() +
geom_col(aes(x=n, y=week), color="black") +
theme_light(base_family="f1") +
labs(x = "# of events per week",
y = "Week",
title = "Weeks with highest number of Slides") +
theme(
axis.title.y = element_blank()
)
detach(package:sysfonts)
library(showtext)
library(showtext)
library(extrafont)
loadfonts()
fonts()
data_iffi %>%
filter(date_info == "day") %>%
filter(str_detect(second_level, "translational")) %>%
mutate(week = paste0(year.int, formatC(week(date), flag=0, width=2))) %>%
count(week, sort=T) %>%
mutate(first_day_of_week = as.Date(paste0(week, 1), "%Y%U%u")) %>%
mutate(week = glue("{first_day_of_week}  ({n})")) %>%
mutate(week = fct_reorder(week, n)) %>%
head(n = 12) %>%
ggplot() +
geom_col(aes(x=n, y=week), color="black") +
theme_light(base_family="Times") +
labs(x = "# of events per week",
y = "Week",
title = "Weeks with highest number of Slides") +
theme(
axis.title.y = element_blank()
)
data_iffi %>%
filter(date_info == "day") %>%
filter(str_detect(second_level, "translational")) %>%
mutate(week = paste0(year.int, formatC(week(date), flag=0, width=2))) %>%
count(week, sort=T) %>%
mutate(first_day_of_week = as.Date(paste0(week, 1), "%Y%U%u")) %>%
mutate(week = glue("{first_day_of_week}  ({n})")) %>%
mutate(week = fct_reorder(week, n)) %>%
head(n = 12) %>%
ggplot() +
geom_col(aes(x=n, y=week), color="black") +
theme_light(base_family="Times New Roman") +
labs(x = "# of events per week",
y = "Week",
title = "Weeks with highest number of Slides") +
theme(
axis.title.y = element_blank()
)
blogdown
blogdown::serve_site()
blogdown::build_site()
blogdown::check_config()
blogdown::build_dir()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(here)
library(here)
here::here()
p = here("../vignettes/")
p
p = here("vignettes")
p
connections = iffitoR::set_connection(p)
p = here("inst/extdata/")
p
connections = iffitoR::set_connection(p)
# connect to the dictionary database
list_of_dfs = iffitoR::make_list_dataframes(connections[[1]])
for (i in seq_along(list_of_dfs)) {
print(paste0("Colums-Names in", names(list_of_dfs)[[i]]))
print(names(list_of_dfs[[i]]))
print("")
}
library(RODBC)
blogdown::build_site()
blogdown::build_dir()
devtools::build_vignettes()
devtools::build_vignettes()
usethis::use_vignette("Example")
usethis::use_vignette("connection")
usethis::use_vignette("maxslidesweek")
devtools::build_vignettes()
devtools::build_vignettes()
install.packages("rlang", dependencies = c("Depends", "Imports", "LinkingTo", "Suggests"))
install.packages("rlang", dependencies = c("Depends", "Imports", "LinkingTo", "Suggests"))
