rsconnect::deployApp()
rsconnect::deployApp(appDir = "local_tests/iffi_data_shiny/")
runApp('local_tests/iffi_data_shiny')
rsconnect::deployApp(appDir = "local_tests/iffi_data_shiny/")
library(shinyjqui)
library(shinyjqui)
rsconnect::deployApp(appDir = "local_tests/iffi_data_shiny/")
?rsconnect::deployApp
rm(list=ls())
shiny::runApp('local_tests/iffi_data_shiny')
runApp('local_tests/iffi_data_shiny')
rsconnect::deployApp(appDir = "local_tests/iffi_data_shiny/")
devtools::load_all()
sf = get_shape_southtyrol()
devtools::load_all()
remove.packages("iffitoR")
remotes::install_github("RobinKohrs/iffitoR")
remotes::install_gitlab("https://gitlab.inf.unibz.it/proslide/iffitor/-/tree/gitlab")
remotes::install_gitlab("https://gitlab.inf.unibz.it/proslide/iffitor@gitlab")
remotes::install_gitlab("https://gitlab.inf.unibz.it/proslide/iffitor/@gitlab")
remotes::install_gitlab("unibz/proslide/iffitor/@gitlab")
remotes::install_gitlab("unibz/proslide/iffitor@gitlab")
remotes::install_gitlab("unibz.it/proslide/iffitor@gitlab")
remotes::install_gitlab("gitlab.inf.unibz.it/proslide/iffitor@gitlab")
remotes::install_gitlab("gitlab.inf.unibz.it/proslide/iffitor/@gitlab")
remotes::install_gitlab("gitlab.inf.unibz.it/iffitor/@gitlab")
remotes::install_gitlab("gitlab.inf.unibz.it/proslide/iffitor/@gitlab")
remotes::install_gitlab("gitlab.inf.unibz.it/proslide/iffitor/@gitlab")
# load libraries ----------------------------------------------------------
library(iffitoR)
library(tidyverse)
library(sf)
library(RODBC)
library(glue)
# set ggplot theme
theme(theme_set(theme_light()))
res_raw = make_shapefile(
database_dir = "../euracR/data/database/",
# normally null only setting it here for me
attribute_database_name = "tbl_frane",
# the name without extension
dictionary_database_name = "diz_frane",
shapefile = "../euracR/data/Shapefiles/IFFI10_1.shp",
# the colums we want to retrieve directly
attri = c("anno_min",
"mese_min",
"giorno_min"),
# tables to join the description
joins = list(
"tbl_frane.Generalita.Cod_tipo" = c(
"diz_frane.diz_tipo_movi.cod_tipo",
"diz_frane.diz_tipo_movi.tipologia"
),
"tbl_frane.clas_ii_liv.movimento" = c(
"diz_frane.diz_movimenti.movimento",
"diz_frane.diz_movimenti.nome_movimento"
),
"tbl_frane.ass_gen_cause.causa"  = c(
"diz_frane.diz_cause.causa",
"diz_frane.diz_gruppi_cause.gruppo_cause"
),
"tbl_frane.ass_gen_metodo.codmetodo" = c(
"diz.frane.diz_metodo.codmetodo",
"diz.frane.diz_metodo.descrizione"
)
)
)
database_dir = "../euracR/data/database/"
attribute_database_name = "tbl_frane"
dictionary_database_name = "diz_frane"
shapefile = "../euracR/data/Shapefiles/IFFI10_1.shp"
attri = c("anno_min",
"mese_min",
"giorno_min")
joins = list(
"tbl_frane.Generalita.Cod_tipo" = c(
"diz_frane.diz_tipo_movi.cod_tipo",
"diz_frane.diz_tipo_movi.tipologia"
),
"tbl_frane.clas_ii_liv.movimento" = c(
"diz_frane.diz_movimenti.movimento",
"diz_frane.diz_movimenti.nome_movimento"
),
"tbl_frane.ass_gen_cause.causa"  = c(
"diz_frane.diz_cause.causa",
"diz_frane.diz_gruppi_cause.gruppo_cause"
),
"tbl_frane.ass_gen_metodo.codmetodo" = c(
"diz.frane.diz_metodo.codmetodo",
"diz.frane.diz_metodo.descrizione"
)
)
joins
res_raw = make_shapefile(
database_dir = "../euracR/data/database/",
# normally null only setting it here for me
attribute_database_name = "tbl_frane",
# the name without extension
dictionary_database_name = "diz_frane",
shapefile = "../euracR/data/Shapefiles/IFFI10_1.shp",
# the colums we want to retrieve directly
attri = c("anno_min",
"mese_min",
"giorno_min"),
# tables to join the description
joins = list(
"tbl_frane.Generalita.Cod_tipo" = c(
"diz_frane.diz_tipo_movi.cod_tipo",
"diz_frane.diz_tipo_movi.tipologia"
),
"tbl_frane.clas_ii_liv.movimento" = c(
"diz_frane.diz_movimenti.movimento",
"diz_frane.diz_movimenti.nome_movimento"
),
"tbl_frane.ass_gen_cause.causa"  = c(
"diz_frane.diz_cause.causa",
"diz_frane.diz_gruppi_cause.gruppo_cause"
),
"tbl_frane.ass_gen_metodo.codmetodo" = c(
"diz_frane.diz_metodo.codmetodo",
"diz_frane.diz_metodo.descrizione"
)
)
)
res_raw
### Data preparation (lots of attributes) and some filtering
rm(list=ls())
# remotes::install_github("https://github.com/RobinKohrs/iffitoR", force=TRUE)
library(iffitoR)
library(plotly)
library(glue)
library(RODBC)
library(forcats)
library(dplyr)
library(rgdal)
library(ggplot2)
library(tools)
library(stringr)
library(sf)
#####
joins = list(
"tbl_frane.Geologia.litologia"                 = c("diz_frane.diz_litologie.litologia",      "diz_frane.diz_litologie.nome_litologia"),
"tbl_frane.clas_ii_liv.movimento"              = c("diz_frane.diz_movimenti.movimento",      "diz_frane.diz_movimenti.nome_movimento"),
"tbl_frane.Uso_Suolo.uso_suolo"                = c("diz_frane.diz_usi_suolo.uso_suolo",      "diz_frane.diz_usi_suolo.nome_uso_suolo"),
"tbl_frane.ass_gen_cause.causa"                = c("diz_frane.diz_cause.causa",              "diz_frane.diz_cause.nome_causa"),
"tbl_frane.Attivita.stile"                     = c("diz_frane.diz_stile.stile",              "diz_frane.diz_stile.nome_stile"),
"tbl_frane.clas_ii_liv.materiale"              = c("diz_frane.diz_materiali.materiale",      "diz_frane.diz_materiali.nome_materiale"),
"tbl_frane.Generalita.Cod_tipo"                = c("diz_frane.diz_tipo_movi.cod_tipo",       "diz_frane.diz_tipo_movi.tipologia"),
"tbl_frane.clas_ii_liv.acqua"                  = c("diz_frane.diz_acqua.acqua",              "diz_frane.diz_acqua.nome_acqua"),
"tbl_frane.clas_ii_liv.velocita"               = c("diz_frane.diz_velocita.velocita",        "diz_frane.diz_velocita.nome_velocita"),
"tbl_frane.ass_gen_cause.causa"                = c("diz_frane.diz_cause.causa",              "diz_frane.diz_gruppi_cause.gruppo_cause"),
"tbl_frane.Attivita.stato"                     = c("diz_frane.diz_stati.stato",              "diz_frane.diz_stati.nome_stato"),
"tbl_frane.Generalita.Cod_tipo"                = c("diz_frane.diz_pendii.tipo_pendio",       "diz_frane.diz_pendii.nome_pendio"),
"tbl_frane.ass_gen_metodo.codmetodo"           = c("diz_frane.diz_metodo.codmetodo",         "diz_frane.diz_metodo.descrizione"),
"tbl_frane.Geologia.litotecnica"               = c("diz_frane.diz_litotechnice.litotecnica", "diz_frane.diz_litotechnice.nome_litotecnica"),
"tbl_frane.ass_gen_elementi_rischio.element"   = c("diz_frane.diz_elementi_rischio.element", "diz_frane.diz_elementi_rischio.nome_elemento")
)
# the path to the iffi polygons
landslide_poly_path = "\\\\projectdata.eurac.edu/projects/Proslide/Landslides/Iffi_db_xxxx_to_2018/exportperEurac2020/Shapefiles/IFFI10_5.shp"
# the path to the iffi points
landslide_point_path = "\\\\projectdata.eurac.edu/projects/Proslide/Landslides/Iffi_db_xxxx_to_2018/exportperEurac2020/Shapefiles/IFFI10_1.shp"
# the path to the folder with the iffi-databases
database_dir = "\\\\projectdata.eurac.edu/projects/Proslide/Landslides/Iffi_db_xxxx_to_2018/exportperEurac2020/database"
# attributes directly included in the db
attri = c("anno_min", "mese_min", "giorno_min","ora_min", "area", "vol_finale", "Note_classifi", "anno", "danno_diretto", "costo_totale", "Morti") # anno = previous event in year?
iffi_sf = iffitoR::make_shapefile(
database_dir = database_dir,
attribute_database_name = "tbl_frane",
dictionary_database_name = "diz_frane",
shapefile = landslide_point_path,
attri = attri,
joins = joins
)
iffi_sf = iffitoR::make_shapefile(
database_dir = database_dir,
attribute_database_name = "tbl_frane",
dictionary_database_name = "diz_frane",
shapefile = landslide_point_path,
attri = attri,
joins = joins
)
# attributes directly included in the db
attri = c("anno_min", "mese_min", "giorno_min","ora_min", "area", "vol_finale", "Note_classifi", "anno", "danno_diretto", "costo_totale", "Morti") # anno = previous event in year?
#####
joins = list(
"tbl_frane.Geologia.litologia"                 = c("diz_frane.diz_litologie.litologia",      "diz_frane.diz_litologie.nome_litologia"),
"tbl_frane.clas_ii_liv.movimento"              = c("diz_frane.diz_movimenti.movimento",      "diz_frane.diz_movimenti.nome_movimento"),
"tbl_frane.Uso_Suolo.uso_suolo"                = c("diz_frane.diz_usi_suolo.uso_suolo",      "diz_frane.diz_usi_suolo.nome_uso_suolo"),
"tbl_frane.ass_gen_cause.causa"                = c("diz_frane.diz_cause.causa",              "diz_frane.diz_cause.nome_causa"),
"tbl_frane.Attivita.stile"                     = c("diz_frane.diz_stile.stile",              "diz_frane.diz_stile.nome_stile"),
"tbl_frane.clas_ii_liv.materiale"              = c("diz_frane.diz_materiali.materiale",      "diz_frane.diz_materiali.nome_materiale"),
"tbl_frane.Generalita.Cod_tipo"                = c("diz_frane.diz_tipo_movi.cod_tipo",       "diz_frane.diz_tipo_movi.tipologia"),
"tbl_frane.clas_ii_liv.acqua"                  = c("diz_frane.diz_acqua.acqua",              "diz_frane.diz_acqua.nome_acqua"),
"tbl_frane.clas_ii_liv.velocita"               = c("diz_frane.diz_velocita.velocita",        "diz_frane.diz_velocita.nome_velocita"),
"tbl_frane.ass_gen_cause.causa"                = c("diz_frane.diz_cause.causa",              "diz_frane.diz_gruppi_cause.gruppo_cause"),
"tbl_frane.Attivita.stato"                     = c("diz_frane.diz_stati.stato",              "diz_frane.diz_stati.nome_stato"),
"tbl_frane.Generalita.Cod_tipo"                = c("diz_frane.diz_pendii.tipo_pendio",       "diz_frane.diz_pendii.nome_pendio"),
"tbl_frane.ass_gen_metodo.codmetodo"           = c("diz_frane.diz_metodo.codmetodo",         "diz_frane.diz_metodo.descrizione"),
"tbl_frane.Geologia.litotecnica"               = c("diz_frane.diz_litotechnice.litotecnica", "diz_frane.diz_litotechnice.nome_litotecnica"),
"tbl_frane.ass_gen_elementi_rischio.element"   = c("diz_frane.diz_elementi_rischio.element", "diz_frane.diz_elementi_rischio.nome_elemento")
)
database_dir
# establish connections
conns = set_connection(database_dir)
conns
# set the right ones
# there are some issues with indexing the list, for some reason we need to index conns with [[]]
# to maintain a valid and open connection
index_attr = which(grepl(attribute_database_name, names(conns)))
attribute_database_name="tbl_frane"
dictionary_database_name="diz_frane"
# set the right ones
# there are some issues with indexing the list, for some reason we need to index conns with [[]]
# to maintain a valid and open connection
index_attr = which(grepl(attribute_database_name, names(conns)))
index_attr
if (!is.null(dictionary_database_name)) {
index_dict = which(grepl(dictionary_database_name, names(conns)))
}
index_dict
attr_database_conn = conns[[index_attr]]
if (!is.null(dictionary_database_name)) {
dict_database_conn = conns[[index_dict]]
}
# the table names are the attributes we can query
# Especially the one in the attributes table are interesting
table_names_attr = make_vector_table_names(attr_database_conn)
table_names_attr
if (!is.null(dictionary_database_name)) {
table_names_dict = make_vector_table_names(dict_database_conn)
}
table_names_dict
# make a list of dataframes(tables) for the attributes database
dfs_attr = make_list_dataframes(attr_database_conn)
dfs_attr
attr_database_conn
# make a list of dataframes(tables) for the attributes database
dfs_attr = make_list_dataframes(attr_database_conn)
dfs_attr
# check for each dataframe if they have an id and subid column
log_vec = check_id(dfs_attr)
devtools::load_all()
# check for each dataframe if they have an id and subid column
log_vec = check_id(dfs_attr)
# for the rest create the iffi index for the attribute tables
dfs_attr_iffi = create_iffi_index(dfs_attr, log_vec)
# find the tables that we can join directly
tables_to_append_diretly = find_tables(dfs_attr_iffi, attri)
attri
### join those tables
# read the shape
shape = read_shape(shapefile)
landslide_point_path = "\\\\projectdata.eurac.edu/projects/Proslide/Landslides/Iffi_db_xxxx_to_2018/exportperEurac2020/Shapefiles/IFFI10_1.shp"
### join those tables
# read the shape
shape = read_shape(shapefile)
shapefile = landslide_point_path
### join those tables
# read the shape
shape = read_shape(shapefile)
shape_joined_attri = join_shape_attributes(shape, tables_to_append_diretly, dfs_attr_iffi)
dim(shape_joined_attri)
names(shape_joined_attri)
joined_dicionary_tables_with_iffi_kodex = join_descriptions(joins, dfs_attr_iffi, dfs_dict)
dfs_dict = make_list_dataframes(dict_database_conn)
joined_dicionary_tables_with_iffi_kodex = join_descriptions(joins, dfs_attr_iffi, dfs_dict)
joins
dfs_attr_iffi
class(dfs_attr_iffi)
length(dfs_attr_iffi)
dfs_dict
# list of joined tables
joined_tables = vector("list")
i = 1
for (i in seq_along(joins)) {
print(i)
# make a vector of the three
elements_in_join = c(names(joins)[[i]], joins[[i]][[1]], joins[[i]][[2]])
# assert that all have 3 entries (db, table, col)
length_attri = elements_in_join[[1]] %>% stringr::str_split(., pattern = "\\.") %>% unlist() %>% length()
length_diz_key = elements_in_join[[2]] %>% stringr::str_split(., pattern = "\\.") %>% unlist() %>% length()
length_diz_value = elements_in_join[[3]] %>% stringr::str_split(., pattern = "\\.") %>% unlist() %>% length()
# vector of the three lengths
ll = c(length_attri, length_diz_key, length_diz_value)
for (l in seq_along(ll)) {
if (ll[[l]] != 3) {
stop(call. = FALSE, paste0("You gave a wrong joins attribute\n", elements_in_join[[l]] ,"\n does not thave the three elements <database>.<table>.<column>"))
}
}
#------------
# get the database, Table, column of the attribute datbase
table_attri = names(joins)[[i]] %>% stringr::str_split(., pattern = "\\.") %>% .[[1]] %>% .[[2]]
col_attri = names(joins)[[i]] %>% stringr::str_split(., pattern = "\\.") %>% .[[1]] %>% .[[3]]
# find the attribute table
df_index = grep(pattern = paste0("^", table_attri, "$"), names(dfs_attr_iffi))
# select the column to join and the iffi kodex
df = dfs_attr_iffi[[df_index]] %>% select(c(col_attri, "iffi_kodex"))
#------------
# get the database, Table, column of the attribute datbase
table_dict = joins[[i]] %>% stringr::str_split(., pattern = "\\.") %>% .[[1]] %>% .[[2]]
cols_dict = sapply(joins[[i]], function(x) split_and_return(x), USE.NAMES = F)
# find the dict table
df_dict_index = grep(table_dict, names(dfs_dict))
df_dict = dfs_dict[[df_dict_index]] %>% select(cols_dict)
#--------------------
# join them
merged = merge(df, df_dict, by.x = col_attri, by.y = cols_dict[[1]], all.x = T, all.y=F)
print(paste0("joind the tables: ", table_attri, " and ", table_dict))
print(paste0("    on the columns ", col_attri, " and ", cols_dict[[1]]))
print(paste0("    Resulting table is has ", dim(merged)[[1]], " rows, and ", dim(merged)[[2]], " columns"))
print("")
joined_tables[[i]] = merged
}
length(joins)
joins[[14]]
i = 14
# make a vector of the three
elements_in_join = c(names(joins)[[i]], joins[[i]][[1]], joins[[i]][[2]])
elements_in_join
# assert that all have 3 entries (db, table, col)
length_attri = elements_in_join[[1]] %>% stringr::str_split(., pattern = "\\.") %>% unlist() %>% length()
length_diz_key = elements_in_join[[2]] %>% stringr::str_split(., pattern = "\\.") %>% unlist() %>% length()
length_diz_value = elements_in_join[[3]] %>% stringr::str_split(., pattern = "\\.") %>% unlist() %>% length()
length_attri
length_diz_key
length_diz_value
# vector of the three lengths
ll = c(length_attri, length_diz_key, length_diz_value)
lll
ll
# get the database, Table, column of the attribute datbase
table_attri = names(joins)[[i]] %>% stringr::str_split(., pattern = "\\.") %>% .[[1]] %>% .[[2]]
table_attri
col_attri = names(joins)[[i]] %>% stringr::str_split(., pattern = "\\.") %>% .[[1]] %>% .[[3]]
col_attri
# find the attribute table
df_index = grep(pattern = paste0("^", table_attri, "$"), names(dfs_attr_iffi))
df_index
table_attri[[27]]
names(dfs_attr_iffi)
names(dfs_attr_iffi[[27]])
names(dfs_attr_iffi)[[27]]
# select the column to join and the iffi kodex
df = dfs_attr_iffi[[df_index]] %>% select(c(col_attri, "iffi_kodex"))
head(df)
dim(df)
# get the database, Table, column of the attribute datbase
table_dict = joins[[i]] %>% stringr::str_split(., pattern = "\\.") %>% .[[1]] %>% .[[2]]
table_dict
#####
joins = list(
"tbl_frane.Geologia.litologia"                 = c("diz_frane.diz_litologie.litologia",      "diz_frane.diz_litologie.nome_litologia"),
"tbl_frane.clas_ii_liv.movimento"              = c("diz_frane.diz_movimenti.movimento",      "diz_frane.diz_movimenti.nome_movimento"),
"tbl_frane.Uso_Suolo.uso_suolo"                = c("diz_frane.diz_usi_suolo.uso_suolo",      "diz_frane.diz_usi_suolo.nome_uso_suolo"),
"tbl_frane.ass_gen_cause.causa"                = c("diz_frane.diz_cause.causa",              "diz_frane.diz_cause.nome_causa"),
"tbl_frane.Attivita.stile"                     = c("diz_frane.diz_stile.stile",              "diz_frane.diz_stile.nome_stile"),
"tbl_frane.clas_ii_liv.materiale"              = c("diz_frane.diz_materiali.materiale",      "diz_frane.diz_materiali.nome_materiale"),
"tbl_frane.Generalita.Cod_tipo"                = c("diz_frane.diz_tipo_movi.cod_tipo",       "diz_frane.diz_tipo_movi.tipologia"),
"tbl_frane.clas_ii_liv.acqua"                  = c("diz_frane.diz_acqua.acqua",              "diz_frane.diz_acqua.nome_acqua"),
"tbl_frane.clas_ii_liv.velocita"               = c("diz_frane.diz_velocita.velocita",        "diz_frane.diz_velocita.nome_velocita"),
"tbl_frane.ass_gen_cause.causa"                = c("diz_frane.diz_cause.causa",              "diz_frane.diz_gruppi_cause.gruppo_cause"),
"tbl_frane.Attivita.stato"                     = c("diz_frane.diz_stati.stato",              "diz_frane.diz_stati.nome_stato"),
"tbl_frane.Generalita.Cod_tipo"                = c("diz_frane.diz_pendii.tipo_pendio",       "diz_frane.diz_pendii.nome_pendio"),
"tbl_frane.ass_gen_metodo.codmetodo"           = c("diz_frane.diz_metodo.codmetodo",         "diz_frane.diz_metodo.descrizione"),
"tbl_frane.Geologia.litotecnica"               = c("diz_frane.diz_litotecnice.litotecnica", "diz_frane.diz_litotecnice.nome_litotecnica"),
"tbl_frane.ass_gen_elementi_rischio.element"   = c("diz_frane.diz_elementi_rischio.element", "diz_frane.diz_elementi_rischio.nome_elemento")
)
joins
# list of joined tables
joined_tables = vector("list")
for (i in seq_along(joins)) {
print(i)
# make a vector of the three
elements_in_join = c(names(joins)[[i]], joins[[i]][[1]], joins[[i]][[2]])
# assert that all have 3 entries (db, table, col)
length_attri = elements_in_join[[1]] %>% stringr::str_split(., pattern = "\\.") %>% unlist() %>% length()
length_diz_key = elements_in_join[[2]] %>% stringr::str_split(., pattern = "\\.") %>% unlist() %>% length()
length_diz_value = elements_in_join[[3]] %>% stringr::str_split(., pattern = "\\.") %>% unlist() %>% length()
# vector of the three lengths
ll = c(length_attri, length_diz_key, length_diz_value)
for (l in seq_along(ll)) {
if (ll[[l]] != 3) {
stop(call. = FALSE, paste0("You gave a wrong joins attribute\n", elements_in_join[[l]] ,"\n does not thave the three elements <database>.<table>.<column>"))
}
}
#------------
# get the database, Table, column of the attribute datbase
table_attri = names(joins)[[i]] %>% stringr::str_split(., pattern = "\\.") %>% .[[1]] %>% .[[2]]
col_attri = names(joins)[[i]] %>% stringr::str_split(., pattern = "\\.") %>% .[[1]] %>% .[[3]]
# find the attribute table
df_index = grep(pattern = paste0("^", table_attri, "$"), names(dfs_attr_iffi))
# select the column to join and the iffi kodex
df = dfs_attr_iffi[[df_index]] %>% select(c(col_attri, "iffi_kodex"))
#------------
# get the database, Table, column of the dictionary datbase
table_dict = joins[[i]] %>% stringr::str_split(., pattern = "\\.") %>% .[[1]] %>% .[[2]]
cols_dict = sapply(joins[[i]], function(x) split_and_return(x), USE.NAMES = F)
# find the dict table
df_dict_index = grep(table_dict, names(dfs_dict))
df_dict = dfs_dict[[df_dict_index]] %>% select(cols_dict)
#--------------------
# join them
merged = merge(df, df_dict, by.x = col_attri, by.y = cols_dict[[1]], all.x = T, all.y=F)
print(paste0("joind the tables: ", table_attri, " and ", table_dict))
print(paste0("    on the columns ", col_attri, " and ", cols_dict[[1]]))
print(paste0("    Resulting table is has ", dim(merged)[[1]], " rows, and ", dim(merged)[[2]], " columns"))
print("")
joined_tables[[i]] = merged
}
i = 14
# make a vector of the three
elements_in_join = c(names(joins)[[i]], joins[[i]][[1]], joins[[i]][[2]])
# assert that all have 3 entries (db, table, col)
length_attri = elements_in_join[[1]] %>% stringr::str_split(., pattern = "\\.") %>% unlist() %>% length()
length_diz_key = elements_in_join[[2]] %>% stringr::str_split(., pattern = "\\.") %>% unlist() %>% length()
length_diz_value = elements_in_join[[3]] %>% stringr::str_split(., pattern = "\\.") %>% unlist() %>% length()
# vector of the three lengths
ll = c(length_attri, length_diz_key, length_diz_value)
for (l in seq_along(ll)) {
if (ll[[l]] != 3) {
stop(call. = FALSE, paste0("You gave a wrong joins attribute\n", elements_in_join[[l]] ,"\n does not thave the three elements <database>.<table>.<column>"))
}
}
# get the database, Table, column of the attribute datbase
table_attri = names(joins)[[i]] %>% stringr::str_split(., pattern = "\\.") %>% .[[1]] %>% .[[2]]
col_attri = names(joins)[[i]] %>% stringr::str_split(., pattern = "\\.") %>% .[[1]] %>% .[[3]]
# find the attribute table
df_index = grep(pattern = paste0("^", table_attri, "$"), names(dfs_attr_iffi))
# select the column to join and the iffi kodex
df = dfs_attr_iffi[[df_index]] %>% select(c(col_attri, "iffi_kodex"))
# get the database, Table, column of the dictionary datbase
table_dict = joins[[i]] %>% stringr::str_split(., pattern = "\\.") %>% .[[1]] %>% .[[2]]
cols_dict = sapply(joins[[i]], function(x) split_and_return(x), USE.NAMES = F)
# find the dict table
df_dict_index = grep(table_dict, names(dfs_dict))
df_dict = dfs_dict[[df_dict_index]] %>% select(cols_dict)
cols_dict
table_dict
# find the dict table
df_dict_index = grep(table_dict, names(dfs_dict))
df_dict_index
table_dict
names(dfs_dict)
#####
joins = list(
"tbl_frane.Geologia.litologia"                 = c("diz_frane.diz_litologie.litologia",      "diz_frane.diz_litologie.nome_litologia"),
"tbl_frane.clas_ii_liv.movimento"              = c("diz_frane.diz_movimenti.movimento",      "diz_frane.diz_movimenti.nome_movimento"),
"tbl_frane.Uso_Suolo.uso_suolo"                = c("diz_frane.diz_usi_suolo.uso_suolo",      "diz_frane.diz_usi_suolo.nome_uso_suolo"),
"tbl_frane.ass_gen_cause.causa"                = c("diz_frane.diz_cause.causa",              "diz_frane.diz_cause.nome_causa"),
"tbl_frane.Attivita.stile"                     = c("diz_frane.diz_stile.stile",              "diz_frane.diz_stile.nome_stile"),
"tbl_frane.clas_ii_liv.materiale"              = c("diz_frane.diz_materiali.materiale",      "diz_frane.diz_materiali.nome_materiale"),
"tbl_frane.Generalita.Cod_tipo"                = c("diz_frane.diz_tipo_movi.cod_tipo",       "diz_frane.diz_tipo_movi.tipologia"),
"tbl_frane.clas_ii_liv.acqua"                  = c("diz_frane.diz_acqua.acqua",              "diz_frane.diz_acqua.nome_acqua"),
"tbl_frane.clas_ii_liv.velocita"               = c("diz_frane.diz_velocita.velocita",        "diz_frane.diz_velocita.nome_velocita"),
"tbl_frane.ass_gen_cause.causa"                = c("diz_frane.diz_cause.causa",              "diz_frane.diz_gruppi_cause.gruppo_cause"),
"tbl_frane.Attivita.stato"                     = c("diz_frane.diz_stati.stato",              "diz_frane.diz_stati.nome_stato"),
"tbl_frane.Generalita.Cod_tipo"                = c("diz_frane.diz_pendii.tipo_pendio",       "diz_frane.diz_pendii.nome_pendio"),
"tbl_frane.ass_gen_metodo.codmetodo"           = c("diz_frane.diz_metodo.codmetodo",         "diz_frane.diz_metodo.descrizione"),
"tbl_frane.Geologia.litotecnica"               = c("diz_frane.diz_litotecniche.litotecnica", "diz_frane.diz_litotecniche.nome_litotecnica"),
"tbl_frane.ass_gen_elementi_rischio.element"   = c("diz_frane.diz_elementi_rischio.element", "diz_frane.diz_elementi_rischio.nome_elemento")
)
# list of joined tables
joined_tables = vector("list")
for (i in seq_along(joins)) {
print(i)
# make a vector of the three
elements_in_join = c(names(joins)[[i]], joins[[i]][[1]], joins[[i]][[2]])
# assert that all have 3 entries (db, table, col)
length_attri = elements_in_join[[1]] %>% stringr::str_split(., pattern = "\\.") %>% unlist() %>% length()
length_diz_key = elements_in_join[[2]] %>% stringr::str_split(., pattern = "\\.") %>% unlist() %>% length()
length_diz_value = elements_in_join[[3]] %>% stringr::str_split(., pattern = "\\.") %>% unlist() %>% length()
# vector of the three lengths
ll = c(length_attri, length_diz_key, length_diz_value)
for (l in seq_along(ll)) {
if (ll[[l]] != 3) {
stop(call. = FALSE, paste0("You gave a wrong joins attribute\n", elements_in_join[[l]] ,"\n does not thave the three elements <database>.<table>.<column>"))
}
}
#------------
# get the database, Table, column of the attribute datbase
table_attri = names(joins)[[i]] %>% stringr::str_split(., pattern = "\\.") %>% .[[1]] %>% .[[2]]
col_attri = names(joins)[[i]] %>% stringr::str_split(., pattern = "\\.") %>% .[[1]] %>% .[[3]]
# find the attribute table
df_index = grep(pattern = paste0("^", table_attri, "$"), names(dfs_attr_iffi))
# select the column to join and the iffi kodex
df = dfs_attr_iffi[[df_index]] %>% select(c(col_attri, "iffi_kodex"))
#------------
# get the database, Table, column of the dictionary datbase
table_dict = joins[[i]] %>% stringr::str_split(., pattern = "\\.") %>% .[[1]] %>% .[[2]]
cols_dict = sapply(joins[[i]], function(x) split_and_return(x), USE.NAMES = F)
# find the dict table
df_dict_index = grep(table_dict, names(dfs_dict))
df_dict = dfs_dict[[df_dict_index]] %>% select(cols_dict)
#--------------------
# join them
merged = merge(df, df_dict, by.x = col_attri, by.y = cols_dict[[1]], all.x = T, all.y=F)
print(paste0("joind the tables: ", table_attri, " and ", table_dict))
print(paste0("    on the columns ", col_attri, " and ", cols_dict[[1]]))
print(paste0("    Resulting table is has ", dim(merged)[[1]], " rows, and ", dim(merged)[[2]], " columns"))
print("")
joined_tables[[i]] = merged
}
iffi_sf = iffitoR::make_shapefile(
database_dir = database_dir,
attribute_database_name = "tbl_frane",
dictionary_database_name = "diz_frane",
shapefile = landslide_point_path,
attri = attri,
joins = joins
)
iffi_sf
dim(iffi_sf)
