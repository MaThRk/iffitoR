scale_fill_continuous(low = "brown",
high = "white",
na.value = "transparent") +
geom_sf(data = landsld,
alpha=.2, color="white")
# ggplot
# base hillshade
ggplot()+
geom_raster(data = hs_sf,
aes(x = x,
y = y,
fill = layer),
show.legend = F) +
scale_fill_continuous(low = "brown",
high = "white",
na.value = "transparent") +
geom_sf(data = landsld,
alpha=.2, color="white")  +
coord_equal()
# ggplot
# base hillshade
ggplot()+
geom_raster(data = hs_sf,
aes(x = x,
y = y,
fill = layer),
show.legend = F) +
scale_fill_continuous(low = "black",
high = "white",
na.value = "transparent") +
geom_sf(data = landsld,
alpha=.2, color="white")  +
coord_sf()
# ggplot
# base hillshade
ggplot()+
geom_raster(data = hs_sf,
aes(x = x,
y = y,
fill = layer),
show.legend = F) +
scale_fill_continuous(low = "black",
high = "white",
na.value = "transparent") +
geom_sf(data = landsld,
alpha=.2, color="darkred")  +
coord_sf()
# ggplot
# base hillshade
ggplot()+
geom_raster(data = hs_sf,
aes(x = x,
y = y,
fill = layer),
show.legend = F) +
scale_fill_continuous(low = "black",
high = "white",
na.value = "transparent") +
geom_sf(data = landsld,
alpha=.2, color="darkred")  +
coord_sf() +
theme_light(base_family = "Times New Roman") +
labs(
title="Landslides in South Tyrol"
)
library(extrafont)
# ggplot
# base hillshade
ggplot()+
geom_raster(data = hs_sf,
aes(x = x,
y = y,
fill = layer),
show.legend = F) +
scale_fill_continuous(low = "black",
high = "white",
na.value = "transparent") +
geom_sf(data = landsld,
alpha=.2, color="darkred")  +
coord_sf() +
theme_light(base_family = "Times New Roman") +
labs(
title="Landslides in South Tyrol"
)
# ggplot
# base hillshade
ggplot()+
geom_raster(data = hs_sf,
aes(x = x,
y = y,
fill = layer),
show.legend = F) +
scale_fill_continuous(low = "black",
high = "white",
na.value = "transparent") +
geom_sf(data = landsld,
alpha=.2, color="darkred")  +
coord_sf() +
theme_light(base_family = "Times New Roman") +
labs(
title="Landslides in South Tyrol"
) +
theme(
plot.title = element_text(size=20, face="italic")
)
# ggplot
# base hillshade
ggplot()+
geom_raster(data = hs_sf,
aes(x = x,
y = y,
fill = layer),
show.legend = F) +
scale_fill_continuous(low = "black",
high = "white",
na.value = "transparent") +
geom_sf(data = landsld,
alpha=.2, color="darkred")  +
coord_sf() +
theme_light(base_family = "Times New Roman") +
labs(
title="Landslides in South Tyrol"
) +
theme(
plot.title = element_text(size=20, face="italic", hjust=.5)
)
ggsave("local_data/plots/landslidesinst.png")
f = here("local_data/plots/landslidesinst.png")
ggsave(f, width=12, height=8, dpi=500)
f = here("man/figures/landslides_in_st_new_data.png")
ggsave(f, width=12, height=8, dpi=500)
# dem overlay
dem = ggplot() +
geom_raster(data =dem_df,
aes(
x = x,
y = y,
fill=dem
),
alpha=.3) +
scale_fill_continuous(low="white", high="brown") +
geom_sf(crs=st_crs(32632)) +
coord_equal()
ggplot() + geom_sf(landsld)
ggplot() + geom_sf(data = landsld)
st_crs(landsld)
?coord_sf
ggplot() + geom_sf(data = landsld) + coord_sf()
ggplot() + geom_sf(data = landsld, crs=32632)
ggplot() + geom_sf(data = landsld, crs=st_crs(32632))
ggplot() + geom_sf(data = landsld) + coord_sf(datum = st_crs(32632))
`%+%` <- function(a,b) paste0(a,b)
"a" %+% "assa"
"a" %+% "assa" %+% "nnn"
`a+a` <- function(a,b) paste0(a,b)
"a" a+a "b"
width <- getOption('width')
wodth
width
wodth
width <- getOption('width')
width
width <- getOption('width')
width
library(sf)
devtools::load_all()
dim(landsld)
names(landsld)
head(landsld$descrizione)
# load libraries---------------------------------------------------------------
library(sf)
library(iffitoR)
library(tmap)
library(tidyverse)
library(glue)
library(GADMTools)
library(mapview)
library(RODBC)
# we want the point data
points = T
# which os to automatically set the paths
os = Sys.info()["sysname"]
if(os == "Linux"){
path_ncdf = "/mnt/CEPH_PROJECTS/Proslide/PREC_GRIDS_updated/"
poly_landslide_path = "/mnt/CEPH_PROJECTS/Proslide/Landslides/iffi_db_1821_to_2020/shapefile/IFFI10_4/IFFI10_4.shp"
points_landslide_path = "/mnt/CEPH_PROJECTS/Proslide/Landslides/iffi_db_1821_to_2020/shapefile/IFFI10_1/IFFI10_1.shp"
database_dir = "/mnt/CEPH_PROJECTS/Proslide/Landslides/iffi_db_1821_to_2020/IFFI_access300321/IFFI/"
}else if(os == "Windows"){
path_ncdf = "\\\\projectdata.eurac.edu/projects/Proslide/PREC_GRIDS_updated/"
poly_landslide_path = "\\\\projectdata.eurac.edu/projects/Proslide/Landslides/Iffi_db_xxxx_to_2018/exportperEurac2020/Shapefiles/IFFI10_5.shp"
points_landslide_path = "\\\\projectdata.eurac.edu/projects/Proslide/Landslides/Iffi_db_xxxx_to_2018/exportperEurac2020/Shapefiles/IFFI10_1.shp"
database_dir = "\\\\projectdata.eurac.edu/projects/Proslide/Landslides/Iffi_db_xxxx_to_2018/exportperEurac2020/database"
}else{
stop(call. = F, "what the hell are you working on...")
}
# which shape to read
if(points){
path_spatial = points_landslide_path
}else{
path_spatial = poly_landslide_path
}
# query the landslide data and its attributes -----------------------------
res = iffitoR::make_shapefile(database_dir = database_dir,
attribute_database_name = "tbl_frane",
# the name without extension
dictionary_database_name = "diz_frane",
shapefile = path_spatial,
# normally null only setting it here for me
# the colums we want to retrieve directly
attri = c("anno_min",
"mese_min",
"giorno_min",
"area",
"costo_prev_interventi",
"costo_eff_inteventi"),
# tables to join the description
joins = list(
"tbl_frane.Generalita.Cod_tipo" = c(
"diz_frane.diz_tipo_movi.cod_tipo",
"diz_frane.diz_tipo_movi.tipologia"
),
"tbl_frane.clas_ii_liv.materiale" = c(
"diz_frane.diz_materiali.materiale",
"diz_frane.diz_materiali.nome_materiale"
),
"tbl_frane.clas_ii_liv.movimento" = c(
"diz_frane.diz_movimenti.movimento",
"diz_frane.diz_movimenti.nome_movimento"
),
"tbl_frane.ass_gen_cause.causa" = c(
"diz_frane.diz_cause.causa",
"diz_frane.diz_cause.nome_causa"
)
)
)
path_spatial
dim(tes)
dim(res)
head(tes)
head(res)
res iffitoR::get_date_information(res)
res = iffitoR::get_date_information(res)
dim(res)
database_dir
# query the landslide data and its attributes -----------------------------
res = iffitoR::make_shapefile(database_dir = "../euracR/data/database/",
attribute_database_name = "tbl_frane",
# the name without extension
dictionary_database_name = "diz_frane",
shapefile = path_spatial,
# normally null only setting it here for me
# the colums we want to retrieve directly
attri = c("anno_min",
"mese_min",
"giorno_min",
"area",
"costo_prev_interventi",
"costo_eff_inteventi"),
# tables to join the description
joins = list(
"tbl_frane.Generalita.Cod_tipo" = c(
"diz_frane.diz_tipo_movi.cod_tipo",
"diz_frane.diz_tipo_movi.tipologia"
),
"tbl_frane.clas_ii_liv.materiale" = c(
"diz_frane.diz_materiali.materiale",
"diz_frane.diz_materiali.nome_materiale"
),
"tbl_frane.clas_ii_liv.movimento" = c(
"diz_frane.diz_movimenti.movimento",
"diz_frane.diz_movimenti.nome_movimento"
),
"tbl_frane.ass_gen_cause.causa" = c(
"diz_frane.diz_cause.causa",
"diz_frane.diz_cause.nome_causa"
)
)
)
dim(res)
# query the landslide data and its attributes -----------------------------
res = iffitoR::make_shapefile(
database_dir = "../../iffi_raw_daniel/export_06042021/IFFI/IFFI/",
attribute_database_name = "tbl_frane",
# the name without extension
dictionary_database_name = "diz_frane",
shapefile = path_spatial,
# normally null only setting it here for me
# the colums we want to retrieve directly
attri = c(
"anno_min",
"mese_min",
"giorno_min",
"area",
"costo_prev_interventi",
"costo_eff_inteventi"
),
# tables to join the description
joins = list(
"tbl_frane.Generalita.Cod_tipo" = c(
"diz_frane.diz_tipo_movi.cod_tipo",
"diz_frane.diz_tipo_movi.tipologia"
),
"tbl_frane.clas_ii_liv.materiale" = c(
"diz_frane.diz_materiali.materiale",
"diz_frane.diz_materiali.nome_materiale"
),
"tbl_frane.clas_ii_liv.movimento" = c(
"diz_frane.diz_movimenti.movimento",
"diz_frane.diz_movimenti.nome_movimento"
),
"tbl_frane.ass_gen_cause.causa" = c(
"diz_frane.diz_cause.causa",
"diz_frane.diz_cause.nome_causa"
)
)
)
dim(res)
dim(landsld)
# load libraries---------------------------------------------------------------
library(sf)
library(iffitoR)
library(tmap)
library(tidyverse)
library(glue)
library(GADMTools)
library(mapview)
library(RODBC)
# we want the point data
points = T
# which os to automatically set the paths
os = Sys.info()["sysname"]
if(os == "Linux"){
path_ncdf = "/mnt/CEPH_PROJECTS/Proslide/PREC_GRIDS_updated/"
poly_landslide_path = "/mnt/CEPH_PROJECTS/Proslide/Landslides/iffi_db_1821_to_2020/shapefile/IFFI10_4/IFFI10_4.shp"
points_landslide_path = "/mnt/CEPH_PROJECTS/Proslide/Landslides/iffi_db_1821_to_2020/shapefile/IFFI10_1/IFFI10_1.shp"
database_dir = "/mnt/CEPH_PROJECTS/Proslide/Landslides/iffi_db_1821_to_2020/IFFI_access300321/IFFI/"
}else if(os == "Windows"){
path_ncdf = "\\\\projectdata.eurac.edu/projects/Proslide/PREC_GRIDS_updated/"
poly_landslide_path = "\\\\projectdata.eurac.edu/projects/Proslide/Landslides/iffi_db_1821_to_2020/shapefile/IFFI10_4/IFFI10_4.shp"
points_landslide_path = "\\\\projectdata.eurac.edu/projects/Proslide/Landslides/Iffi_db_xxxx_to_2018/exportperEurac2020/Shapefiles/IFFI10_1.shp"
points_landslide_path_2020 = "\\\\projectdata.eurac.edu/projects/Proslide/Landslides/iffi_db_1821_to_2020/shapefile/IFFI10_1/IFFI10_1.shp"
database_dir = "\\\\projectdata.eurac.edu/projects/Proslide/Landslides/Iffi_db_xxxx_to_2018/exportperEurac2020/database"
database_dir_2020 = "\\\\projectdata.eurac.edu/projects/Proslide/Landslides/iffi_db_1821_to_2020/IFFI_access300321/IFFI/"
}else{
stop(call. = F, "what the hell are you working on...")
}
# which shape to read
if(points){
path_spatial = points_landslide_path_2020
}else{
path_spatial = poly_landslide_path
}
# query the landslide data and its attributes -----------------------------
res = iffitoR::make_shapefile(
database_dir = "../../iffi_raw_daniel/export_06042021/IFFI/IFFI/",
attribute_database_name = "tbl_frane",
# the name without extension
dictionary_database_name = "diz_frane",
shapefile = path_spatial,
# normally null only setting it here for me
# the colums we want to retrieve directly
attri = c("anno_min",
"mese_min",
"giorno_min",
"area"),
joins = list(
"tbl_frane.Geologia.litologia"                 = c(
"diz_frane.diz_litologie.litologia",
"diz_frane.diz_litologie.nome_litologia"
),
"tbl_frane.clas_ii_liv.movimento"              = c(
"diz_frane.diz_movimenti.movimento",
"diz_frane.diz_movimenti.nome_movimento"
),
"tbl_frane.Uso_Suolo.uso_suolo"                = c(
"diz_frane.diz_usi_suolo.uso_suolo",
"diz_frane.diz_usi_suolo.nome_uso_suolo"
),
"tbl_frane.ass_gen_cause.causa"                = c(
"diz_frane.diz_cause.causa",
"diz_frane.diz_cause.nome_causa"
),
"tbl_frane.Attivita.stile"                     = c(
"diz_frane.diz_stile.stile",
"diz_frane.diz_stile.nome_stile"
),
"tbl_frane.clas_ii_liv.materiale"              = c(
"diz_frane.diz_materiali.materiale",
"diz_frane.diz_materiali.nome_materiale"
),
"tbl_frane.Generalita.Cod_tipo"                = c(
"diz_frane.diz_tipo_movi.cod_tipo",
"diz_frane.diz_tipo_movi.tipologia"
),
"tbl_frane.clas_ii_liv.acqua"                  = c(
"diz_frane.diz_acqua.acqua",
"diz_frane.diz_acqua.nome_acqua"
),
"tbl_frane.clas_ii_liv.velocita"               = c(
"diz_frane.diz_velocita.velocita",
"diz_frane.diz_velocita.nome_velocita"
),
"tbl_frane.ass_gen_cause.causa"                = c(
"diz_frane.diz_cause.causa",
"diz_frane.diz_gruppi_cause.gruppo_cause"
),
"tbl_frane.Attivita.stato"                     = c(
"diz_frane.diz_stati.stato",
"diz_frane.diz_stati.nome_stato"
),
"tbl_frane.Generalita.Cod_tipo"                = c(
"diz_frane.diz_pendii.tipo_pendio",
"diz_frane.diz_pendii.nome_pendio"
),
"tbl_frane.ass_gen_metodo.codmetodo"           = c(
"diz_frane.diz_metodo.codmetodo",
"diz_frane.diz_metodo.descrizione"
),
"tbl_frane.Geologia.litotecnica"               = c(
"diz_frane.diz_litotecniche.litotecnica",
"diz_frane.diz_litotecniche.nome_litotecnica"
),
"tbl_frane.ass_gen_elementi_rischio.element"   = c(
"diz_frane.diz_elementi_rischio.element",
"diz_frane.diz_elementi_rischio.nome_elemento"
)
)
)
dim(res)
# query the landslide data and its attributes -----------------------------
res = iffitoR::make_shapefile(
database_dir = "../../iffi_raw_daniel/export_06042021/IFFI/IFFI/",
attribute_database_name = "tbl_frane",
# the name without extension
dictionary_database_name = "diz_frane",
shapefile = path_spatial,
# normally null only setting it here for me
# the colums we want to retrieve directly
attri = c("anno_min",
"mese_min",
"giorno_min",
"area",
"costo_eff_inteventi",
"costo_prev_interventi"),
joins = list(
"tbl_frane.Geologia.litologia"                 = c(
"diz_frane.diz_litologie.litologia",
"diz_frane.diz_litologie.nome_litologia"
),
"tbl_frane.clas_ii_liv.movimento"              = c(
"diz_frane.diz_movimenti.movimento",
"diz_frane.diz_movimenti.nome_movimento"
),
"tbl_frane.Uso_Suolo.uso_suolo"                = c(
"diz_frane.diz_usi_suolo.uso_suolo",
"diz_frane.diz_usi_suolo.nome_uso_suolo"
),
"tbl_frane.ass_gen_cause.causa"                = c(
"diz_frane.diz_cause.causa",
"diz_frane.diz_cause.nome_causa"
),
"tbl_frane.Attivita.stile"                     = c(
"diz_frane.diz_stile.stile",
"diz_frane.diz_stile.nome_stile"
),
"tbl_frane.clas_ii_liv.materiale"              = c(
"diz_frane.diz_materiali.materiale",
"diz_frane.diz_materiali.nome_materiale"
),
"tbl_frane.Generalita.Cod_tipo"                = c(
"diz_frane.diz_tipo_movi.cod_tipo",
"diz_frane.diz_tipo_movi.tipologia"
),
"tbl_frane.clas_ii_liv.acqua"                  = c(
"diz_frane.diz_acqua.acqua",
"diz_frane.diz_acqua.nome_acqua"
),
"tbl_frane.clas_ii_liv.velocita"               = c(
"diz_frane.diz_velocita.velocita",
"diz_frane.diz_velocita.nome_velocita"
),
"tbl_frane.ass_gen_cause.causa"                = c(
"diz_frane.diz_cause.causa",
"diz_frane.diz_gruppi_cause.gruppo_cause"
),
"tbl_frane.Attivita.stato"                     = c(
"diz_frane.diz_stati.stato",
"diz_frane.diz_stati.nome_stato"
),
"tbl_frane.Generalita.Cod_tipo"                = c(
"diz_frane.diz_pendii.tipo_pendio",
"diz_frane.diz_pendii.nome_pendio"
),
"tbl_frane.ass_gen_metodo.codmetodo"           = c(
"diz_frane.diz_metodo.codmetodo",
"diz_frane.diz_metodo.descrizione"
),
"tbl_frane.Geologia.litotecnica"               = c(
"diz_frane.diz_litotecniche.litotecnica",
"diz_frane.diz_litotecniche.nome_litotecnica"
),
"tbl_frane.ass_gen_elementi_rischio.element"   = c(
"diz_frane.diz_elementi_rischio.element",
"diz_frane.diz_elementi_rischio.nome_elemento"
)
)
)
dim(res)
landsld = iffitoR::get_date_information(res)
dim(res)
write.csv(landsld../../geodata/landsld.csv")
write.csv(landsld, "../../geodata/landsld.csv")
