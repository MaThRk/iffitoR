poly_landslide_path = "/mnt/CEPH_PROJECTS/Proslide/Landslides/Iffi_db_xxxx_to_2018/exportperEurac2020/Shapefiles/IFFI10_5.shp"
points_landslide_path = "/mnt/CEPH_PROJECTS/Proslide/Landslides/Iffi_db_xxxx_to_2018/exportperEurac2020/Shapefiles/IFFI10_1.shp"
database_dir = "/mnt/CEPH_PROJECTS/Proslide/Landslides/Iffi_db_xxxx_to_2018/exportperEurac2020/database"
}else if(os == "Windows"){
path_ncdf = "\\\\projectdata.eurac.edu/projects/Proslide/PREC_GRIDS_updated/"
poly_landslide_path = "\\\\projectdata.eurac.edu/projects/Proslide/Landslides/Iffi_db_xxxx_to_2018/exportperEurac2020/Shapefiles/IFFI10_5.shp"
points_landslide_path = "\\\\projectdata.eurac.edu/projects/Proslide/Landslides/Iffi_db_xxxx_to_2018/exportperEurac2020/Shapefiles/IFFI10_1.shp"
database_dir = "\\\\projectdata.eurac.edu/projects/Proslide/Landslides/Iffi_db_xxxx_to_2018/exportperEurac2020/database"
}else{
stop(call. = F, "what the hell are you working on...")
}
# which shape to read
if(points){
path_spatial = points_landslide_path
}else{
path_spatial = poly_landslide_path
}
# query the landslide data and its attributes -----------------------------
res = iffitoR::make_shapefile(database_dir = database_dir,
attribute_database_name = "tbl_frane",
# the name without extension
dictionary_database_name = "diz_frane",
shapefile = path_spatial,
# normally null only setting it here for me
# the colums we want to retrieve directly
attri = c("anno_min",
"mese_min",
"giorno_min",
"area"),
# tables to join the description
joins = list(
"tbl_frane.Generalita.Cod_tipo" = c(
"diz_frane.diz_tipo_movi.cod_tipo",
"diz_frane.diz_tipo_movi.tipologia"
),
"tbl_frane.clas_ii_liv.movimento" = c(
"diz_frane.diz_movimenti.movimento",
"diz_frane.diz_movimenti.nome_movimento"
),
"tbl_frane.ass_gen_cause.causa" = c(
"diz_frane.diz_cause.causa",
"diz_frane.diz_cause.nome_causa"
)
)
)
# translate to english
res_eng = iffitoR::translate_iffi(res)
# add time information
landsld = iffitoR::get_date_information(res_eng)
# save it
usethis::use_data(landsld, overwrite = T)
library(iffitoR)
library(shiny)
library(tidyverse)
library(sf)
library(GADMTools)
library(plotly)
library(leaflet)
library(leaflet.extras)
library(iffitoR)
res = landsld
library(shiny)
library(tidyverse)
library(sf)
library(GADMTools)
library(plotly)
library(leaflet)
library(leaflet.extras)
shiny::runApp()
shiny::runApp("local_tests/iffi_data_shiny/")
library(rsconnect)
deployApp(appDir = "local_tests/iffi_data_shiny/")
shiny::runApp()
shiny::runApp(appDir = "local_tests/iffi_data_shiny/")
shiny::runApp(appDir = "local_tests/iffi_data_shiny/")
library(here)
library(here)
shiny::runApp()
shiny::runApp(appDir = "local_tests/iffi_data_shiny/")
st_read("data/landsld.rda")
load("data/landsld.rda")
landsld
shiny::runApp(appDir = "local_tests/iffi_data_shiny/")
shiny::runApp(appDir = "local_tests/iffi_data_shiny/")
source('C:/Users/robin/eurac/R/iffitoR/local_tests/make_data.R', echo=TRUE)
devtools::load_all()
library(shiny)
library(tidyverse)
library(sf)
library(GADMTools)
library(plotly)
library(leaflet)
library(leaflet.extras)
library(iffitoR)
library(here)
shiny::runApp("local_tests/iffi_data_shiny/")
shiny::runApp("local_tests/iffi_data_shiny/")
shiny::runApp("local_tests/iffi_data_shiny/")
shiny::runApp("local_tests/iffi_data_shiny/")
shiny::runApp("local_tests/iffi_data_shiny/")
shiny::runApp("local_tests/iffi_data_shiny/")
shiny::runApp("local_tests/iffi_data_shiny/")
shiny::runApp("local_tests/iffi_data_shiny/")
shiny::runApp("local_tests/iffi_data_shiny/")
shiny::runApp("local_tests/iffi_data_shiny/")
shiny::runApp("local_tests/iffi_data_shiny/")
shiny::runApp("local_tests/iffi_data_shiny/")
shiny::runApp("local_tests/iffi_data_shiny/")
shiny::runApp("local_tests/iffi_data_shiny/")
shiny::runApp("local_tests/iffi_data_shiny/")
shiny::runApp("local_tests/iffi_data_shiny/")
shiny::runApp("local_tests/iffi_data_shiny/")
shiny::runApp("local_tests/iffi_data_shiny/")
shiny::runApp("local_tests/iffi_data_shiny/")
shiny::runApp("local_tests/iffi_data_shiny/")
shiny::runApp("local_tests/iffi_data_shiny/")
shiny::runApp("local_tests/iffi_data_shiny/")
shiny::runApp("local_tests/iffi_data_shiny/")
shiny::runApp("local_tests/iffi_data_shiny/")
shiny::runApp("local_tests/iffi_data_shiny/")
shiny::runApp("local_tests/iffi_data_shiny/")
shiny::runApp("local_tests/iffi_data_shiny/")
shiny::runApp("local_tests/iffi_data_shiny/")
shiny::runApp("local_tests/iffi_data_shiny/")
shiny::runApp("local_tests/iffi_data_shiny/")
shiny::runApp("local_tests/iffi_data_shiny/")
shiny::runApp("local_tests/iffi_data_shiny/")
shiny::runApp("local_tests/iffi_data_shiny/")
shiny::runApp("local_tests/iffi_data_shiny/")
shiny::runApp("local_tests/iffi_data_shiny/")
shiny::runApp("local_tests/iffi_data_shiny/")
shiny::runApp("local_tests/iffi_data_shiny/")
shiny::runApp("local_tests/iffi_data_shiny/")
shiny::runApp("local_tests/iffi_data_shiny/")
shiny::runApp("local_tests/iffi_data_shiny/")
shiny::runApp("local_tests/iffi_data_shiny/")
library(rsconnect)
rsconnect::deployApp(appDir = "local_tests/iffi_data_shiny/")
landsld
st_write(landsld, "local_tests/iffi_data_shiny/landsld.gpkg")
shiny::runApp("local_tests/iffi_data_shiny/")
res=st_read(here("local_tests", "iffi_data_shiny", "landsld.gpkg"))
shiny::runApp("local_tests/iffi_data_shiny/")
shiny::runApp("local_tests/iffi_data_shiny/")
rsconnect::deployApp(appDir = "local_tests/iffi_data_shiny/")
# load libraries---------------------------------------------------------------
library(sf)
library(iffitoR)
library(tmap)
library(tidyverse)
library(glue)
library(GADMTools)
library(mapview)
res = make_shapefile(
database_dir = "../euracR/data/database/",
# normally null only setting it here for me
attribute_database_name = "tbl_frane",
# the name without extension
dictionary_database_name = "diz_frane",
shapefile = "../euracR/data/Shapefiles/IFFI10_1.shp",
# normally null only setting it here for me
# the colums we want to retrieve directly
attri = c("anno_min",
"mese_min",
"giorno_min",
"area"),
# tables to join the description
joins = list(
"tbl_frane.Generalita.Cod_tipo" = c(
"diz_frane.diz_tipo_movi.cod_tipo",
"diz_frane.diz_tipo_movi.tipologia"
),
"tbl_frane.clas_ii_liv.movimento" = c(
"diz_frane.diz_movimenti.movimento",
"diz_frane.diz_movimenti.nome_movimento"
),
"tbl_frane.ass_gen_cause.causa" = c(
"diz_frane.diz_cause.causa",
"diz_frane.diz_cause.nome_causa"
)
)
)
res
res %>% count(anno_min) %>% arrange(desc(year.int))
res %>% count(anno_min) %>% arrange(desc(anno_min))
data %>% filter(anno_min == 2019)
data %>% filter(anno_min == 2019)
res %>% filter(anno_min == 2019)
shiny::runApp("local_tests/iffi_data_shiny/")
devtools::load_all()
browseVignettes(package="iffitoR")
devtools::build_vignettes()
?iffitoR::set_connection
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
```{r}
library(iffitoR)
# the path to the databases
connections = iffitoR::set_connection(".")
library(RODBC)
# the path to the databases
connections = iffitoR::set_connection(".")
rm(list=ls())
sessionInfo()
devtools::load_all()
sessionInfo()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
remove.packages("iffitoR")
a = insalled.packages()[,1]
a = installed.packages()[,1]
a
grep("iffi", a)
library(iffitoR)
browseVignettes(package="iffitoR")
detach(package:iffitoR)
library(iffitoR)
browseVignettes(package="iffitoR")
remove.packages("iffitoR")
browseVignettes(package="iffitoR")
detach(package:iffitoR)
browseVignettes(package="iffitoR")
a = installed.packages()[,1]
grep("iffi", a)
ls
library(iffitoR)
remotes::install_github("RobinKohrs/iffitoR")
devtools::build_vignettes()
pkgdown::build_site()
s
?pkgdown::build_site
devtools::build_site()
devtools::build_site()
devtools::load_all()
remotes::install_github("RobinKohrs/iffitoR")
remotes::install_github("RobinKohrs/iffitoR")
remotes::install_github("RobinKohrs/iffitoR")
library(iffitoR)
library(glue)
library(RODBC)
library(forcats)
library(dplyr)
library(ggplot2)
library(tools)
library(stringr)
library(sf)
os = Sys.info()
os
os = Sys.info()["sysname"]
os
ls()
# the path to the iffi polygons
landslide_poly_path = "\\\\projectdata.eurac.edu/projects/Proslide/Landslides/Iffi_db_xxxx_to_2018/exportperEurac2020/Shapefiles/IFFI10_5.shp"
# the path to the iffi points
landslide_point_path = "\\\\projectdata.eurac.edu/projects/Proslide/Landslides/Iffi_db_xxxx_to_2018/exportperEurac2020/Shapefiles/IFFI10_1.shp"
# the path to the folder with the iffi-databases
database_dir = "\\\\projectdata.eurac.edu/projects/Proslide/Landslides/Iffi_db_xxxx_to_2018/exportperEurac2020/database"
# we only want the dates from the attributes tables
attri = c("anno_min",
"mese_min",
"giorno_min")
library(iffitoR)
library(glue)
library(RODBC)
library(forcats)
library(dplyr)
library(ggplot2)
library(tools)
library(stringr)
ggplot(landsld) + geom_point(aes(x=year.int, y=second_level))
landsld %>%
filter(year.int > 1980) %>%
count(second_level, sort = TRUE)
landsld %>%
filter(year.int > 1980) %>%
count(second_level, sort = TRUE) %>%
mutate(second_level = glue("{second_level} ({n})")) %>%
mutate(second_level = fct_reorder(second_level, n))
landsld %>%
# filter(year.int > 1980) %>%
count(second_level, sort = TRUE) %>%
mutate(second_level = glue("{second_level} ({n})")) %>%
mutate(second_level = fct_reorder(second_level, n))
library(plotly)
?plot_ly
library(iffitoR)
library(plotly)
library(glue)
library(RODBC)
library(forcats)
library(dplyr)
library(ggplot2)
library(tools)
library(stringr)
library(sf)
landsld %>%
# filter(year.int > 1980) %>%
count(second_level, sort = TRUE) %>%
mutate(second_level = glue("{second_level} ({n})")) %>%
mutate(second_level = fct_reorder(second_level, n)) %>%
plot_ly(., x = ~year.int, y= ~n, color= ~second_level)
landsld %>%
# filter(year.int > 1980) %>%
count(second_level, sort = TRUE) %>%
mutate(second_level = glue("{second_level} ({n})")) %>%
mutate(second_level = fct_reorder(second_level, n))
landsld %>%
# filter(year.int > 1980) %>%
count(second_level, sort = TRUE) %>%
mutate(second_level = glue("{second_level} ({n})")) %>%
mutate(second_level = fct_reorder(second_level, n)) %>%
ggplot() +
geom_col(aes(x = n, y=second_level))
landsld %>%
# filter(year.int > 1980) %>%
count(second_level, sort = TRUE) %>%
mutate(second_level = glue("{second_level} ({n})")) %>%
mutate(second_level = fct_reorder(second_level, n)) %>%
ggplot() +
geom_col(aes(x = n, y=second_level)) %>%
labs(title="Distribution of points in the iffi database",
subtitle = "in the second-level classification",
x = "# of events",
y = "") +
theme_light()
landsld %>%
# filter(year.int > 1980) %>%
count(second_level, sort = TRUE) %>%
mutate(second_level = glue("{second_level} ({n})")) %>%
mutate(second_level = fct_reorder(second_level, n)) %>%
ggplot() +
geom_col(aes(x = n, y=second_level)) +
labs(title="Distribution of points in the iffi database",
subtitle = "in the second-level classification",
x = "# of events",
y = "") +
theme_light()
landsld %>%
filter(str_detect(second_level, "rotational|translational")) %>%
groupy_by(year.int) %>%
mutate(n = sum(year.int))
landsld %>%
filter(str_detect(second_level, "rotational|translational")) %>%
group_by(year.int) %>%
mutate(n = sum(year.int))
landsld %>%
filter(str_detect(second_level, "rotational|translational")) %>%
group_by(year.int) %>%
mutate(n = sum(year.int)) %>% View()
landsld %>%
filter(str_detect(second_level, "rotational|translational")) %>%
filter(date_info != "no date") %>%
group_by(year.int) %>%
mutate(n = sum(year.int)) %>% View()
landsld %>%
filter(str_detect(second_level, "rotational|translational")) %>%
filter(date_info != "no date") %>%
group_by(year.int) %>%
mutate(n = sum(year.int)) %>%
plot_ly(., x = ~year.int, y = ~n, color = ~second_level)
a = landsld %>%
filter(str_detect(second_level, "rotational|translational")) %>%
filter(date_info != "no date") %>%
group_by(year.int) %>%
mutate(n = sum(year.int))
head(a)
dim(a)
landsld %>%
filter(str_detect(second_level, "rotational|translational")) %>%
filter(date_info != "no date") %>%
group_by(year.int) %>%
mutate(n = sum(year.int)) %>%
plot_ly(., x = ~year.int, y = ~n)
landsld %>%
filter(str_detect(second_level, "rotational|translational")) %>%
filter(date_info != "no date") %>%
group_by(year.int) %>%
mutate(n = sum(year.int)) %>%
plot_ly(., x = ~year.posix, y = ~n)
landsld %>%
filter(str_detect(second_level, "rotational|translational")) %>%
filter(date_info != "no date") %>%
group_by(year.int) %>%
mutate(n = sum(year.int)) %>%
plot_ly(., x = ~year.posix,  type="histogram")
landsld %>%
filter(str_detect(second_level, "rotational|translational")) %>%
filter(date_info != "no date") %>%
group_by(year.int) %>%
mutate(n = sum(year.int)) %>%
plot_ly(., x = ~year.posix,  type="histogram", color=~second_level)
landsld %>%
filter(str_detect(second_level, "rotational|translational")) %>%
filter(date_info != "no date") %>%
group_by(year.int) %>%
mutate(n = sum(year.int)) %>%
plot_ly(., x = ~year.posix,  type="histogram", color=~second_level) %>%
layout(title="Distriubtion of rotational and translational slides",
yaxis = "year",
yaxis = "# of events")
landsld %>%
filter(str_detect(second_level, "rotational|translational")) %>%
filter(date_info != "no date") %>%
group_by(year.int) %>%
mutate(n = sum(year.int)) %>%
plot_ly(., x = ~year.posix,  type="histogram", color=~second_level) %>%
layout(title="Distriubtion of rotational and translational slides",
xaxis = "year",
yaxis = "# of events")
xaxis = list("year"),
landsld %>%
filter(str_detect(second_level, "rotational|translational")) %>%
filter(date_info != "no date") %>%
group_by(year.int) %>%
mutate(n = sum(year.int)) %>%
plot_ly(., x = ~year.posix,  type="histogram", color=~second_level) %>%
layout(title="Distriubtion of rotational and translational slides",
xaxis = list("year"),
yaxis = list("# of events"))
landsld %>%
filter(str_detect(second_level, "rotational|translational")) %>%
filter(date_info != "no date") %>%
group_by(year.int) %>%
mutate(n = sum(year.int)) %>%
plot_ly(., x = ~year.posix,  type="histogram", color=~second_level) %>%
layout(title="Distriubtion of rotational and translational slides",
xaxis = list("year", zeroline=T),
yaxis = list("# of events"))
landsld %>%
filter(str_detect(second_level, "rotational|translational")) %>%
filter(date_info != "no date") %>%
group_by(year.int) %>%
mutate(n = sum(year.int)) %>%
plot_ly(., x = ~year.int,  type="histogram", color=~second_level) %>%
layout(title="Distriubtion of rotational and translational slides",
xaxis = list("year", zeroline=T),
yaxis = list("# of events"))
devtools::document()
devtools::build_vignettes()
devtools::build_vignettes()
pkgdown::build_site()
devtools::build_vignettes()
pkgdown::build_site()
pkgdown::build_site()
names(knitr::knit_engines$get())
library(iffitoR)
devtools::load_all()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::load_all()
devtools::document()
conns
d = "../../iffi_raw_daniel/exportperEurac2020/database/"
database_dir = d
attribute_database_name="tbl_frane"
dictionary_database_name="diz_frane"
s = st_read("../../iffi_raw_daniel/exportperEurac2020/Shapefiles/IFFI10_1.shp")
shapefile = s
attri = c("anno_min",
"mese_min",
"giorno_min")
# set the right ones
# there are some issues with indexing the list, for some reason we need to index conns with [[]]
# to maintain a valid and open connection
index_attr = which(grepl(attribute_database_name, names(conns)))
# establish connections
conns = set_connection(database_dir)
conns
# set the right ones
# there are some issues with indexing the list, for some reason we need to index conns with [[]]
# to maintain a valid and open connection
index_attr = which(grepl(attribute_database_name, names(conns)))
index_attr
if (!is.null(dictionary_database_name)) {
index_dict = which(grepl(dictionary_database_name, names(conns)))
}
index_dict
attr_database_conn = conns[[index_attr]]
if (!is.null(dictionary_database_name)) {
dict_database_conn = conns[[index_dict]]
}
dict_database_conn
# the table names are the attributes we can query
# Especially the one in the attributes table are interesting
table_names_attr = make_vector_table_names(attr_database_conn)
if (!is.null(dictionary_database_name)) {
table_names_dict = make_vector_table_names(dict_database_conn)
}
# make a list of dataframes(tables) for the attributes database
dfs_attr = make_list_dataframes(attr_database_conn)
dfs_attr
rm(list=ls())
remotes::install_github("RobinKohrs/iffitoR")
remove.packages("iffitoR")
devtools::load_all()
?devtools::check_built
devtools::check()
devtools::check(vignettes = F)
?landsld
landsld
devtools::check(vignettes = F)
library(iffitoR)
remove.packages("iffitoR")
library(iffitoR)
rm(list=ls())
ls
remotes::install_github("RobinKohrs/iffitoR")
pkgdown::build_site()
library(iffitoR)
